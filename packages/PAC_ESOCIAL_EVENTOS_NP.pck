CREATE OR REPLACE PACKAGE PAC_ESOCIAL_EVENTOS_NP IS

  -- AUTHOR  : LUCAS PEREIRA
  -- CREATED : 10/07/2018 13:52:28
  -- PURPOSE : GERAR EVENTOS OCORRIDOS NO SIGEPREV PARA ENVIO AO ESOCIAL

  --ERROS DO PROCESSO
  GB_REC_ERRO ESOCIAL.TSOC_CTR_ERRO_PROCESSO%ROWTYPE;
  --COD INS
  GB_COD_INS NUMBER;
  --ID DO PERÍODO ABERTO PARA PROCESSAMENTO DE EVENTO
  GB_ID_PERIODO_DET ESOCIAL.TSOC_CTR_PERIODO_DET.ID_PERIODO_DET%TYPE := 9;--:= 10;-- := 9;--8 2410; --TESTE
  --STATUS DO PERIODO DO EVENTO 
  GB_FLG_STATUS_PERIODO ESOCIAL.TSOC_CTR_PERIODO_DET.FLG_STATUS%TYPE; 
  --ORIGEM RELACIONADA AOS EVENTOS QUE SERÃO GERADOS
  GB_ID_ORIGEM ESOCIAL.TSOC_PAR_ORIGEM.ID_ORIGEM%TYPE;
  --DATA DE OBRIGATORIEDADE DE ENVIO DE EVENTOS DO ESOCIAL
  GB_DAT_ESOCIAL DATE := '01/03/2019';
  --DATA DE INÍCIO DE GERAÇÃO DE EVENTO
  GB_DAT_EVT_ATU VARCHAR2(100);
  --DATA DE INÍCIO DE GERAÇÃO DO EVENTO ANTERIOR
  GB_DAT_EVT_ANT VARCHAR2(100);
  --SEQUENCIAL DA CHAVE DE ID DE EVENTO
  GB_SEQ_CHAVE_ID NUMBER;
  --PRIEMIRA FOLHA DE PAGAMENTO DO BENEFICIÁRIO 
  GB_PRIMEIRA_FOLHA DATE;
  --IDENTIFICADOR DO PROCESSAMENTO
  GB_ID_CTR_PROCESSO ESOCIAL.TSOC_CTR_PROCESSO.ID_CTR_PROCESSO%TYPE;

  --DADOS DO EMPREGADOR
  TYPE GB_TY_EMPREGADOR IS RECORD(
    TP_INSC  ESOCIAL.TSOC_CAD_EMPREGADOR.TP_INSC%TYPE,
    NUM_CNPJ ESOCIAL.TSOC_CAD_EMPREGADOR.NUM_CNPJ%TYPE);

  GB_EMPREGADOR GB_TY_EMPREGADOR;

  --DADOS DE FOLHA DE PAGAMENTO
  TYPE GB_TY_FOLHA IS RECORD(
    COD_INS       USER_IPESP.TB_HFOLHA.COD_INS%TYPE,
    SEQ_PAGAMENTO USER_IPESP.TB_HFOLHA.SEQ_PAGAMENTO%TYPE,
    TIP_PROCESSO  USER_IPESP.TB_HFOLHA.TIP_PROCESSO%TYPE,
    PER_PROCESSO  USER_IPESP.TB_HFOLHA.PER_PROCESSO%TYPE,
    COD_IDE_CLI   USER_IPESP.TB_HFOLHA.COD_IDE_CLI%TYPE,
    COD_BENEFICIO USER_IPESP.TB_HFOLHA.COD_BENEFICIO%TYPE);

  GB_FOLHA GB_TY_FOLHA;

  --CURSOR BENEFICIÁRIO 
  CURSOR GB_C_CAD_BENEFICIARIO IS
    SELECT COD_IDE_CLI AS COD_IDE_CLI_BEN
      FROM USER_IPESP.TB_PESSOA_FISICA PF
     WHERE PF.COD_INS = GB_COD_INS
      --AND PF.COD_IDE_CLI = '05000089150000'
          --ATIVOS E SUSPENSOS
       AND EXISTS (SELECT 1
              FROM USER_IPESP.TB_BENEFICIARIO BEN
             WHERE BEN.COD_INS = PF.COD_INS
               AND BEN.COD_IDE_CLI_BEN = PF.COD_IDE_CLI
               AND BEN.FLG_STATUS IN ('A', 'S'))
          --APENAS BENEFICIÁRIOS NOVOS 
       AND NOT EXISTS (SELECT 1
              FROM ESOCIAL.TSOC_CAD_BENEFICIARIO TBEN
             WHERE TBEN.COD_INS = PF.COD_INS
               AND TBEN.COD_IDE_CLI_BEN = PF.COD_IDE_CLI)
       --AND ROWNUM <= 1000
       ;

  --CURSOR DO EVENTO 2400 
  CURSOR GB_C_2400(P_ID_CAD_BENEFICIARIO IN ESOCIAL.TSOC_2400_BENEFICIARIO_INI.ID_CAD_BENEFICIARIO%TYPE) IS
    SELECT TB.*
      FROM ESOCIAL.TSOC_CAD_BENEFICIARIO TB
     WHERE 
        --LNUNES 24/08/2018 ARQUIVO 2405 COMENTADO PARA QUE POSSAM SER GERADOS REGISTROS QUANDO HOUVER ALTERAÇÃO DE DADOS DE NASCIMENTO
       /*NOT EXISTS
     (SELECT 1
              FROM ESOCIAL.TSOC_2400_BENEFICIARIO_INI TI
             WHERE TI.ID_CAD_BENEFICIARIO = TB.ID_CAD_BENEFICIARIO
               AND TI.COD_INS = TB.COD_INS)
       AND*/ TB.COD_INS = GB_COD_INS
       AND TB.ID_CAD_BENEFICIARIO = P_ID_CAD_BENEFICIARIO;

  --CURSOR DE CADASTRO DE BENEFÍCIO  
  CURSOR GB_C_CAD_BENEFICIO IS
    SELECT BEN.COD_IDE_CLI_BEN,
           BEN.COD_BENEFICIO,
           BEN.DAT_INI_BEN,
           BEN.COD_PERFIL,
           BEN.COD_PROC_GRP_PAG,
           CB.COD_ENTIDADE,
           CB.COD_IDE_CLI_SERV,
           CB.NUM_MATRICULA,
           CB.COD_TIPO_BENEFICIO,
           CB.COD_IDE_REL_FUNC,
           CB.COD_CARGO,
           TCB.ID_CAD_BENEFICIARIO,
           TCB.NUM_CPF
           --LNUNES 12/09/2018 ADICIONADA FLG_STATUS
           ,BEN.FLG_STATUS
           --LNUNES 14/09/2018 ADICIONADO MOT_CESSACAO
           ,BEN.MOT_CESSACAO
           ,BEN.DAT_FIM_BEN
      FROM USER_IPESP.TB_BENEFICIARIO        BEN,
           USER_IPESP.TB_CONCESSAO_BENEFICIO CB,
           ESOCIAL.TSOC_CAD_BENEFICIARIO     TCB
     WHERE BEN.COD_INS = GB_COD_INS
       AND BEN.FLG_STATUS IN ('A', 'S')
       AND CB.COD_INS = BEN.COD_INS
       AND CB.COD_BENEFICIO = BEN.COD_BENEFICIO
       AND TCB.COD_INS = BEN.COD_INS
       AND TCB.COD_IDE_CLI_BEN = BEN.COD_IDE_CLI_BEN
       AND NOT EXISTS
     (SELECT 1
              FROM ESOCIAL.TSOC_CAD_BENEFICIO TCBENEF
             WHERE TCBENEF.COD_INS = BEN.COD_INS
               AND TCBENEF.COD_IDE_CLI_BEN = BEN.COD_IDE_CLI_BEN)
          --TESTE 
       --AND ROWNUM <= 100
       ;

  --CURSOR DE EVENTO DE BENEFÍCIO 
  CURSOR GB_C_2410(P_ID_CAD_BENEFICIO IN ESOCIAL.TSOC_CAD_BENEFICIO.ID_CAD_BENEFICIO%TYPE) IS
    SELECT *
      FROM ESOCIAL.TSOC_CAD_BENEFICIO TBEN
     WHERE TBEN.COD_INS = GB_COD_INS
       AND TBEN.ID_CAD_BENEFICIO = P_ID_CAD_BENEFICIO
       --LNUNES 12/09/2018 ARQUIVO 2416 E 2420 COMENTADO PARA QUE POSSAM SER GERADOS REGISTROS QUANDO HOUVER ALTERAÇÃO
       /*AND NOT EXISTS
     (SELECT 1
              FROM ESOCIAL.TSOC_2410_BENEFICIO_INI TBI
             WHERE TBI.COD_INS = TBEN.COD_INS
               AND TBI.ID_CAD_BENEFICIO = TBEN.ID_CAD_BENEFICIO)*/;

  --CURSOR  DE ALTERAÇÃO DE BENEFICIÁRIO 
  CURSOR GB_C_ALT_BENEFICIARIO IS
    SELECT CBEN.*/*, CBEN.ROWID ROW_ID_CBEN*/
      FROM ESOCIAL.TSOC_CAD_BENEFICIARIO CBEN
     WHERE
    --REGISTROS QUE NUNCA TIVERAM UMA ALTERAÇÃO ENVIADA
     (EXISTS (SELECT 1
                FROM ESOCIAL.TSOC_2400_BENEFICIARIO_INI EBEN
               WHERE EBEN.COD_INS = CBEN.COD_INS
                 AND EBEN.ID_CAD_BENEFICIARIO = CBEN.ID_CAD_BENEFICIARIO
                 AND EBEN.CTR_FLG_STATUS = 'FN' --FINALIZADO
              ) /*AND NOT EXISTS
      (SELECT 1
         FROM ESOCIAL.TSOC_2405_BENEFICIARIO_ALT E_ALT_BEN
        WHERE E_ALT_BEN.COD_INS = CBEN.COD_INS
          AND E_ALT_BEN.ID_CAD_BENEFICIARIO = CBEN.ID_CAD_BENEFICIARIO)*/)
     /*OR
    --REGISTROS JÁ TIVERAM A ÚLTIMA ALTERAÇÃO ENVIADA COM SUCESSO
     (EXISTS (SELECT 1
                FROM ESOCIAL.TSOC_2400_BENEFICIARIO_INI EBEN
               WHERE EBEN.COD_INS = CBEN.COD_INS
                 AND EBEN.ID_CAD_BENEFICIARIO = CBEN.ID_CAD_BENEFICIARIO
                 AND EBEN.CTR_FLG_STATUS = 'FN') AND EXISTS
      (SELECT 1
         FROM ESOCIAL.TSOC_2405_BENEFICIARIO_ALT E_ALT_BEN
        WHERE E_ALT_BEN.COD_INS = CBEN.COD_INS
          AND E_ALT_BEN.ID_CAD_BENEFICIARIO = CBEN.ID_CAD_BENEFICIARIO
          AND E_ALT_BEN.CTR_FLG_STATUS = 'FN'
          AND E_ALT_BEN.SEQ_EVENTO =
              (SELECT MAX(E_ALT_BEN1.SEQ_EVENTO)
                 FROM ESOCIAL.TSOC_2405_BENEFICIARIO_ALT E_ALT_BEN1
                WHERE E_ALT_BEN1.COD_INS = CBEN.COD_INS
                  AND E_ALT_BEN1.ID_CAD_BENEFICIARIO =
                      CBEN.ID_CAD_BENEFICIARIO)))*/
    /*AND ROWNUM <= 1000*/
    ;

  --CURSOR  DE ALTERAÇÃO DE BENEFÍCIO 
  CURSOR GB_C_ALT_BENEFICIO IS
    SELECT CBEN.*, CB.COD_IDE_REL_FUNC, BEN.COD_PROC_GRP_PAG, BEN.COD_PERFIL,
           CB.COD_IDE_CLI_SERV, BEN.MOT_CESSACAO MOT_CESSACAO_2
      FROM ESOCIAL.TSOC_CAD_BENEFICIO CBEN,
           USER_IPESP.TB_CONCESSAO_BENEFICIO CB,
           USER_IPESP.TB_BENEFICIARIO BEN
     WHERE CBEN.COD_INS = CB.COD_INS
       AND CBEN.COD_BENEFICIO = CB.COD_BENEFICIO       
       AND BEN.COD_INS = CBEN.COD_INS
       AND BEN.COD_BENEFICIO = CBEN.COD_BENEFICIO
       AND BEN.COD_IDE_CLI_BEN = CBEN.COD_IDE_CLI_BEN
       AND EXISTS (SELECT 1
                FROM ESOCIAL.TSOC_2410_BENEFICIO_INI EBEN
               WHERE EBEN.COD_INS = CBEN.COD_INS
                 AND EBEN.ID_CAD_BENEFICIO = CBEN.ID_CAD_BENEFICIO
                 AND EBEN.CTR_FLG_STATUS = 'FN' --FINALIZADO
                 );

  GB_ID_EVENTO ESOCIAL.TSOC_PAR_EVENTO.ID_EVENTO%TYPE;

  --CONFIGURA PARÂMETROS DA SESSÃO 
  PROCEDURE SP_DEFAULT_SESSION;

  --EXECUTA PROCESSO DE CARGA DE BENEFICIÁRIO
  PROCEDURE SP_CAD_BENEFICIARIO(P_ID_CTR_PROCESSO IN ESOCIAL.TSOC_CTR_PROCESSO.ID_CTR_PROCESSO%TYPE);

  --ZERA O RECORDSET PARA CADA LINHA DO CURSOR
  PROCEDURE SP_RESET_CAD_BENEFICIARIO(P_CAD_BEN OUT ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE);

  --GERADOR DE ID PARA EVENTOS
  FUNCTION FC_GERA_ID_EVENTO RETURN VARCHAR2;

  --RETORNAR SEQUENCIA DE CADASTRO DO BENEFICIÁRIO
  FUNCTION FC_RET_SEQ_CAD_BENEFICIARIO(P_SEQ_CAD IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIARIO.SEQ_CAD%TYPE;

  --RETORNA OS DADOS DE DE BENEFICIÁRIO (PESSOA FISICA)    
  PROCEDURE SP_RET_INFO_PESSOA_FISICA(P_INFO_PF IN OUT ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE);

  --RETORNA NIS/PIS DO BENEFICIÁRIO OU INSTITUIDOR DE PENSÃO 
  FUNCTION FC_RET_NIS_PIS_BEN(P_NIS_PIS IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIARIO.NUM_NIS%TYPE;

  --RETORNA O IDE CLI DO INSTITUIDOR DE PENSÃO 
  FUNCTION FC_RET_IDE_CLI_INST(P_COD_IDE_CLI_BEN IN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_IDE_CLI_BEN%TYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_IDE_CLI_BEN%TYPE;

  --RETORNA A DATA DE INGRESSO DO BENEFICÁRIO          
  FUNCTION FC_RET_DAT_ING_BEN(P_ING_BEN IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIARIO.DATA_ING_BENEFICIARIO%TYPE;

  --RETORNA S OU N PARA INCAPACIDADE E DATA DA INCAPACIDADE 
  PROCEDURE SP_RET_INCAPACIDADE_BEN(P_INCAPACIDADE IN OUT ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE);

  --RETORNA DADOS DE NASCIMENTO DO BENEFICIÁRIO                            
  PROCEDURE SP_RET_INFO_NASC_BEN(P_NASCIMENTO IN OUT ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE);

  --RETORNA O CÓDIGO DE MUNICÍPIO SIGEPREV BUSCANDO PELO NOME INFORMADO                                               

  FUNCTION FC_RET_COD_NOM_MUNICIPIO(P_COD_UF_NASC   IN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_UF_NASC%TYPE,
                                    P_NOM_MUNICIPIO IN USER_IPESP.TB_MUNICIPIO.NOM_MUNICIPIO%TYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_MUNICIPIO%TYPE;

  --RETORNA O MUNICÍPIO DO ENDEREÇO DO BENEFICIÁRIO
  FUNCTION FC_RET_COD_MUNICIPIO_END(P_COD_IDE_CLI_BEN IN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_IDE_CLI_BEN%TYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_MUNICIPIO%TYPE;

  --RETORNA O CÓDIGO DO MUNICIPIO, PELO CEP NOS CORREIOS 
  FUNCTION FC_RET_COD_MUNICIPIO_CEP(P_NUM_CEP IN USER_IPESP.TB_END_PESSOA_FISICA.NUM_CEP%TYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_MUNIC_NASC%TYPE;

  --RETORNA O ENDEREÇO COMPLETO DO BENEFICIÁRIO 
  PROCEDURE SP_RET_ENDERECO(P_ENDERECO IN OUT ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE);

  --FAZ A INCLUSÃO DO CADASTRO DO BENEFICIÁRIO NA TSOC_CAD_BENEFICIARIO
  PROCEDURE SP_INC_TSOC_CAD_BENEFICIARIO(P_CAD_BEN IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE);

  --CONTROLE DE ERROS DE PROCESSO
  PROCEDURE SP_GERA_ERRO_PROCESSO;

  --GERA SEQUENCIAL DE EVENTO 2400
  FUNCTION FC_RET_SEQ_EVENTO_2400(P_SEQ_EVT IN ESOCIAL.TSOC_2400_BENEFICIARIO_INI%ROWTYPE)
    RETURN ESOCIAL.TSOC_2400_BENEFICIARIO_INI.SEQ_EVENTO%TYPE;

  --RETORNA O TIPO E NÚMERO DE INSCRIÇÃO DO EMPREGADOR
  PROCEDURE SP_RET_INSC_EMP;

  --GERA EVENTO 2400 DE ACORDO COM O CADASTRO DE BENEFICIÁRIO 
  PROCEDURE SP_2400(P_ID_CAD_BENEFICIARIO IN ESOCIAL.TSOC_CAD_BENEFICIARIO.ID_CAD_BENEFICIARIO%TYPE);

  --RETORNA O CÓDIGO DE RAÇA EQUIVALENTE NO ESOCIAL 
  FUNCTION FC_DEPARA_RACA_COR(P_COD_RACA IN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_RACA%TYPE)
    RETURN ESOCIAL.TSOC_2400_BENEFICIARIO_INI.BENEFICIARIO_RACACOR%TYPE;

  --RETORNA O CÓDIGO DE ESTADO CIVIL EQUIVALENTE NO ESOCIAL 
  FUNCTION FC_DEPARA_EST_CIV(P_EST_CIV IN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_EST_CIV%TYPE)
    RETURN ESOCIAL.TSOC_2400_BENEFICIARIO_INI.BENEFICIARIO_ESTCIV%TYPE;

  --RETORNA O CÓDIGO DO MUNICIPIO EQUIVALENTE NO ESOCIAL (IBGE)
  FUNCTION FC_DEPARA_MUNICIP_IBGE(P_COD_MUN IN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_MUNICIPIO%TYPE)
    RETURN ESOCIAL.TSOC_2400_BENEFICIARIO_INI.ENDERECO_CODMUNIC%TYPE;

  --RETORNA O CÓDIGO DO PAIS EQUIVALENTE NO ESOCIAL           
  FUNCTION FC_DEPARA_PAIS_IBGE(P_COD_PAIS IN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_PAIS%TYPE)
    RETURN ESOCIAL.TSOC_2400_BENEFICIARIO_INI.ENDERECO_PAISRESID%TYPE;

  --RETORNA O CÓDIGO DE NACIONALIDADE EQUIVALENTE NO ESOCIAL 
  FUNCTION FC_DEPARA_PAIS_NACION(P_COD_NACIO IN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_NACIO%TYPE)
    RETURN ESOCIAL.TSOC_2400_BENEFICIARIO_INI.DADOSNASC_PAISNAC%TYPE;

  --VALIDA SE EXISTE PERÍODO ABERTO PARA A ORIGEM 
  /*FUNCTION FC_RET_PERIODO_ORIGEM
    RETURN ESOCIAL.TSOC_CTR_PERIODO_DET.ID_PERIODO_DET%TYPE;*/

  --FAZ A INCLUSÃO DO EVENTO 2400     
  PROCEDURE SP_INC_2400(P_2400 IN ESOCIAL.TSOC_2400_BENEFICIARIO_INI%ROWTYPE);

  --RETORNA O TIPO DE LOGRADOURO CORRESPONDENDO NO ESOCIAL  
  FUNCTION FC_DEPARA_TIP_LOGRADOURO(P_TIP_LOGRAD IN ESOCIAL.TSOC_CAD_BENEFICIARIO.TIP_LOGRADOURO%TYPE)
    RETURN ESOCIAL.TSOC_2400_BENEFICIARIO_INI.ENDERECO_TPLOGRAD%TYPE;

  --LIMPA VARIÁVEIS DO EVENTO 2400  
  PROCEDURE SP_RESET_2400(P_2400 IN OUT ESOCIAL.TSOC_2400_BENEFICIARIO_INI%ROWTYPE);

  --VALIDA CPF 
  FUNCTION FC_VALIDA_CPF(P_CPF IN VARCHAR2)
    RETURN BOOLEAN;

  --VALIDA NIT 
  FUNCTION FC_VALIDA_NIT(P_NIT IN VARCHAR2) RETURN BOOLEAN;

  --VALIDA PIS/PASEP
  FUNCTION FC_VALIDA_PISPASEP(P_PIS_NUM VARCHAR2) RETURN BOOLEAN;

  --VALIDA VALORES INSERIDOS PARA DETERMINAR SE O EVENTO É VALIDO OU NÃO 
  PROCEDURE SP_VALIDA_2400(P_2400  IN OUT ESOCIAL.TSOC_2400_BENEFICIARIO_INI%ROWTYPE,
                           PC_2400 IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE);

  --GERA CADASTRO DO BENEFÍCIO
   PROCEDURE SP_CAD_BENEFICIO(P_ID_CTR_PROCESSO IN ESOCIAL.TSOC_CTR_PROCESSO.ID_CTR_PROCESSO%TYPE);

  --RETORNA SEQUENCIAL DE CADASTRO DO BENEFÍCIO                         
  FUNCTION FC_RET_SEQ_CAD_BENEFICIO(P_SEQ_CAD IN ESOCIAL.TSOC_CAD_BENEFICIO%ROWTYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIO.SEQ_CAD%TYPE;

  --RETORNA O CNPJ DA ENTIDADE DO BENEFÍCIO   
  FUNCTION FC_RET_CNPJ_ENT(P_COD_ENTIDADE IN USER_IPESP.TB_CONCESSAO_BENEFICIO.COD_ENTIDADE%TYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIO.NUM_CNPJ_ENTIDADE%TYPE;

  --RETORNA FLAG DE DATA DE INICIO DE BENEFICIO ANTERIOR A OBRIGATORIEDADE DE EVENTOS
  --NÃO PERIÓDICOS DO ESOCIAL 
  FUNCTION FC_RET_FLG_DAT_BEN_ANT(P_CAD_BENEFICIO IN ESOCIAL.TSOC_CAD_BENEFICIO%ROWTYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIO.FLG_DAT_BEN_ANTERIOR%TYPE;

  --VERIFICA SE O BENEFÍCIO POSSUI ORDEM JUDICIAL    
  /*FUNCTION FC_FLG_BEN_JUD(P_CUR_BENEFICIO IN GB_C_CAD_BENEFICIO%ROWTYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIO.FLG_BEN_JUD%TYPE;*/
 FUNCTION FC_FLG_BEN_JUD(P_COD_BENEFICIO IN ESOCIAL.TSOC_CAD_BENEFICIO.COD_BENEFICIO%TYPE,
                          P_COD_TIPO_BENEFICIO IN ESOCIAL.TSOC_CAD_BENEFICIO.COD_TIPO_BENEFICIO%TYPE,
                          P_COD_ENTIDADE IN ESOCIAL.TSOC_CAD_BENEFICIO.COD_ENTIDADE%TYPE,                           
                          P_COD_IDE_REL_FUNC IN USER_IPESP.TB_CARGA_UCRH_FUNCIONAL.COD_IDE_REL_FUNC%TYPE,
                          P_COD_IDE_CLI_BEN IN ESOCIAL.TSOC_CAD_BENEFICIO.COD_IDE_CLI_BEN%TYPE,                                                      
                          P_COD_PROC_GRP_PAG IN USER_IPESP.TB_BENEFICIARIO.COD_PROC_GRP_PAG%TYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIO.FLG_BEN_JUD%TYPE;

  --OBTÉM O CÓDIGO DE PARENTESCO OU PERFIL SIGEPREV  
  FUNCTION FC_OBTEM_PERFIL_PARENTESCO(P_COD_BENEFICIO ESOCIAL.TSOC_CAD_BENEFICIO.COD_BENEFICIO%TYPE,
                                      P_COD_PERFIL USER_IPESP.TB_BENEFICIARIO.COD_PERFIL%TYPE,
                                      P_COD_IDE_CLI_BEN ESOCIAL.TSOC_CAD_BENEFICIO.COD_IDE_CLI_BEN%TYPE,
                                      P_COD_IDE_CLI_SERV USER_IPESP.TB_CONCESSAO_BENEFICIO.COD_IDE_CLI_SERV%TYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIO.COD_TIPO_PENSAO%TYPE;

  --LIMPA AS VARIÁVEIS DO CADASTRO DE BENEFÍCIO 
  PROCEDURE SP_RESET_CAD_BENEFICIO(P_CAD_BENEFICIO IN OUT ESOCIAL.TSOC_CAD_BENEFICIO%ROWTYPE);

  --OBTÉM OS DADOS DO INSTITUIDOR DE PENSÃO 
  PROCEDURE SP_RET_INFO_INST(P_CAD_BENEFICIO    IN OUT ESOCIAL.TSOC_CAD_BENEFICIO%ROWTYPE,
                             P_COD_IDE_CLI_SERV IN USER_IPESP.TB_CONCESSAO_BENEFICIO.COD_IDE_CLI_SERV%TYPE);

  --FAZ INCLUSÃO NA TABELA DE CADASTRO DE BENEFÍCIO    
  PROCEDURE SP_INC_TSOC_CAD_BENEFICIO(P_CAD_BENEFICIO IN ESOCIAL.TSOC_CAD_BENEFICIO%ROWTYPE);

  --RETORNA A PRIMEIRA FOLHA DE PAGAMENTO DO BENEFICIÁRIO
 FUNCTION FC_RET_PRIMEIRA_FOLHA RETURN DATE;

  --RETORNA O VALOR BRUTO DA PRIMEIRA FOLHA DO BENEFICIÁRIO      
  FUNCTION FC_OBTEM_HBRUTO(P_COD_TIPO_BEN IN USER_IPESP.TB_CONCESSAO_BENEFICIO.COD_TIPO_BENEFICIO%TYPE,
                           P_DAT_INI_BEN  IN USER_IPESP.TB_BENEFICIARIO.DAT_INI_BEN%TYPE,
                           P_COD_ENTIDADE IN USER_IPESP.TB_CONCESSAO_BENEFICIO.COD_ENTIDADE%TYPE)
    RETURN NUMBER;

  --LIMPA AS VARIÁVEIS DO EVENTO 2410                            
  PROCEDURE SP_RESET_2410(P_2410 IN OUT ESOCIAL.TSOC_2410_BENEFICIO_INI%ROWTYPE);

  --RETORNA SEQUENCIAL DO EVENTO 2410
  FUNCTION FC_RET_SEQ_EVENTO_2410(P_SEQ_EVT IN ESOCIAL.TSOC_2410_BENEFICIO_INI%ROWTYPE)
    RETURN ESOCIAL.TSOC_2410_BENEFICIO_INI.SEQ_EVENTO%TYPE;

  --FAZ A INCLUSÃO NA TABELA DE EVENTO 2410
  PROCEDURE SP_INC_2410(P_2410 IN ESOCIAL.TSOC_2410_BENEFICIO_INI%ROWTYPE);

  --RETORNA VERDADEIRO SE O BENEFICIÁRIO POSSUIR PARIDADE E FALSO SE NÃO TIVER
  FUNCTION FC_PARIDADE_FOLHA(P_PER_ULT_PROCESSO IN USER_IPESP.TB_BENEFICIARIO.PER_ULT_PROCESSO%TYPE) RETURN NUMBER;

  --DE PARA DE TIPO DE BENEFÍCIO SIGEPREV -> ESOCIAL  
  FUNCTION FC_DEPARA_TIP_BENEFICIO(P_CUR_2410 IN GB_C_2410%ROWTYPE)
    RETURN ESOCIAL.TSOC_2410_BENEFICIO_INI.DADOSBENEFICIO_TPBENEFICIO%TYPE;

  --OBTÉM O CÓDIGO DE TIPO DE PENSÃO, COM BASE NO CÓDIGO 
  --DE PARENTESCO, OU DE PERFIL DO BENEFICIÁRIO. 
  --PERFIL SE FOR BENEFÍCIO CONCEDIDO, PARENTESCO SE FOR LEGADO. 
  FUNCTION FC_DEPARA_TPPENMORTE(P_CUR_2410 IN GB_C_2410%ROWTYPE)
    RETURN ESOCIAL.TSOC_2410_BENEFICIO_INI.INFOPENMORTE_TPPENMORTE%TYPE;

  --VALIDA CNPJ 
  FUNCTION FC_VALIDA_CNPJ(P_CNPJ IN VARCHAR2) RETURN BOOLEAN;

  --GERA EVENTO 2410 DE BENEFÍCIO 
  PROCEDURE SP_2410(P_ID_CAD_BENEFICIO IN ESOCIAL.TSOC_CAD_BENEFICIO.ID_CAD_BENEFICIO%TYPE);

  --RETORNA O TIPO DE BENEFÍCIO ESOCIAL EM CASO DE SER CONCEDIDO DEPOIS
  --DA DATA DE OBRIGATORIEDADE.  
  FUNCTION FC_DEPARA_TIP_BEN_POS_ESOC(P_CUR_2410 IN GB_C_2410%ROWTYPE)
    RETURN ESOCIAL.TSOC_2410_BENEFICIO_INI.DADOSBENEFICIO_TPBENEFICIO%TYPE;

  --RETORNA CAL_SEQ_BEN EM APOSENTADORIA CIVIL, OU PAP_COD_BEN EM CASO DE OUTROS TIPOS DE BENEFÍCIO
  --DE APOSENTADORIA CIVIL NO ESOCIAL 
  FUNCTION FC_RET_COD_CAL_PAP_SIGEPREV(P_CUR_2410 IN GB_C_2410%ROWTYPE)
    RETURN NUMBER;

  --VALIDA EVENTO 2410 DE BENEFÍCIO   
  PROCEDURE SP_VALIDA_2410(P_2410     IN OUT ESOCIAL.TSOC_2410_BENEFICIO_INI%ROWTYPE,
                           P_CUR_2410 IN GB_C_2410%ROWTYPE);
                           
  --FORMATA STRING REMOVENDO ACENTOS E CARACTERES ESPECIAIS
  FUNCTION FC_FORMATA_STRING(PSTRING IN VARCHAR2) RETURN VARCHAR2;

  --VERIFICA OS BENEFICIÁRIOS QUE TIVERAM ALGUMA ALTERAÇÃO
  PROCEDURE SP_ALT_BENEFICIARIO(P_COD_INS IN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_INS%TYPE,
                                P_ID_CTR_PROCESSO IN ESOCIAL.TSOC_CTR_PROCESSO.ID_CTR_PROCESSO%TYPE);

  FUNCTION FC_DADOS_NASC_DIFERENTES(P_BENEFICIARIO_DADOS_ORIGINAIS IN GB_C_ALT_BENEFICIARIO%ROWTYPE,
                                    P_BENEFICIARIO_DADOS_NOVOS     IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE)
  RETURN BOOLEAN;

  FUNCTION FC_OUTROS_DADOS_DIFERENTES(P_BENEFICIARIO_DADOS_ORIGINAIS IN GB_C_ALT_BENEFICIARIO%ROWTYPE,
                                      P_BENEFICIARIO_DADOS_NOVOS     IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE)
    RETURN BOOLEAN;

  PROCEDURE SP_INC_TSOC_HCAD_BENEFICIARIO(P_CAD_BEN IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE);
  
  FUNCTION FC_RET_SEQ_HCAD_BENEFICIARIO(P_SEQ_HIST IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE)
    RETURN ESOCIAL.TSOC_HCAD_BENEFICIARIO.SEQ_HIST%TYPE;

  FUNCTION FC_RET_SEQ_EVENTO_2405(P_SEQ_EVT IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE)
    RETURN ESOCIAL.TSOC_2405_BENEFICIARIO_ALT.SEQ_EVENTO%TYPE;
    
  PROCEDURE SP_ATU_TSOC_CAD_BENEFICIARIO(P_CAD_BEN IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE, P_TIPO VARCHAR2);

  PROCEDURE SP_2405(P_ID_CAD_BENEFICIARIO IN ESOCIAL.TSOC_CAD_BENEFICIARIO.ID_CAD_BENEFICIARIO%TYPE);
  
  PROCEDURE SP_RESET_2405(P_2405 IN OUT ESOCIAL.TSOC_2405_BENEFICIARIO_ALT%ROWTYPE);
  
  FUNCTION FC_RET_SEQ_EVENTO_2405(P_SEQ_EVT IN ESOCIAL.TSOC_2405_BENEFICIARIO_ALT%ROWTYPE)
    RETURN ESOCIAL.TSOC_2405_BENEFICIARIO_ALT.SEQ_EVENTO%TYPE;
    
  PROCEDURE SP_VALIDA_2405(P_2405  IN OUT ESOCIAL.TSOC_2405_BENEFICIARIO_ALT%ROWTYPE,
                           PC_2405 IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE); 
                           
  PROCEDURE SP_INC_2405(P_2405 IN ESOCIAL.TSOC_2405_BENEFICIARIO_ALT%ROWTYPE);                              
  
  FUNCTION FC_RET_ID_EVENTO_EXISTENTE(P_TIP_EVENTO VARCHAR2, P_ID_CADASTRO NUMBER) 
    RETURN VARCHAR2;
    
  PROCEDURE SP_ALT_BENEFICIO(P_COD_INS IN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_INS%TYPE,
                             P_ID_CTR_PROCESSO IN ESOCIAL.TSOC_CTR_PROCESSO.ID_CTR_PROCESSO%TYPE);   
                             
  PROCEDURE SP_RET_INFO_BENEFICIO(P_INFO_BENEF IN OUT ESOCIAL.TSOC_CAD_BENEFICIO%ROWTYPE);
  
  --VERIFICA SE HOUVE ALGUMA ALTERAÇÃO NOS DADOS DO BENEFÍCIO
  FUNCTION FC_BENEFICIO_EXTINTO(P_BENEFICIO_DADOS_ORIGINAIS IN GB_C_ALT_BENEFICIO%ROWTYPE,
                                    P_BENEFICIO_DADOS_NOVOS      IN ESOCIAL.TSOC_CAD_BENEFICIO%ROWTYPE)
                                    RETURN BOOLEAN;                              

  --VERIFICA SE HOUVE ALGUMA ALTERAÇÃO NOS DADOS DO BENEFÍCIO
  FUNCTION FC_DADOS_BENEF_DIFERENTES(P_BENEFICIO_DADOS_ORIGINAIS IN GB_C_ALT_BENEFICIO%ROWTYPE,
                                    P_BENEFICIO_DADOS_NOVOS      IN ESOCIAL.TSOC_CAD_BENEFICIO%ROWTYPE)
    RETURN BOOLEAN;

  --CARREGA HISTÓRICO DE CADASTRO DE BENEFICIÁRIO 
    PROCEDURE SP_INC_TSOC_HCAD_BENEFICIO(P_CAD_BENEFICIO IN /*ESOCIAL.TSOC_CAD_BENEFICIO*/GB_C_ALT_BENEFICIO%ROWTYPE);

  --RETORNA A SEQUENCIA DE HISTÓRICO CADASTRAL DO BENEFICIÁRIO 
  FUNCTION FC_RET_SEQ_HCAD_BENEFICIO(P_COD_IDE_CLI_BEN IN ESOCIAL.TSOC_CAD_BENEFICIO.COD_IDE_CLI_BEN%TYPE,
    P_COD_BENEFICIO IN ESOCIAL.TSOC_CAD_BENEFICIO.COD_BENEFICIO%TYPE,
    P_COD_INS IN ESOCIAL.TSOC_CAD_BENEFICIO.COD_INS%TYPE)
    RETURN ESOCIAL.TSOC_HCAD_BENEFICIO.SEQ_HIST%TYPE;

  --ATUALIZA CADASTRO DE BENEFICIÁRIO 
  --P_TIPO: FLG_STATUS, OUTROS_DADOS
  
  PROCEDURE SP_ATU_TSOC_CAD_BENEFICIO(P_CAD_BENEFICIO IN ESOCIAL.TSOC_CAD_BENEFICIO%ROWTYPE, P_TIPO VARCHAR2);

  PROCEDURE SP_RESET_2416(P_2416 IN OUT ESOCIAL.TSOC_2416_BENEFICIO_ALT%ROWTYPE);

  FUNCTION FC_RET_SEQ_EVENTO_2416(P_SEQ_EVT IN ESOCIAL.TSOC_2416_BENEFICIO_ALT%ROWTYPE)
    RETURN ESOCIAL.TSOC_2416_BENEFICIO_ALT.SEQ_EVENTO%TYPE;
    
  PROCEDURE SP_VALIDA_2416(P_2416     IN OUT ESOCIAL.TSOC_2416_BENEFICIO_ALT%ROWTYPE,
                           P_CUR_2416 IN GB_C_2410%ROWTYPE);

  --FAZ INCLUSÃO NA TABELA DE EVENTO 2416
  PROCEDURE SP_INC_2416(P_2416 IN ESOCIAL.TSOC_2416_BENEFICIO_ALT%ROWTYPE);

  --PROCESSA EVENTO 2416 BENEFÍCIO INICIAL, GERADO A PARTIR DO CADASTRO DE BENEFÍCIO
  PROCEDURE SP_2416(P_ID_CAD_BENEFICIO IN ESOCIAL.TSOC_CAD_BENEFICIO.ID_CAD_BENEFICIO%TYPE);
  
  --PROCESSA EVENTO 2420 BENEFÍCIO INICIAL, GERADO A PARTIR DO CADASTRO DE BENEFÍCIO
  PROCEDURE SP_2420(P_ID_CAD_BENEFICIO IN ESOCIAL.TSOC_CAD_BENEFICIO.ID_CAD_BENEFICIO%TYPE);
  
  PROCEDURE SP_RESET_2420(P_2420 IN OUT ESOCIAL.TSOC_2420_BENEFICIO_TERMINO%ROWTYPE)  ;
  
  FUNCTION FC_RET_SEQ_EVENTO_2420(P_SEQ_EVT IN ESOCIAL.TSOC_2420_BENEFICIO_TERMINO%ROWTYPE)
    RETURN ESOCIAL.TSOC_2420_BENEFICIO_TERMINO.SEQ_EVENTO%TYPE;
    
  PROCEDURE SP_VALIDA_2420(P_2420     IN OUT ESOCIAL.TSOC_2420_BENEFICIO_TERMINO%ROWTYPE,
                           P_CUR_2420 IN GB_C_2410%ROWTYPE);      

  --FAZ INCLUSÃO NA TABELA DE EVENTO 2420
  PROCEDURE SP_INC_2420(P_2420 IN ESOCIAL.TSOC_2420_BENEFICIO_TERMINO%ROWTYPE);
  
  --CARREGA OS IDS DE ORIGEM, EVENTO E PERIODO_DET DE ACORDO COM O ID_CTR_PROCESSO
  PROCEDURE SP_CARREGA_IDS(P_ID_CTR_PROCESSO IN ESOCIAL.TSOC_CTR_PROCESSO.ID_CTR_PROCESSO%TYPE);

  --RETORNA O CÓDIGO DO MOTIVO DE CESSAÇÃO EQUIVALENTE NO ESOCIAL 
  FUNCTION FC_DEPARA_MOT_CESSACAO(P_MOT_CESSACAO IN ESOCIAL.TSOC_CAD_BENEFICIO.MOT_CESSACAO%TYPE)
    RETURN ESOCIAL.TSOC_2400_BENEFICIARIO_INI.BENEFICIARIO_RACACOR%TYPE;
    
  --SETA O STATUS DE PROCESSAMENTO E QUANTIDADE DE REGISTROS DA TSOC_CTR_PROCESSO
  PROCEDURE SP_SETA_PROCESSO(P_ID_CTR_PROCESSO IN ESOCIAL.TSOC_CTR_PROCESSO.ID_CTR_PROCESSO%TYPE,
                             P_NOM_EVENTO    IN VARCHAR2);   
                             
  --Obtém informações de ambiente. Tipo de ambiente, Processo de emissão e versão                            
  PROCEDURE SP_RET_INFO_AMBIENTE(P_TPAMB OUT ESOCIAL.TSOC_PAR_AMBIENTE.TPAMB%TYPE,
                                 P_PROCEMI OUT ESOCIAL.TSOC_PAR_AMBIENTE.PROCEMI%TYPE,
                                 P_VERPROC OUT ESOCIAL.TSOC_PAR_AMBIENTE.VERPROC%TYPE
                                 );

END PAC_ESOCIAL_EVENTOS_NP;
/
CREATE OR REPLACE PACKAGE BODY PAC_ESOCIAL_EVENTOS_NP IS

  --GERA CADASTRO E EVENTO DE BENEFICIARIO INICIAL 2400 
  PROCEDURE SP_CAD_BENEFICIARIO(P_ID_CTR_PROCESSO IN ESOCIAL.TSOC_CTR_PROCESSO.ID_CTR_PROCESSO%TYPE)
  
   IS
  
    V_CAD_BEN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE;
    --EXCEÇÃO LANÇADA QUANDO O MUNICÍPIO DE NASCIMENTO DO BENEFICIÁRIO NÃO É ENCONTRADO
    --ERRO NA PARAMETRIZAÇÃO DE PROCESSAMENTO 
    --CASO NÃO ENCONTRE PERIODO/PROCESSO EM ABERTO   
    EX_PARAM_PROC EXCEPTION; 
  
    --V_NUM_PROCESSO ESOCIAL.TSOC_CTR_ERRO_PROCESSO.NUM_PROCESSO%TYPE;
   
  
  BEGIN    
  
    --PADRONIZA PARAMETROS DE SESSÃO

    SP_DEFAULT_SESSION;
  
    --GERA O NÚMERO DO PROCESSO (CONTROLE)

    GB_REC_ERRO.NUM_PROCESSO := ESOCIAL.ESOC_SEQ_NUM_PROCESSO.NEXTVAL;
  
    GB_ID_CTR_PROCESSO := P_ID_CTR_PROCESSO; 

  
   BEGIN   
    SP_CARREGA_IDS(P_ID_CTR_PROCESSO);
    EXCEPTION 
    WHEN OTHERS THEN 
      RAISE EX_PARAM_PROC; 
    END; 

    SP_SETA_PROCESSO(P_ID_CTR_PROCESSO, 'INICIO_PROCESSAMENTO');

    --BENEFICIÁRIOS ATIVOS E SUSPENSOS 
    FOR C_CAD_BENEFICIARIO IN GB_C_CAD_BENEFICIARIO
    
     LOOP
      BEGIN
      
        --ZERA VARÍAVEIS

        SP_RESET_CAD_BENEFICIARIO(V_CAD_BEN);

         
        --OBTEM COD_INS

        V_CAD_BEN.COD_INS := GB_COD_INS;

        --OBTEM IDE_CLI    
 
        V_CAD_BEN.COD_IDE_CLI_BEN := C_CAD_BENEFICIARIO.COD_IDE_CLI_BEN;

        --OBTEM ID CHAVE DE CADASTRO

        V_CAD_BEN.ID_CAD_BENEFICIARIO := ESOCIAL.ESOC_SEQ_ID_CAD_BENEFICIARIO.NEXTVAL;

  
        --OBTEM A SEQUÊNCIA CADASTRAL DO BENEFICIÁRIO       
        BEGIN
          V_CAD_BEN.SEQ_CAD := FC_RET_SEQ_CAD_BENEFICIARIO(V_CAD_BEN);
        EXCEPTION
          WHEN OTHERS THEN
            GB_REC_ERRO.COD_INS           := GB_COD_INS;
            GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
            GB_REC_ERRO.NOM_PROCESSO      := 'FC_RET_SEQ_CAD_BENEFICIARIO';
            GB_REC_ERRO.TIPO_EVENTO       := '2400';
            GB_REC_ERRO.DESC_ERRO         := 'ERRO NA GERACAO DE SEQUENCIAL CADASTRAL DE BENEFICIÁRIO';
            GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
            GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
            GB_REC_ERRO.FLG_TIPO_ERRO     := 'X';
            SP_GERA_ERRO_PROCESSO;
        END;
      
        --ONTEM INFORMAÇÕES DO BENEFICIARIO (PESSOA FÍSICA)
        BEGIN
          SP_RET_INFO_PESSOA_FISICA(V_CAD_BEN);
        EXCEPTION
          WHEN OTHERS THEN
            GB_REC_ERRO.COD_INS           := GB_COD_INS;
            GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
            GB_REC_ERRO.NOM_PROCESSO      := 'SP_RET_INFO_PESSOA_FISICA';
            GB_REC_ERRO.TIPO_EVENTO       := '2400';
            GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER INFORMAÇÕES DO BENEFICIÁRIO (PESSOA FISICA)';
            GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
            GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
            GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
            SP_GERA_ERRO_PROCESSO;
        END;
      
        BEGIN
          --OBTEM O NÚMERO DO NIS/PIS  
          V_CAD_BEN.NUM_NIS := FC_RET_NIS_PIS_BEN(V_CAD_BEN);
        EXCEPTION
          WHEN OTHERS THEN
            GB_REC_ERRO.COD_INS           := GB_COD_INS;
            GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
            GB_REC_ERRO.NOM_PROCESSO      := 'FC_RET_NIS_PIS_BEN';
            GB_REC_ERRO.TIPO_EVENTO       := '2400';
            GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER NIS/PIS DO BENEFICIARIO';
            GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
            GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
            GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
            SP_GERA_ERRO_PROCESSO;
        END;
      
        BEGIN
          --OBTER A DATA DE INGRESSO DO BENEFICIÁRIO 
          V_CAD_BEN.DATA_ING_BENEFICIARIO := FC_RET_DAT_ING_BEN(V_CAD_BEN);
        EXCEPTION
          WHEN OTHERS THEN
            GB_REC_ERRO.COD_INS           := GB_COD_INS;
            GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
            GB_REC_ERRO.NOM_PROCESSO      := 'FC_RET_DAT_ING_BEN';
            GB_REC_ERRO.TIPO_EVENTO       := '2400';
            GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER A DATA DE INGRESSO DO BENEFICIARIO';
            GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
            GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
            GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
            SP_GERA_ERRO_PROCESSO;
        END;
      
        BEGIN
          --IDENTIFICA INCAPACIDADE 
          SP_RET_INCAPACIDADE_BEN(V_CAD_BEN);
        EXCEPTION
          WHEN OTHERS THEN
            GB_REC_ERRO.COD_INS           := GB_COD_INS;
            GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
            GB_REC_ERRO.NOM_PROCESSO      := 'SP_RET_INCAPACIDADE_BEN';
            GB_REC_ERRO.TIPO_EVENTO       := '2400';
            GB_REC_ERRO.DESC_ERRO         := 'ERRO AO RETORNAR IDENTIFICADOR DE INCAPACIDADE DO BENEFICIÁRIO';
            GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
            GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
            GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
            SP_GERA_ERRO_PROCESSO;
        END;
      
        --OBTÉM DADOS DE NASCIMENTO DO BENEFICIÁRIO 
        BEGIN
          SP_RET_INFO_NASC_BEN(V_CAD_BEN);
        EXCEPTION
          WHEN OTHERS THEN
            GB_REC_ERRO.COD_INS           := GB_COD_INS;
            GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
            GB_REC_ERRO.NOM_PROCESSO      := 'SP_RET_INFO_NASC_BEN';
            GB_REC_ERRO.TIPO_EVENTO       := '2400';
            GB_REC_ERRO.DESC_ERRO         := 'ERRO AO RETORNAR INFORMAÇÕES DE NASCIMENTO DO BENEFICIÁRIO';
            GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
            GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
            GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
            SP_GERA_ERRO_PROCESSO;
        END;
      
        --OBTÉM ENDEREÇO BENEFICIÁRIO    
        BEGIN
          SP_RET_ENDERECO(V_CAD_BEN);
        EXCEPTION
          WHEN OTHERS THEN
            GB_REC_ERRO.COD_INS           := GB_COD_INS;
            GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
            GB_REC_ERRO.NOM_PROCESSO      := 'SP_RET_ENDERECO';
            GB_REC_ERRO.TIPO_EVENTO       := '2400';
            GB_REC_ERRO.DESC_ERRO         := 'ERRO AO RETORNAR INFORMAÇÕES DE ENDEREÇO DO BENEFICIÁRIO';
            GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
            GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
            GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
            SP_GERA_ERRO_PROCESSO;
        END;
      
        --CARREGA CADASTRO DE BENEFICIÁRIO       
        BEGIN
          IF GB_REC_ERRO.FLG_TIPO_ERRO <> 'X' OR
             GB_REC_ERRO.FLG_TIPO_ERRO IS NULL THEN
            SP_INC_TSOC_CAD_BENEFICIARIO(V_CAD_BEN);
          END IF;
        EXCEPTION
          WHEN OTHERS THEN
            GB_REC_ERRO.COD_INS           := GB_COD_INS;
            GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
            GB_REC_ERRO.NOM_PROCESSO      := 'SP_INC_TSOC_CAD_BENEFICIARIO';
            GB_REC_ERRO.TIPO_EVENTO       := '2400';
            GB_REC_ERRO.DESC_ERRO         := 'ERRO NA INCLUSÃO DE CADASTRO DE BENEFICIÁRIO';
            GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
            GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
            GB_REC_ERRO.FLG_TIPO_ERRO     := 'X'; --REGISTRO NÃO CONSTA NA TABELA
            SP_GERA_ERRO_PROCESSO;
        END;
      
      EXCEPTION
        WHEN OTHERS THEN
          GB_REC_ERRO.COD_INS           := GB_COD_INS;
          GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
          GB_REC_ERRO.NOM_PROCESSO      := 'SP_CAD_BENEFICIARIO';
          GB_REC_ERRO.TIPO_EVENTO       := '2400';
          GB_REC_ERRO.DESC_ERRO         := 'ERRO AO GERAR O CADASTRO DO BENEFICIÁRIO';
          GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
          GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
          GB_REC_ERRO.FLG_TIPO_ERRO     := 'X';
          SP_GERA_ERRO_PROCESSO;
        
      END;
    
      --GERA O EVENTO 2400 PARA O REGISTRO DE CADASTRO
      --APENAS REGISTROS INCLUSOS NA TABELA DE CADASTRO COM SUCESSO
      IF GB_REC_ERRO.FLG_TIPO_ERRO <> 'X' OR
         GB_REC_ERRO.FLG_TIPO_ERRO IS NULL THEN
      
        --RECEBE A DATA DE INÍCIO E FIM DA GERAÇÃO DO EVENTO
        --PARA CONTROLE DE ID DE EVENTO.
      
        GB_DAT_EVT_ANT := GB_DAT_EVT_ATU;
        GB_DAT_EVT_ATU := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MMSS');
       BEGIN 
        SP_2400(V_CAD_BEN.ID_CAD_BENEFICIARIO);
       EXCEPTION 
         WHEN OTHERS THEN 
          GB_REC_ERRO.COD_INS           := GB_COD_INS;
          GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
          GB_REC_ERRO.NOM_PROCESSO      := 'SP_2400';
          GB_REC_ERRO.TIPO_EVENTO       := '2400';
          GB_REC_ERRO.DESC_ERRO         := 'ERRO AO GERAR EVENTO PARA O BENEFICIARIO, EXCLUÍDO DO CADASTRO';
          GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
          GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
          GB_REC_ERRO.FLG_TIPO_ERRO     := 'X';
          
          
          --EXCLUI DO CADASTRO O BENEFICIÁRIO QUE NÃO FOI POSSÍVEL GERAR O EVENTO
          DELETE FROM ESOCIAL.TSOC_CAD_BENEFICIARIO CB
           WHERE CB.COD_INS = GB_COD_INS 
             AND CB.ID_CAD_BENEFICIARIO = V_CAD_BEN.ID_CAD_BENEFICIARIO;
           COMMIT;            

          
          SP_GERA_ERRO_PROCESSO;
         END; 
        
        
        /*         GB_DAT_FIM_EVT := TO_CHAR(SYSDATE,'YYYYMMDDHH24MMSS'); */
      END IF;
     
      
      SP_SETA_PROCESSO(P_ID_CTR_PROCESSO, 'ATUALIZA_QUANTIDADE');      
    
    END LOOP;
    
    SP_SETA_PROCESSO(P_ID_CTR_PROCESSO, 'FIM_PROCESSAMENTO');     
  
  EXCEPTION
   
    WHEN EX_PARAM_PROC THEN 
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := NULL;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_CAD_BENEFICIARIO';
      GB_REC_ERRO.TIPO_EVENTO       := '2400';
      GB_REC_ERRO.DESC_ERRO         := 'ERRO NA PARAMETRIZAÇÃO DO PROCESSO';
      GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
      GB_REC_ERRO.DES_IDENTIFICADOR := NULL;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'X';
      SP_GERA_ERRO_PROCESSO;
      SP_SETA_PROCESSO(P_ID_CTR_PROCESSO, 'ERRO_PROCESSAMENTO'); 
    
    WHEN OTHERS THEN
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := NULL;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_CAD_BENEFICIARIO';
      GB_REC_ERRO.TIPO_EVENTO       := '2400';
      GB_REC_ERRO.DESC_ERRO         := 'ERRO NO PROCESSO DE CADASTRO DE BENEFICIÁRIO';
      GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
      GB_REC_ERRO.DES_IDENTIFICADOR := NULL;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'X';
      SP_GERA_ERRO_PROCESSO;
      SP_SETA_PROCESSO(P_ID_CTR_PROCESSO, 'ERRO_PROCESSAMENTO');        
            
  END SP_CAD_BENEFICIARIO;

  --GERA CADASTRO DE BENEFÍCIO E EVENTO 2410 DE BENEFÍCIO INICIAL
  PROCEDURE SP_CAD_BENEFICIO(P_ID_CTR_PROCESSO IN ESOCIAL.TSOC_CTR_PROCESSO.ID_CTR_PROCESSO%TYPE) IS
    V_CAD_BENEFICIO ESOCIAL.TSOC_CAD_BENEFICIO%ROWTYPE;
    EX_PARAM_PROC EXCEPTION; 
     
  
  BEGIN
  
    --PADRONIZA PARAMETROS DE SESSÃO
    SP_DEFAULT_SESSION;
  
    --GERA O NÚMERO DO PROCESSO (CONTROLE)
    GB_REC_ERRO.NUM_PROCESSO := ESOCIAL.ESOC_SEQ_NUM_PROCESSO.NEXTVAL;
    
    
   
    
    BEGIN   
     SP_CARREGA_IDS(P_ID_CTR_PROCESSO);
    EXCEPTION 
    WHEN OTHERS THEN 
      RAISE EX_PARAM_PROC; 
    END; 
    
    SP_SETA_PROCESSO(P_ID_CTR_PROCESSO, 'INICIO_PROCESSAMENTO');
    
    
    GB_ID_CTR_PROCESSO := P_ID_CTR_PROCESSO;
   

    FOR C_CAD_BENEFICIO IN GB_C_CAD_BENEFICIO
    
     LOOP
    
      --PARAMETRIZA CAMPOS DE FOLHA DE PAGAMENTO-----------------
      GB_FOLHA.COD_INS       := GB_COD_INS;
      --HARD CODE. Por enquanto sem definição de como parametrizar
      GB_FOLHA.SEQ_PAGAMENTO := 1;
      GB_FOLHA.TIP_PROCESSO  := 'N';
      GB_FOLHA.COD_IDE_CLI   := C_CAD_BENEFICIO.COD_IDE_CLI_BEN;
      GB_FOLHA.COD_BENEFICIO := C_CAD_BENEFICIO.COD_BENEFICIO; 
      --27/09/2018
      --Lucas Pereira
      --O Processo irá considerar o período em aberto de procassamento
      --Como período de folha de pagamento para considerar o valor do benefício
      --O Período é obtido na função SP_CARREGA_IDS
      --GB_FOLHA.PER_PROCESSO  := FC_RET_PRIMEIRA_FOLHA;
      -------------------------------------------------------------
    
      --ZERA VARÍAVEIS      
      SP_RESET_CAD_BENEFICIO(V_CAD_BENEFICIO);
      --OBTÉM ID DE CADASTRO DO BENEFÍCIO  
      V_CAD_BENEFICIO.ID_CAD_BENEFICIO := ESOCIAL.ESOC_SEQ_ID_CAD_BENEFICIO.NEXTVAL;
      --OBTÉM COD_INS 
      V_CAD_BENEFICIO.COD_INS := GB_COD_INS;
      --OBTÉM COD_IDE_CLI DO BENEFICIÁRIO
      V_CAD_BENEFICIO.COD_IDE_CLI_BEN := C_CAD_BENEFICIO.COD_IDE_CLI_BEN;
      --OBTÉM CÓDIGO DO BENEFÍCIO
      V_CAD_BENEFICIO.COD_BENEFICIO := C_CAD_BENEFICIO.COD_BENEFICIO;
      --OBTÉM ID DE CADASTRO DO BENEFICIÁRIO
      V_CAD_BENEFICIO.ID_CAD_BENEFICIARIO := C_CAD_BENEFICIO.ID_CAD_BENEFICIARIO;
     
      --LNUNES 12/09/2018 ADICINADO FLAG STATUS
      --OBTÉM FLAG STATUS DO BENEFÍCIO
      V_CAD_BENEFICIO.FLG_STATUS := C_CAD_BENEFICIO.FLG_STATUS; 

      --LNUNES 14/09/2018 ADICINADO MOT CESSAÇÃO
      --OBTÉM MOTIVO DE CESSAÇÃO
      V_CAD_BENEFICIO.MOT_CESSACAO := C_CAD_BENEFICIO.MOT_CESSACAO;
      --OBTÉM DATA DE FIM DO BENEFICIÁRIO
      V_CAD_BENEFICIO.DAT_FIM_BEN := C_CAD_BENEFICIO.DAT_FIM_BEN;
      
      --OBTÉM SEQUENCIA CADASTRAL DO BENEFÍCIO
      BEGIN
        V_CAD_BENEFICIO.SEQ_CAD := FC_RET_SEQ_CAD_BENEFICIO(V_CAD_BENEFICIO);
      EXCEPTION
        WHEN OTHERS THEN
          GB_REC_ERRO.COD_INS           := GB_COD_INS;
          GB_REC_ERRO.ID_CAD            := V_CAD_BENEFICIO.ID_CAD_BENEFICIARIO;
          GB_REC_ERRO.NOM_PROCESSO      := 'FC_RET_SEQ_CAD_BENEFICIO';
          GB_REC_ERRO.TIPO_EVENTO       := '2410';
          GB_REC_ERRO.DESC_ERRO         := 'ERRO NA GERACAO DE SEQUENCIAL CADASTRAL DE BENEFICIÁRIO';
          GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
          GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BENEFICIO.COD_IDE_CLI_BEN;
          GB_REC_ERRO.FLG_TIPO_ERRO     := 'X';
          SP_GERA_ERRO_PROCESSO;
      END;
    
      --OBTÉM O NÚMERO DE MATRÍCULA
      V_CAD_BENEFICIO.NUM_MATRICULA := C_CAD_BENEFICIO.NUM_MATRICULA;
      --OBTÉM CÓDIGO DA ENTIDADE
      V_CAD_BENEFICIO.COD_ENTIDADE := C_CAD_BENEFICIO.COD_ENTIDADE;
      --OBTÉM O NÚMERO DE CPF DO BENEFICIÁRIO
      V_CAD_BENEFICIO.NUM_CPF_BENEF := C_CAD_BENEFICIO.NUM_CPF;
      --OBTÉM O CNPJ DA ENTIDADE
      BEGIN
        V_CAD_BENEFICIO.NUM_CNPJ_ENTIDADE := FC_RET_CNPJ_ENT(C_CAD_BENEFICIO.COD_ENTIDADE);
      EXCEPTION
        WHEN OTHERS THEN
          GB_REC_ERRO.COD_INS           := GB_COD_INS;
          GB_REC_ERRO.ID_CAD            := V_CAD_BENEFICIO.ID_CAD_BENEFICIARIO;
          GB_REC_ERRO.NOM_PROCESSO      := 'FC_RET_CNPJ_ENT';
          GB_REC_ERRO.TIPO_EVENTO       := '2410';
          GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER CNPJ DA ENTIDADE';
          GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
          GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BENEFICIO.COD_IDE_CLI_BEN;
          GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
          SP_GERA_ERRO_PROCESSO;
      END;
    
      --SE {CADINI} = [S], DEVE SER ANTERIOR À DATA DE INÍCIO DA OBRIGATORIEDADE DOS EVENTOS NÃO PERIÓDICOS PARA ENTES PÚBLICOS NO ESOCIAL;SE {CADINI} = [N], DEVE SER IGUAL OU POSTERIOR À DATA DE INÍCIO DA OBRIGATORIEDADE DOS EVENTOS NÃO PERIÓDICOS PARA ENTES PÚBLICOS NO ESOCIAL E IGUAL OU ANTERIOR À DATA ATUAL.*/
      V_CAD_BENEFICIO.DAT_INIBEN := C_CAD_BENEFICIO.DAT_INI_BEN;
    
      --INDICAR SE A DATA DE INÍCIO DO BENEFÍCIO É ANTERIOR À OBRIGATORIEDADE DOS EVENTOS NÃO PERIÓDICOS PARA ENTES PÚBLICOS NO ESOCIAL:    
      BEGIN
        V_CAD_BENEFICIO.FLG_DAT_BEN_ANTERIOR := FC_RET_FLG_DAT_BEN_ANT(V_CAD_BENEFICIO);
      EXCEPTION
        WHEN OTHERS THEN
          GB_REC_ERRO.COD_INS           := GB_COD_INS;
          GB_REC_ERRO.ID_CAD            := V_CAD_BENEFICIO.ID_CAD_BENEFICIARIO;
          GB_REC_ERRO.NOM_PROCESSO      := 'FC_RET_FLG_DAT_BEN_ANT';
          GB_REC_ERRO.TIPO_EVENTO       := '2410';
          GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER INDICADOR DE DATA DE INÍCIO DE BENEFÍCIO';
          GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
          GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BENEFICIO.COD_IDE_CLI_BEN;
          GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
          SP_GERA_ERRO_PROCESSO;
      END;
    
      --TIPO DE BENEFÍCIO SIGEPREV
      V_CAD_BENEFICIO.COD_TIPO_BENEFICIO := C_CAD_BENEFICIO.COD_TIPO_BENEFICIO;
      --OBTÉM PERIODO DA PRIMEIRA FOLHA DE PAGAMENTO NORMAL 
    
      --CARGO DO BENEFÍCIO (CONCESSAO) 
      V_CAD_BENEFICIO.COD_CARGO := C_CAD_BENEFICIO.COD_CARGO;
    
      --VALOR INICIAL DO BENEFÍCIO (PRIMEIRA FOLHA)    
      BEGIN
        V_CAD_BENEFICIO.VAL_INI_BEN := FC_OBTEM_HBRUTO(C_CAD_BENEFICIO.COD_TIPO_BENEFICIO,
                                                       C_CAD_BENEFICIO.DAT_INI_BEN,
                                                       C_CAD_BENEFICIO.COD_ENTIDADE);
      
      EXCEPTION
        WHEN OTHERS THEN
          GB_REC_ERRO.COD_INS           := GB_COD_INS;
          GB_REC_ERRO.ID_CAD            := V_CAD_BENEFICIO.ID_CAD_BENEFICIARIO;
          GB_REC_ERRO.NOM_PROCESSO      := 'FC_RET_VALBRUTO';
          GB_REC_ERRO.TIPO_EVENTO       := '2410';
          GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER VALOR DO BENEFÍCIO';
          GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
          GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BENEFICIO.COD_IDE_CLI_BEN;
          GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
          SP_GERA_ERRO_PROCESSO;
      END;
    
      V_CAD_BENEFICIO.TIP_PLAN_SEG := 0;
      --NO DE-PARA, NÃO EXISTE OPÇÃO INCLUSÃO NO GRUPO 11 DE TIPOS DE BENEFÍCIOS,A COLUNA SÓ É OBRIGATÓRIA SE O TIVE DE BENEFÍCIO ESTIVER NO GRUPO 11.
      V_CAD_BENEFICIO.DESC_ORIG_PAG_BEN := NULL;
      --AGUARDANDO DEFINIÇÃO EM CASO DE INATIVIDADE OU APOSENTADORIA LEGADO
      BEGIN
        V_CAD_BENEFICIO.FLG_BEN_JUD := FC_FLG_BEN_JUD
        (C_CAD_BENEFICIO.COD_BENEFICIO, C_CAD_BENEFICIO.COD_TIPO_BENEFICIO,
         C_CAD_BENEFICIO.COD_ENTIDADE, C_CAD_BENEFICIO.COD_IDE_REL_FUNC,
         C_CAD_BENEFICIO.COD_IDE_CLI_BEN, C_CAD_BENEFICIO.COD_PROC_GRP_PAG);
        
      EXCEPTION
        WHEN OTHERS THEN
          GB_REC_ERRO.COD_INS           := GB_COD_INS;
          GB_REC_ERRO.ID_CAD            := V_CAD_BENEFICIO.ID_CAD_BENEFICIARIO;
          GB_REC_ERRO.NOM_PROCESSO      := 'FC_FLG_BEN_JUD';
          GB_REC_ERRO.TIPO_EVENTO       := '2410';
          GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER INDICADOR DE BENEFÍCIO JUDICIAL';
          GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
          GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BENEFICIO.COD_IDE_CLI_BEN;
          GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
          SP_GERA_ERRO_PROCESSO;
      END;
    
      --SE O BENEFÍCIO FOR DE PENSÃO, RETORNA INFORMAÇÕES DE PENSÃO---------------------------------------
      IF V_CAD_BENEFICIO.COD_TIPO_BENEFICIO = 'M' THEN
        --OBTÉM PERFIL/PARENTESCO 
        BEGIN
          V_CAD_BENEFICIO.COD_TIPO_PENSAO := FC_OBTEM_PERFIL_PARENTESCO(C_CAD_BENEFICIO.COD_BENEFICIO,
                                                                        C_CAD_BENEFICIO.COD_PERFIL,
                                                                        C_CAD_BENEFICIO.COD_IDE_CLI_BEN,
                                                                        C_CAD_BENEFICIO.COD_IDE_CLI_SERV
                                                                        );
          
        EXCEPTION
          WHEN OTHERS THEN
            GB_REC_ERRO.COD_INS           := GB_COD_INS;
            GB_REC_ERRO.ID_CAD            := V_CAD_BENEFICIO.ID_CAD_BENEFICIARIO;
            GB_REC_ERRO.NOM_PROCESSO      := 'FC_OBTEM_PERFIL_PARENTESCO';
            GB_REC_ERRO.TIPO_EVENTO       := '2410';
            GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER PERFIL/PARENTESCO DO BENEFICIÁRIO';
            GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
            GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BENEFICIO.COD_IDE_CLI_BEN;
            GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
            SP_GERA_ERRO_PROCESSO;
        END;
        --OBTÉM INFORMAÇÕES DO INSTITUIDOR DE PENSÃO 
        BEGIN
          SP_RET_INFO_INST(V_CAD_BENEFICIO,
                           C_CAD_BENEFICIO.COD_IDE_CLI_SERV);
        EXCEPTION
          WHEN OTHERS THEN
            GB_REC_ERRO.COD_INS           := GB_COD_INS;
            GB_REC_ERRO.ID_CAD            := V_CAD_BENEFICIO.ID_CAD_BENEFICIARIO;
            GB_REC_ERRO.NOM_PROCESSO      := 'SP_RET_INFO_INST';
            GB_REC_ERRO.TIPO_EVENTO       := '2410';
            GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER DADOS DO INSTITUIDOR DE PENSÃO';
            GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
            GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BENEFICIO.COD_IDE_CLI_BEN;
            GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
            SP_GERA_ERRO_PROCESSO;
        END;
      ELSE
        V_CAD_BENEFICIO.COD_TIPO_PENSAO     := NULL;
        V_CAD_BENEFICIO.NUM_CPF_INST        := NULL;
        V_CAD_BENEFICIO.DAT_OBITO_INST      := NULL;
        V_CAD_BENEFICIO.FLG_INST_APOSENTADO := NULL;
      END IF;
      ----------------------------------------------------------------------------------------------------
    
      --AGUARDANDO DEFINIÇÃO----------------------
      V_CAD_BENEFICIO.FLG_BEN_TC       := 'N';
      V_CAD_BENEFICIO.DAT_HOMOLOG_TC   := NULL;
      V_CAD_BENEFICIO.NUM_ATO_LEGAL_TC := NULL;
      ---------------------------------------------
    
      IF GB_REC_ERRO.FLG_TIPO_ERRO <> 'X' OR
         GB_REC_ERRO.FLG_TIPO_ERRO IS NULL THEN
        BEGIN
          SP_INC_TSOC_CAD_BENEFICIO(V_CAD_BENEFICIO);
        EXCEPTION
          WHEN OTHERS THEN
            GB_REC_ERRO.COD_INS           := GB_COD_INS;
            GB_REC_ERRO.ID_CAD            := V_CAD_BENEFICIO.ID_CAD_BENEFICIARIO;
            GB_REC_ERRO.NOM_PROCESSO      := 'SP_INC_TSOC_CAD_BENEFICIO';
            GB_REC_ERRO.TIPO_EVENTO       := '2410';
            GB_REC_ERRO.DESC_ERRO         := 'ERRO AO FAZER INCLUSÃO NA TABELA DE CADASTRO DE BENEFÍCIO';
            GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
            GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BENEFICIO.COD_IDE_CLI_BEN;
            GB_REC_ERRO.FLG_TIPO_ERRO     := 'X';
            SP_GERA_ERRO_PROCESSO;
        END;
      END IF;
      IF GB_REC_ERRO.FLG_TIPO_ERRO <> 'X' OR
         GB_REC_ERRO.FLG_TIPO_ERRO IS NULL THEN
      
        --RECEBE A DATA DE INÍCIO E FIM DA GERAÇÃO DO EVENTO
        --PARA CONTROLE DE ID DE EVENTO.
      
        GB_DAT_EVT_ANT := GB_DAT_EVT_ATU;
        GB_DAT_EVT_ATU := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MMSS');
        
        
        
         BEGIN 
        SP_2410(V_CAD_BENEFICIO.ID_CAD_BENEFICIO);
       EXCEPTION 
         WHEN OTHERS THEN 
          GB_REC_ERRO.COD_INS           := GB_COD_INS;
          GB_REC_ERRO.ID_CAD            := V_CAD_BENEFICIO.ID_CAD_BENEFICIO;
          GB_REC_ERRO.NOM_PROCESSO      := 'SP_2410';
          GB_REC_ERRO.TIPO_EVENTO       := '2410';
          GB_REC_ERRO.DESC_ERRO         := 'ERRO AO GERAR EVENTO PARA O BENEFÍCIO, EXCLUÍDO DO CADASTRO';
          GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
          GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BENEFICIO.COD_BENEFICIO;
          GB_REC_ERRO.FLG_TIPO_ERRO     := 'X';
          
          DELETE FROM ESOCIAL.TSOC_CAD_BENEFICIO TB
           WHERE TB.ID_CAD_BENEFICIO = V_CAD_BENEFICIO.ID_CAD_BENEFICIO; 
           COMMIT;                     
         END;
          
      END IF;
     
      
      SP_SETA_PROCESSO(P_ID_CTR_PROCESSO, 'ATUALIZA_QUANTIDADE');            
    
    END LOOP;
    
    SP_SETA_PROCESSO(P_ID_CTR_PROCESSO, 'FIM_PROCESSAMENTO');     
    
  EXCEPTION             
    
     WHEN EX_PARAM_PROC THEN 
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := NULL;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_CAD_BENEFICIO';
      GB_REC_ERRO.TIPO_EVENTO       := '2410';
      GB_REC_ERRO.DESC_ERRO         := 'ERRO NA PARAMETRIZAÇÃO DO PROCESSO';
      GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
      GB_REC_ERRO.DES_IDENTIFICADOR := NULL;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'X';
      SP_GERA_ERRO_PROCESSO;
      SP_SETA_PROCESSO(P_ID_CTR_PROCESSO, 'ERRO_PROCESSAMENTO'); 
    
    
    WHEN OTHERS THEN
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := NULL;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_CAD_BENEFICIO';
      GB_REC_ERRO.TIPO_EVENTO       := '2410';
      GB_REC_ERRO.DESC_ERRO         := 'ERRO NO PROCESSO DE CADASTRO DE BENEFICIÁRIO';
      GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
      GB_REC_ERRO.DES_IDENTIFICADOR := NULL;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'X';
      SP_GERA_ERRO_PROCESSO;
      SP_SETA_PROCESSO(P_ID_CTR_PROCESSO, 'ERRO_PROCESSAMENTO');  
    
  END SP_CAD_BENEFICIO;

  --RETORNA A SEQUENCIA CADASTRAL DO BENEFICIÁRIO 
  FUNCTION FC_RET_SEQ_CAD_BENEFICIARIO(P_SEQ_CAD IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIARIO.SEQ_CAD%TYPE IS
    V_SEQ_CAD_BEN ESOCIAL.TSOC_CAD_BENEFICIARIO.SEQ_CAD%TYPE;
  
  BEGIN
  
    SELECT NVL(MAX(C.SEQ_CAD), 0) + 1
      INTO V_SEQ_CAD_BEN
      FROM ESOCIAL.TSOC_CAD_BENEFICIARIO C
     WHERE C.COD_IDE_CLI_BEN = P_SEQ_CAD.COD_IDE_CLI_BEN
       AND C.COD_INS = P_SEQ_CAD.COD_INS;
  
    RETURN V_SEQ_CAD_BEN;
  
  END FC_RET_SEQ_CAD_BENEFICIARIO;

  --RETORNA A SEQUENCIA CADASTRAL DO BENEFÍCIO   
  FUNCTION FC_RET_SEQ_CAD_BENEFICIO(P_SEQ_CAD IN ESOCIAL.TSOC_CAD_BENEFICIO%ROWTYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIO.SEQ_CAD%TYPE IS
    V_SEQ_CAD_BENEFICIO ESOCIAL.TSOC_CAD_BENEFICIO.SEQ_CAD%TYPE;
  
  BEGIN
  
    SELECT NVL(MAX(C.SEQ_CAD), 0) + 1
      INTO V_SEQ_CAD_BENEFICIO
      FROM ESOCIAL.TSOC_CAD_BENEFICIO C
     WHERE C.COD_IDE_CLI_BEN = P_SEQ_CAD.COD_IDE_CLI_BEN
       AND C.COD_BENEFICIO = P_SEQ_CAD.COD_BENEFICIO
       AND C.COD_INS = P_SEQ_CAD.COD_INS;
  
    RETURN V_SEQ_CAD_BENEFICIO;
  
  END FC_RET_SEQ_CAD_BENEFICIO;

  --RETORNA O NÚMERO DA MATRÍCULA DO BENEFÍCIO 
  /*
  FUNCTION FC_RET_NUM_MATRICULA(P_CAD_BENEFICIO IN ESOCIAL.TSOC_CAD_BENEFICIO%ROWTYPE) 
    RETURN ESOCIAL.TSOC_CAD_BENEFICIO.NUM_MATRICULA%TYPE
  IS 
   V_NUM_MATRICULA ESOCIAL.TSOC_CAD_BENEFICIO.NUM_MATRICULA%TYPE; 
   
   BEGIN 
     
       SELECT NUM_MATRICULA 
         INTO V_NUM_MATRICULA
         FROM USER_IPESP.TB_CONCESSAO_BENEFICIO CB 
        WHERE CB.COD_INS = P_CAD_BENEFICIO.COD_INS 
          AND CB.COD_BENEFICIO = P_CAD_BENEFICIO.COD_BENEFICIO; 
          
          RETURN V_NUM_MATRICULA; 
                        
   END FC_RET_NUM_MATRICULA; 
     */

  --RETORNA O NÚMERO DE CNPJ DA ENTIDADE DO SERVIDOR
  FUNCTION FC_RET_CNPJ_ENT(P_COD_ENTIDADE IN USER_IPESP.TB_CONCESSAO_BENEFICIO.COD_ENTIDADE%TYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIO.NUM_CNPJ_ENTIDADE%TYPE IS
    V_NUM_CNPJ ESOCIAL.TSOC_CAD_BENEFICIO.NUM_CNPJ_ENTIDADE%TYPE;
  BEGIN
  
    SELECT E.NUM_CNPJ
      INTO V_NUM_CNPJ
      FROM USER_IPESP.TB_ENTIDADE E
     WHERE E.COD_INS = GB_COD_INS
       AND E.COD_ENTIDADE = P_COD_ENTIDADE;
  
    RETURN V_NUM_CNPJ;
  
  END FC_RET_CNPJ_ENT;

  --RETORNA FLAG DE DATA DE INICIO DE BENEFICIO ANTERIOR A OBRIGATORIEDADE DE EVENTOS
  --NÃO PERIÓDICOS DO ESOCIAL 
  FUNCTION FC_RET_FLG_DAT_BEN_ANT(P_CAD_BENEFICIO IN ESOCIAL.TSOC_CAD_BENEFICIO%ROWTYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIO.FLG_DAT_BEN_ANTERIOR%TYPE IS
  BEGIN
  
    IF P_CAD_BENEFICIO.DAT_INIBEN < GB_DAT_ESOCIAL THEN
    
      RETURN 'S';
    ELSE
      RETURN 'N';
    END IF;
  END FC_RET_FLG_DAT_BEN_ANT;

  --RETORNA O TIPO DE BENEFÍCIO SIGEPREV          
  /*FUNCTION FC_RET_TIP_BEN(P_CAD_BENEFICIO IN ESOCIAL.TSOC_CAD_BENEFICIO%ROWTYPE) 
     RETURN ESOCIAL.TSOC_CAD_BENEFICIO.COD_TIPO_BENEFICIO%TYPE
  IS 
  V_TIP_BEN ESOCIAL.TSOC_CAD_BENEFICIO.COD_TIPO_BENEFICIO%TYPE;    
     BEGIN 
      SELECT COD_TIPO_BENEFICIO 
        INTO V_TIP_BEN 
      FROM USER_IPESP.TB_CONCESSAO_BENEFICIO CB 
     WHERE CB.COD_INS = P_CAD_BENEFICIO.COD_INS
       AND CB.COD_BENEFICIO = P_CAD_BENEFICIO.COD_INS; 
   
      RETURN V_TIP_BEN; 
      
  END FC_RET_TIP_BEN;       */

  --VERIFICA SE O BENEFÍCIO POSSUI ORDEM JUDICIAL 
  --LNUNES 10/09/2018 ALTERADO PARA RECEBER OS PARÂMETROS INDIVIDUALMENTE
  FUNCTION FC_FLG_BEN_JUD(P_COD_BENEFICIO IN ESOCIAL.TSOC_CAD_BENEFICIO.COD_BENEFICIO%TYPE,
                          P_COD_TIPO_BENEFICIO IN ESOCIAL.TSOC_CAD_BENEFICIO.COD_TIPO_BENEFICIO%TYPE,
                          P_COD_ENTIDADE IN ESOCIAL.TSOC_CAD_BENEFICIO.COD_ENTIDADE%TYPE,                           
                          P_COD_IDE_REL_FUNC IN USER_IPESP.TB_CARGA_UCRH_FUNCIONAL.COD_IDE_REL_FUNC%TYPE,
                          P_COD_IDE_CLI_BEN IN ESOCIAL.TSOC_CAD_BENEFICIO.COD_IDE_CLI_BEN%TYPE,                                                      
                          P_COD_PROC_GRP_PAG IN USER_IPESP.TB_BENEFICIARIO.COD_PROC_GRP_PAG%TYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIO.FLG_BEN_JUD%TYPE IS
    V_FLG_JUD ESOCIAL.TSOC_CAD_BENEFICIO.FLG_BEN_JUD%TYPE;
    --V_PERIODO_UCRH DATE; 
    --V_COD_ARQUIVO NUMBER; 
  BEGIN
  
    --BENEFÍCIO SIGEPREV (LEGADO) 
    IF P_COD_BENEFICIO > 60000000 THEN
      SELECT 'S'
        INTO V_FLG_JUD
        FROM USER_IPESP.WRKCLI C
       WHERE C.CLI_COD_ADM_TRA = '00' || P_COD_BENEFICIO
         AND C.CLI_COD_INS = GB_COD_INS
         AND C.CLI_IND_TIP_TRA IN ('OOJ', 'OMJ', 'POJ', 'POJM');
    
      RETURN V_FLG_JUD;
    
      --APOSENTADORIA CIVIL LEGADO
      --CESSAR A TB_CARGA_UCRH_FUNCIONAL UTILIZANDO OS CAMPOS COD_IDE_CLI, COD_IDE_REL_FUNC E 
      --COD_ENTIDADE ONDE O CAMPO CODSITUA = 13 E MOTSITUA = 028, 045, 051 OU 086, ENVIAR FLAG S;
      --SENÃO ENVIAR FLAG N.   
    ELSIF P_COD_TIPO_BENEFICIO <> 'M' AND
          P_COD_ENTIDADE <> 5 THEN
    
    
 /*     SELECT 'S'
        INTO V_FLG_JUD
        FROM USER_IPESP.TB_CARGA_UCRH_FUNCIONAL CF
       WHERE CF.COD_INS = GB_COD_INS
         AND CF.COD_IDE_REL_FUNC = P_COD_IDE_REL_FUNC
         AND CF.COD_ENTIDADE = P_COD_ENTIDADE
         AND CF.COD_IDE_CLI = P_COD_IDE_CLI_BEN
         AND CF.CODSITUA = 13
         AND CF.MOTSITUA IN ('028', '045', '051', '086')
         AND ROWNUM = 1;
    
      RETURN V_FLG_JUD;*/
      
      
      RETURN 'N';
    
      --PENSÃO CIVIL/MILITAR LEGADO
    ELSIF P_COD_TIPO_BENEFICIO = 'M' AND
          P_COD_PROC_GRP_PAG = '9999' THEN
      RETURN 'S';
    ELSE
      RETURN 'N';
    END IF;
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN 'N';
    
  END FC_FLG_BEN_JUD;

  --RETORNA O CÓDIGO DE PERFIL DO BENEFICIÁRIO CASO SEJA BENEFÍCIO LEGADO
  --CASO SEJA CONCEDIDO, RETORNA O CÓDIGO DO PARENTESCO. 
  --ESTE RETORNO SERÁ UTILIZADO PARA IDENTIFICAR POSTERIORMENTE O TIPO DE BENEFÍCIO
  --NO ESOCIAL
  --LNUNES 10/09/2018 ALTERADO PARA BUSCAR OS PARÂMETROS INDIVIDUALMENTE
  FUNCTION FC_OBTEM_PERFIL_PARENTESCO(P_COD_BENEFICIO ESOCIAL.TSOC_CAD_BENEFICIO.COD_BENEFICIO%TYPE,
                                      P_COD_PERFIL USER_IPESP.TB_BENEFICIARIO.COD_PERFIL%TYPE,
                                      P_COD_IDE_CLI_BEN ESOCIAL.TSOC_CAD_BENEFICIO.COD_IDE_CLI_BEN%TYPE,
                                      P_COD_IDE_CLI_SERV USER_IPESP.TB_CONCESSAO_BENEFICIO.COD_IDE_CLI_SERV%TYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIO.COD_TIPO_PENSAO%TYPE IS
    V_COD_PERFIL_PAR ESOCIAL.TSOC_CAD_BENEFICIO.COD_TIPO_PENSAO%TYPE;
  BEGIN
  
    --VERIFICA SE É SIGEPREV OU LEGADO 
    --SE FOR SIGEPREV, RETORNA O CÓDIGO DO PERFIL 
    --SE FOR LEGADO, RETORNA O CÓDIGO DO PARENTESCO 
    IF P_COD_BENEFICIO >= 60000000 THEN
      RETURN P_COD_PERFIL;
    ELSE
      SELECT COD_PARENTESCO
        INTO V_COD_PERFIL_PAR
        FROM USER_IPESP.TB_DEPENDENTE DP
       WHERE DP.COD_INS = GB_COD_INS
         AND DP.COD_IDE_CLI_DEP = P_COD_IDE_CLI_BEN
         AND DP.COD_IDE_CLI_SERV = P_COD_IDE_CLI_SERV;
    
      RETURN V_COD_PERFIL_PAR;
    END IF;
  
  END FC_OBTEM_PERFIL_PARENTESCO;

  --ZERA VARIÁVEIS
  PROCEDURE SP_RESET_CAD_BENEFICIO(P_CAD_BENEFICIO IN OUT ESOCIAL.TSOC_CAD_BENEFICIO%ROWTYPE) IS
  BEGIN
  
    P_CAD_BENEFICIO.ID_CAD_BENEFICIO     := NULL;
    P_CAD_BENEFICIO.COD_INS              := NULL;
    P_CAD_BENEFICIO.COD_IDE_CLI_BEN      := NULL;
    P_CAD_BENEFICIO.COD_BENEFICIO        := NULL;
    P_CAD_BENEFICIO.ID_CAD_BENEFICIARIO  := NULL;
    P_CAD_BENEFICIO.SEQ_CAD              := NULL;
    P_CAD_BENEFICIO.NUM_MATRICULA        := NULL;
    P_CAD_BENEFICIO.NUM_CPF_BENEF        := NULL;
    P_CAD_BENEFICIO.NUM_CNPJ_ENTIDADE    := NULL;
    P_CAD_BENEFICIO.FLG_DAT_BEN_ANTERIOR := NULL;
    P_CAD_BENEFICIO.DAT_INIBEN           := NULL;
    P_CAD_BENEFICIO.COD_TIPO_BENEFICIO   := NULL;
    P_CAD_BENEFICIO.VAL_INI_BEN          := NULL;
    P_CAD_BENEFICIO.TIP_PLAN_SEG         := NULL;
    P_CAD_BENEFICIO.DESC_ORIG_PAG_BEN    := NULL;
    P_CAD_BENEFICIO.FLG_BEN_JUD          := NULL;
    P_CAD_BENEFICIO.FLG_BEN_TC           := NULL;
    P_CAD_BENEFICIO.COD_TIPO_PENSAO      := NULL;
    P_CAD_BENEFICIO.NUM_CPF_INST         := NULL;
    P_CAD_BENEFICIO.DAT_OBITO_INST       := NULL;
    P_CAD_BENEFICIO.FLG_INST_APOSENTADO  := NULL;
    P_CAD_BENEFICIO.DAT_HOMOLOG_TC       := NULL;
    P_CAD_BENEFICIO.NUM_ATO_LEGAL_TC     := NULL;
    P_CAD_BENEFICIO.DAT_ING              := NULL;
    P_CAD_BENEFICIO.DAT_ULT_ATU          := NULL;
    P_CAD_BENEFICIO.NOM_USU_ULT_ATU      := NULL;
    P_CAD_BENEFICIO.NOM_PRO_ULT_ATU      := NULL;
  
  END SP_RESET_CAD_BENEFICIO;

  --CARREGA AS INFORMAÇÕES DO INSTITUIDOR DE PENSÃO. 
  --ESSE PROCESSO SÓ É CHAMADO CASO O BENEFÍCIO SEJA DE PENSÃO
  PROCEDURE SP_RET_INFO_INST(P_CAD_BENEFICIO    IN OUT ESOCIAL.TSOC_CAD_BENEFICIO%ROWTYPE,
                             P_COD_IDE_CLI_SERV IN USER_IPESP.TB_CONCESSAO_BENEFICIO.COD_IDE_CLI_SERV%TYPE) IS
  BEGIN
  
    SELECT NUM_CPF, DAT_OBITO
      INTO P_CAD_BENEFICIO.NUM_CPF_INST, P_CAD_BENEFICIO.DAT_OBITO_INST
      FROM USER_IPESP.TB_PESSOA_FISICA PF
     WHERE PF.COD_IDE_CLI = P_COD_IDE_CLI_SERV
       AND PF.COD_INS = P_CAD_BENEFICIO.COD_INS;
  
    --VERIFICA SE O INSTITUIDOR DE PENSÃO ERA APOSENTADO
    BEGIN
      SELECT 'S'
        INTO P_CAD_BENEFICIO.FLG_INST_APOSENTADO
        FROM USER_IPESP.TB_BENEFICIARIO        BEN,
             USER_IPESP.TB_CONCESSAO_BENEFICIO CB
       WHERE BEN.COD_INS = P_CAD_BENEFICIO.COD_INS
         AND BEN.COD_BENEFICIO = BEN.COD_BENEFICIO
         AND BEN.COD_IDE_CLI_BEN = P_COD_IDE_CLI_SERV
         AND CB.COD_TIPO_BENEFICIO <> 'M'
         AND ROWNUM = 1;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        P_CAD_BENEFICIO.FLG_INST_APOSENTADO := 'N';
    END;
  
  END SP_RET_INFO_INST;

  --CARREGA CADASTRO DE BENEFICIÁRIO 
  PROCEDURE SP_INC_TSOC_CAD_BENEFICIO(P_CAD_BENEFICIO IN ESOCIAL.TSOC_CAD_BENEFICIO%ROWTYPE) IS
  
  BEGIN
  
    INSERT INTO ESOCIAL.TSOC_CAD_BENEFICIO
      (ID_CAD_BENEFICIO,
       COD_INS,
       COD_IDE_CLI_BEN,
       COD_BENEFICIO,
       ID_CAD_BENEFICIARIO,
       SEQ_CAD,
       NUM_MATRICULA,
       NUM_CPF_BENEF,
       NUM_CNPJ_ENTIDADE,
       FLG_DAT_BEN_ANTERIOR,
       DAT_INIBEN,
       COD_TIPO_BENEFICIO,
       VAL_INI_BEN,
       TIP_PLAN_SEG,
       DESC_ORIG_PAG_BEN,
       FLG_BEN_JUD,
       FLG_BEN_TC,
       COD_TIPO_PENSAO,
       NUM_CPF_INST,
       DAT_OBITO_INST,
       FLG_INST_APOSENTADO,
       DAT_HOMOLOG_TC,
       NUM_ATO_LEGAL_TC,
       DAT_ING,
       DAT_ULT_ATU,
       NOM_USU_ULT_ATU,
       NOM_PRO_ULT_ATU,
       COD_ENTIDADE,
       COD_CARGO,
       FLG_STATUS,
       MOT_CESSACAO,
       DAT_FIM_BEN
       )
    VALUES
      (P_CAD_BENEFICIO.ID_CAD_BENEFICIO,
       P_CAD_BENEFICIO.COD_INS,
       P_CAD_BENEFICIO.COD_IDE_CLI_BEN,
       P_CAD_BENEFICIO.COD_BENEFICIO,
       P_CAD_BENEFICIO.ID_CAD_BENEFICIARIO,
       P_CAD_BENEFICIO.SEQ_CAD,
       P_CAD_BENEFICIO.NUM_MATRICULA,
       P_CAD_BENEFICIO.NUM_CPF_BENEF,
       P_CAD_BENEFICIO.NUM_CNPJ_ENTIDADE,
       P_CAD_BENEFICIO.FLG_DAT_BEN_ANTERIOR,
       P_CAD_BENEFICIO.DAT_INIBEN,
       P_CAD_BENEFICIO.COD_TIPO_BENEFICIO,
       P_CAD_BENEFICIO.VAL_INI_BEN,
       P_CAD_BENEFICIO.TIP_PLAN_SEG,
       P_CAD_BENEFICIO.DESC_ORIG_PAG_BEN,
       P_CAD_BENEFICIO.FLG_BEN_JUD,
       P_CAD_BENEFICIO.FLG_BEN_TC,
       P_CAD_BENEFICIO.COD_TIPO_PENSAO,
       P_CAD_BENEFICIO.NUM_CPF_INST,
       P_CAD_BENEFICIO.DAT_OBITO_INST,
       P_CAD_BENEFICIO.FLG_INST_APOSENTADO,
       P_CAD_BENEFICIO.DAT_HOMOLOG_TC,
       P_CAD_BENEFICIO.NUM_ATO_LEGAL_TC,
       SYSDATE,
       SYSDATE,
       'ESOCIAL',
       'SP_INC_TSOC_CAD_BENEFICIO',
       P_CAD_BENEFICIO.COD_ENTIDADE,
       P_CAD_BENEFICIO.COD_CARGO,
       P_CAD_BENEFICIO.FLG_STATUS,
       P_CAD_BENEFICIO.MOT_CESSACAO,
       P_CAD_BENEFICIO.DAT_FIM_BEN
       );
  
    COMMIT;
  
  END SP_INC_TSOC_CAD_BENEFICIO;

  --RETORNA INFORMAÇÕES DA PESSOA FÍSICA     

  PROCEDURE SP_RET_INFO_PESSOA_FISICA(P_INFO_PF IN OUT ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE) IS
  BEGIN
  
    SELECT NUM_CPF,
           NOM_PESSOA_FISICA,
           COD_SEXO,
           --5: NÃO INFORMADO
           NVL(COD_RACA, '5'),
           COD_EST_CIV
      INTO P_INFO_PF.NUM_CPF,
           P_INFO_PF.NOM_BENEFICIARIO,
           P_INFO_PF.COD_SEXO,
           P_INFO_PF.COD_RACA,
           P_INFO_PF.COD_EST_CIV
      FROM USER_IPESP.TB_PESSOA_FISICA PF
     WHERE PF.COD_INS = P_INFO_PF.COD_INS
       AND PF.COD_IDE_CLI = P_INFO_PF.COD_IDE_CLI_BEN;
       
       
     P_INFO_PF.NOM_BENEFICIARIO := FC_FORMATA_STRING(P_INFO_PF.NOM_BENEFICIARIO);
  
  END SP_RET_INFO_PESSOA_FISICA;

  --RETORNA O NIS OU PIS DO SERVIDOR. CONSIDERA 11111111116 CASO SEJA PENSÃO
  FUNCTION FC_RET_NIS_PIS_BEN(P_NIS_PIS IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIARIO.NUM_NIS%TYPE IS
    V_NUM_NIS ESOCIAL.TSOC_CAD_BENEFICIARIO.NUM_NIS%TYPE;
    --USADO APENAS SE UTILIZAR O NUM NIS DO INSTITUIDOR DE PENSÃO
    --V_IDE_CLI_INST ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_IDE_CLI_BEN%TYPE; 
  
  BEGIN
    --BUSCA O NIS PELO IDE_CLI DO BENEFICIARIO CASO POSSUA
    BEGIN
      SELECT NVL(NVL(S.NUM_NIT_INSS, NUM_PIS), '11111111116')
        INTO V_NUM_NIS
        FROM USER_IPESP.TB_SERVIDOR S
       WHERE S.COD_INS = P_NIS_PIS.COD_INS
         AND S.COD_IDE_CLI = P_NIS_PIS.COD_IDE_CLI_BEN
            --TENHA BENEFÍCIO ATIVO DE APOSENTADORIA
         AND EXISTS (SELECT 1
                FROM USER_IPESP.TB_CONCESSAO_BENEFICIO CB,
                     USER_IPESP.TB_BENEFICIARIO        BEN
               WHERE CB.COD_INS = P_NIS_PIS.COD_INS
                 AND CB.COD_BENEFICIO = BEN.COD_BENEFICIO
                 AND CB.COD_IDE_CLI_SERV = S.COD_IDE_CLI
                 AND BEN.FLG_STATUS IN ('A', 'S')
                 AND CB.COD_TIPO_BENEFICIO <> 'M');
    
      RETURN V_NUM_NIS;
    
    EXCEPTION
      --SE O BENEFÍCIO 
      WHEN NO_DATA_FOUND THEN
        --CASO SEJA BENEFICIÁRIO DE PENSÃO, RETORNA 11111111116 COMO NÚMERO DO NIS       
        RETURN '11111111116';
      
      --SE NÃO ENCONTRAR, BUSCA O NIS DO INSTITUIDOR  
    
      --BUSCA O IDE_CLI DO INSTITUIDOR
      /*V_IDE_CLI_INST :=  FC_RET_IDE_CLI_INST(P_NIS_PIS.COD_INS,P_NIS_PIS.COD_IDE_CLI_BEN );
      
      BEGIN 
      
         SELECT NVL(S.NUM_PIS,S.NUM_NIT_INSS) 
           INTO V_NUM_NIS
           FROM USER_IPESP.TB_SERVIDOR S 
          WHERE S.COD_INS = P_NIS_PIS.COD_INS
            AND S.COD_IDE_CLI = V_IDE_CLI_INST;                                
        
      
         RETURN V_NUM_NIS;
      
            EXCEPTION 
               WHEN NO_DATA_FOUND THEN 
                  RETURN NULL; 
      
         END;*/
    
    END;
  
  END FC_RET_NIS_PIS_BEN;

  FUNCTION FC_RET_IDE_CLI_INST(P_COD_IDE_CLI_BEN IN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_IDE_CLI_BEN%TYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_IDE_CLI_BEN%TYPE IS
    V_IDE_CLI_INST ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_IDE_CLI_BEN%TYPE;
  
  BEGIN
    SELECT COD_IDE_CLI_SERV
      INTO V_IDE_CLI_INST
      FROM USER_IPESP.TB_CONCESSAO_BENEFICIO CB,
           USER_IPESP.TB_BENEFICIARIO        BEN
     WHERE BEN.COD_INS = GB_COD_INS
       AND BEN.COD_IDE_CLI_BEN = P_COD_IDE_CLI_BEN
       AND CB.COD_INS = BEN.COD_INS
       AND CB.COD_BENEFICIO = BEN.COD_BENEFICIO
       AND CB.COD_TIPO_BENEFICIO = 'M'
       AND ROWNUM = 1;
  
    RETURN V_IDE_CLI_INST;
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
    
  END FC_RET_IDE_CLI_INST;

  FUNCTION FC_RET_DAT_ING_BEN(P_ING_BEN IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIARIO.DATA_ING_BENEFICIARIO%TYPE IS
    V_DATA_ING_BENEFICIARIO ESOCIAL.TSOC_CAD_BENEFICIARIO.DATA_ING_BENEFICIARIO%TYPE;
  
  BEGIN
    SELECT MIN(DAT_ING)
      INTO V_DATA_ING_BENEFICIARIO
      FROM USER_IPESP.TB_BENEFICIARIO BEN
     WHERE BEN.COD_IDE_CLI_BEN = P_ING_BEN.COD_IDE_CLI_BEN
       AND BEN.COD_INS = P_ING_BEN.COD_INS;
  
    RETURN V_DATA_ING_BENEFICIARIO;
  
  END;

  PROCEDURE SP_RET_INCAPACIDADE_BEN(P_INCAPACIDADE IN OUT ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE)
  
   IS
  
  BEGIN
  
    SELECT 'S', AT.DAT_INI_VIG
      INTO P_INCAPACIDADE.FLG_INCAPAZ, P_INCAPACIDADE.DAT_INCAPACIDADE
      FROM USER_IPESP.TB_ATRIBUTOS_PF AT
     WHERE AT.COD_INS = P_INCAPACIDADE.COD_INS
       AND AT.COD_IDE_CLI = P_INCAPACIDADE.COD_IDE_CLI_BEN
       AND AT.COD_ATRIBUTO = 8000
       AND FLG_STATUS = 'V'
       AND AT.DAT_INI_VIG <= SYSDATE
       AND (AT.DAT_FIM_VIG IS NULL OR AT.DAT_FIM_VIG >= SYSDATE)
       AND ROWNUM = 1;
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      P_INCAPACIDADE.FLG_INCAPAZ      := 'N';
      P_INCAPACIDADE.DAT_INCAPACIDADE := NULL;
    
  END SP_RET_INCAPACIDADE_BEN;

  PROCEDURE SP_RET_INFO_NASC_BEN(P_NASCIMENTO IN OUT ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE) IS
  
    V_NOM_MUN_NASC USER_IPESP.TB_PESSOA_FISICA.DES_NATURAL%TYPE;
  
  BEGIN
    SELECT PF.DAT_NASC,
           PF.COD_UF_NASC,
           PF.COD_NACIO,
           --CASO SEJA NULA, CONSIDERA COMO BRASILEIRO
           NVL(PF.COD_NACIO, 1),
           PF.NOM_MAE,
           PF.NOM_PAI,
           PF.DES_NATURAL
    
      INTO P_NASCIMENTO.DAT_NASC,
           P_NASCIMENTO.COD_UF_NASC,
           P_NASCIMENTO.COD_PAIS_NASC,
           P_NASCIMENTO.COD_NACIO,
           P_NASCIMENTO.NOM_MAE,
           P_NASCIMENTO.NOM_PAI,
           V_NOM_MUN_NASC
      FROM USER_IPESP.TB_PESSOA_FISICA PF
     WHERE PF.COD_INS = P_NASCIMENTO.COD_INS
       AND PF.COD_IDE_CLI = P_NASCIMENTO.COD_IDE_CLI_BEN;
       
     P_NASCIMENTO.NOM_MAE :=  FC_FORMATA_STRING(P_NASCIMENTO.NOM_MAE);
     P_NASCIMENTO.NOM_PAI :=  FC_FORMATA_STRING(P_NASCIMENTO.NOM_PAI);
       
  
    --BUSCA O CÓDIGO DO MUNICIPIO SIGEPREV INFORMANDO O NOME DO MUNICÍPIO DE NASCIMENTO (SE TIVER PREENCHIDO) 
    IF V_NOM_MUN_NASC IS NOT NULL THEN
      P_NASCIMENTO.COD_MUNIC_NASC := FC_RET_COD_NOM_MUNICIPIO(P_NASCIMENTO.COD_UF_NASC,
                                                              V_NOM_MUN_NASC);
    END IF;
  
    --SE NÃO ENCONTRAR BUSCA O MUNICÍPIO DE ENDEREÇO
    IF P_NASCIMENTO.COD_MUNIC_NASC IS NULL THEN
      P_NASCIMENTO.COD_MUNIC_NASC := FC_RET_COD_MUNICIPIO_END(P_NASCIMENTO.COD_IDE_CLI_BEN);
    
      --SE ENCONTROU O MUNICÍPIO DE NASCIMENTO POR MEIO DO ENDEREÇO, 
      --CARREGA O MUNICÍPIO DE ENDEREÇO, PARA NÃO PRECISAR BUSCAR NOVAMENTE AO
      --BUSCAR O ENDEREÇO. 
      P_NASCIMENTO.COD_MUNICIPIO := P_NASCIMENTO.COD_MUNIC_NASC;
    
    END IF;
  
  END SP_RET_INFO_NASC_BEN;

  FUNCTION FC_FORMATA_STRING(PSTRING IN VARCHAR2) RETURN VARCHAR2 IS
    VSTRINGRETURN VARCHAR2(2000);
  
  BEGIN
    VSTRINGRETURN := REPLACE(TRIM(LOWER(TRANSLATE(PSTRING,
                                          'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü',
                                          'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu'))),CHR(39),'');
    RETURN VSTRINGRETURN;
  END FC_FORMATA_STRING;

  FUNCTION FC_RET_COD_NOM_MUNICIPIO(P_COD_UF_NASC   IN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_UF_NASC%TYPE,
                                    P_NOM_MUNICIPIO IN USER_IPESP.TB_MUNICIPIO.NOM_MUNICIPIO%TYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_MUNICIPIO%TYPE
  
   IS
    V_COD_MUNICIPIO ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_MUNICIPIO%TYPE;
    V_NOM_MUNICIPIO USER_IPESP.TB_MUNICIPIO.NOM_MUNICIPIO%TYPE := FC_FORMATA_STRING(P_NOM_MUNICIPIO);
  
  BEGIN
  
    SELECT P.COD_MUNICIPIO
      INTO V_COD_MUNICIPIO
      FROM USER_IPESP.TB_MUNICIPIO P
     WHERE TRIM(LOWER(TRANSLATE(P.NOM_MUNICIPIO,
                                'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü',
                                'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu')))
          
           = V_NOM_MUNICIPIO
       AND UPPER(P.COD_UF) = UPPER(P_COD_UF_NASC)
       AND P.COD_INS = GB_COD_INS
       AND P.FLG_VALIDACAO = 1;
  
    RETURN V_COD_MUNICIPIO;
  
  EXCEPTION
    WHEN TOO_MANY_ROWS THEN
    
      BEGIN
      
        SELECT P.COD_MUNICIPIO
          INTO V_COD_MUNICIPIO
          FROM USER_IPESP.TB_MUNICIPIO P
         WHERE TRIM(LOWER(TRANSLATE(P.NOM_MUNICIPIO,
                                    'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü',
                                    'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu'))) =
              /*  '%' ||*/
               V_NOM_MUNICIPIO /* || '%'*/
           AND UPPER(P.COD_UF) = UPPER(P_COD_UF_NASC)
           AND P.COD_INS = GB_COD_INS
           AND P.FLG_VALIDACAO = 1
           AND ROWNUM = 1;
      
        RETURN V_COD_MUNICIPIO;
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RETURN NULL;
      END;
    
    WHEN OTHERS THEN
      RETURN NULL;
    
  END;

  --RETORNA O MUNICÍPIO DO ENDEREÇO DO BENEFICIÁRIO
  FUNCTION FC_RET_COD_MUNICIPIO_END(P_COD_IDE_CLI_BEN IN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_IDE_CLI_BEN%TYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_MUNICIPIO%TYPE IS
    V_COD_MUNICIPIO           ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_MUNICIPIO%TYPE;
    V_COD_UF                  USER_IPESP.TB_END_PESSOA_FISICA.COD_UF%TYPE;
    V_NOM_MUNICIPIO_CARREGADO USER_IPESP.TB_END_PESSOA_FISICA.NOM_MUNICIPIO_CARREGADO%TYPE;
    V_NUM_CEP                 USER_IPESP.TB_END_PESSOA_FISICA.NUM_CEP%TYPE;
    EX_MUN_CARREGADO EXCEPTION;
  
  BEGIN
  
    SELECT EPF.COD_MUNICIPIO,
           EPF.COD_UF,
           EPF.NOM_MUNICIPIO_CARREGADO,
           EPF.NUM_CEP
      INTO V_COD_MUNICIPIO, V_COD_UF, V_NOM_MUNICIPIO_CARREGADO, V_NUM_CEP
      FROM USER_IPESP.TB_END_PESSOA_FISICA EPF
     WHERE EPF.COD_INS = GB_COD_INS
       AND EPF.COD_IDE_CLI = P_COD_IDE_CLI_BEN;
  
    IF V_COD_MUNICIPIO = '99999999' THEN
      RAISE EX_MUN_CARREGADO;
    ELSE
      RETURN V_COD_MUNICIPIO;
    END IF;
  
  EXCEPTION
    --BENEFICIÁRIO NÃO POSSUI ENEDEREÇO
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
    WHEN TOO_MANY_ROWS THEN
      RETURN NULL;
    WHEN EX_MUN_CARREGADO THEN
      --SE O MUNICIPIO FOR 99999999 (CARREGADO) PROCURA O CODIGO DO MUNICIPIO 
      --PELO NOME 
      V_COD_MUNICIPIO := FC_RET_COD_NOM_MUNICIPIO(V_COD_UF,
                                                  V_NOM_MUNICIPIO_CARREGADO);
    
      --SE ENCONTROU, RETORNA O CÓDIGO DO MUNICÍPIO.
      IF V_COD_MUNICIPIO IS NOT NULL THEN
        RETURN V_COD_MUNICIPIO;
      END IF;
    
      --SE NÃO ENCONTROU PELO NOME CARREGADO, BUSCA PELO CEP (SE TIVER CEP)
      IF V_NUM_CEP IS NOT NULL THEN
        --SE NÃO ENCONTROU CARREGADO, E POSSUI CEP, BUSCA PELO CEP NOS CORREIOS     
        V_COD_MUNICIPIO := FC_RET_COD_MUNICIPIO_CEP(V_NUM_CEP);
      
        IF V_COD_MUNICIPIO IS NOT NULL THEN
          RETURN V_COD_MUNICIPIO;
        ELSE
          --SE NÃO ENCONTROU DE NENHUMA FORMA, AGUARDAR DEFINICAO. 
          RETURN NULL;
        END IF;
      ELSE
        --NÃO TEM NEM CEP, NÃO ENCONTROU DE FORMA NENHUMA  (AGUARDAR DEFINICAO) 
        RETURN NULL;
      END IF;
    
  END FC_RET_COD_MUNICIPIO_END;

  --RETORNA O CÓDIGO DO MUNICÍPIO PELO CEP NOS CORREIOS
  FUNCTION FC_RET_COD_MUNICIPIO_CEP(P_NUM_CEP IN USER_IPESP.TB_END_PESSOA_FISICA.NUM_CEP%TYPE)
    RETURN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_MUNIC_NASC%TYPE IS
    V_COD_MUNICIPIO ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_MUNIC_NASC%TYPE;
    V_NUM_CEP       USER_IPESP.TB_END_PESSOA_FISICA.NUM_CEP%TYPE := LPAD(P_NUM_CEP,
                                                                         8,
                                                                         0);
  
  BEGIN
    SELECT CL.LOC_NU
      INTO V_COD_MUNICIPIO
      FROM USER_IPESP.TB_CORREIOS_LOGRADOURO CL
     WHERE CL.FLG_VALIDACAO = 1
       AND CL.CEP = V_NUM_CEP
       AND ROWNUM = 1;
  
    RETURN V_COD_MUNICIPIO;
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
    
  END FC_RET_COD_MUNICIPIO_CEP;

  --RETORNA O ENDEREÇO COMPLETO DO BENEFICIÁRIO 
  PROCEDURE SP_RET_ENDERECO(P_ENDERECO IN OUT ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE)
  
   IS
    V_COD_MUNICIPIO           ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_MUNICIPIO%TYPE;
    V_NOM_BAIRRO_CARREGADO    ESOCIAL.TSOC_CAD_BENEFICIARIO.NOM_BAIRRO%TYPE;
    V_COD_BAIRRO              USER_IPESP.TB_BAIRRO.COD_BAIRRO%TYPE;
    V_NOM_MUNICIPIO_CARREGADO USER_IPESP.TB_END_PESSOA_FISICA.NOM_MUNICIPIO_CARREGADO%TYPE;
    EX_END_INCOMPLETO EXCEPTION;
  
  BEGIN
    SELECT
    
     UPPER(TRIM(SUBSTR(EPF.NOM_LOGRADOURO,
                       0,
                       INSTR(EPF.NOM_LOGRADOURO, ' ', 1, 1)))) TIP_LOGRADOURO,
     EPF.NOM_LOGRADOURO,
     EPF.NUM_NUMERO,
     EPF.DES_COMPLEMENTO,
     EPF.NUM_CEP,
     EPF.COD_BAIRRO,
     EPF.COD_MUNICIPIO,
     EPF.NOM_BAIRRO_CARREGADO,
     EPF.NOM_MUNICIPIO_CARREGADO,
     EPF.COD_UF,
     EPF.COD_PAIS
    --EPF.COD_POSTAL
    
      INTO P_ENDERECO.TIP_LOGRADOURO,
           P_ENDERECO.DESC_LOGRADOURO,
           P_ENDERECO.NUM_NUMERO,
           P_ENDERECO.DES_COMPLEMENTO,
           P_ENDERECO.NUM_CEP,
           ----------------                 
           V_COD_BAIRRO,
           V_COD_MUNICIPIO,
           V_NOM_BAIRRO_CARREGADO,
           V_NOM_MUNICIPIO_CARREGADO,
           ----------------
           P_ENDERECO.COD_UF,
           P_ENDERECO.COD_PAIS
    --P_ENDERECO.COD_POSTAL_EXTERIOR
      FROM USER_IPESP.TB_END_PESSOA_FISICA EPF
     WHERE EPF.COD_INS = P_ENDERECO.COD_INS
       AND EPF.COD_IDE_CLI = P_ENDERECO.COD_IDE_CLI_BEN;
       
    P_ENDERECO.DES_COMPLEMENTO := FC_FORMATA_STRING(P_ENDERECO.DES_COMPLEMENTO);
    P_ENDERECO.NUM_NUMERO := FC_FORMATA_STRING(P_ENDERECO.NUM_NUMERO);
  
    --SE O ENDEREÇO ESTIVER SEM QUALQUER INFORMAÇÃO OBRIGATÓRIA PARA O ESOCIAL
    --TANTO PARA BRASIL, OU EXTERIOR
    --CONSIDERAR QUE O BENEFICIÁRIO NÃO POSSUI ENDEREÇO 
    IF P_ENDERECO.COD_PAIS IS NULL THEN
      RAISE EX_END_INCOMPLETO;
    
    ELSIF P_ENDERECO.COD_PAIS = 1 --BRASIL
          AND (P_ENDERECO.COD_UF IS NULL OR P_ENDERECO.NUM_NUMERO IS NULL OR
          P_ENDERECO.DESC_LOGRADOURO IS NULL OR
          P_ENDERECO.NUM_CEP IS NULL OR P_ENDERECO.COD_PAIS <> 1) THEN
      RAISE EX_END_INCOMPLETO;
    
      --NÃO TRATAR ENDEREÇOS NO EXTERIOR, 
      --OS ENDEREÇOS NO EXTERIOR DO SIGEPREV NÃO POSSUEM NOME DA CIDADE      
      --QUE É OBRIGATÓRIO PARA O ESOCIAL
    
    ELSIF P_ENDERECO.COD_PAIS <> 1 THEN
      --EXTERIOR 
      --SE O ENDEREÇO FOR EXTERIOR ENVIAR OS DADOS DISPONÍVEIS 
      --E CIDADE MANDAR NÃO INFORMADO  E BAIRRO NULO
      P_ENDERECO.NOM_CIDADE_EXTERIOR := 'NÃO INFORMADO';
      P_ENDERECO.NOM_BAIRRO          := NULL;
    
      IF P_ENDERECO.DESC_LOGRADOURO IS NULL OR
         P_ENDERECO.NUM_NUMERO IS NULL OR
         P_ENDERECO.NOM_CIDADE_EXTERIOR IS NULL THEN
        RAISE EX_END_INCOMPLETO;
      END IF;
    END IF;
  
    --BUSCA O BAIRRO    
    IF V_COD_BAIRRO = '99999999' THEN
      P_ENDERECO.NOM_BAIRRO := FC_FORMATA_STRING(INITCAP(V_NOM_BAIRRO_CARREGADO));
    ELSE
    
      --SE NÃO FOR CARREGADO, BUSCA PELO CÓDIGO. SE NÃO ENCONTRAR, 
      --RETORNA NULO PARA BAIRRO. (BAIRRO NÃO É OBRIGATÓRIO)  
      BEGIN
        SELECT NOM_BAIRRO
          INTO P_ENDERECO.NOM_BAIRRO
          FROM USER_IPESP.TB_BAIRRO B
         WHERE B.COD_INS = P_ENDERECO.COD_INS
           AND B.COD_BAIRRO = V_COD_BAIRRO
           AND B.COD_MUNICIPIO = V_COD_MUNICIPIO
           AND B.COD_UF = P_ENDERECO.COD_UF
           AND B.FLG_VALIDACAO = 1
           AND ROWNUM = 1;
           
          P_ENDERECO.NOM_BAIRRO := FC_FORMATA_STRING(P_ENDERECO.NOM_BAIRRO);
           
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          P_ENDERECO.NOM_BAIRRO := NULL;
      END;
    
    END IF;
  
    --BUSCA O MUNICÍPIO SE AINDA NÃO TIVER ENCONTRADO PELO MUNICÍPIO DE NASCIMENTO
    IF P_ENDERECO.COD_MUNICIPIO IS NULL THEN
    
      --SE O MUNICIPIO FOR CARREGADO, BUSCA O NOME DO MUNICIPIO PELO NOME DO MUNICIPIO CARREGADO
      IF V_COD_MUNICIPIO = '99999999' THEN
        P_ENDERECO.COD_MUNICIPIO := FC_RET_COD_NOM_MUNICIPIO(P_ENDERECO.COD_UF,
                                                             V_NOM_MUNICIPIO_CARREGADO);
        --SE NÃO ENCONTRAR PELO CARREGADO, BUSCA PELO CEP 
        IF P_ENDERECO.COD_MUNICIPIO IS NULL THEN
          P_ENDERECO.COD_MUNICIPIO := FC_RET_COD_MUNICIPIO_CEP(P_ENDERECO.NUM_CEP);
          --SE NÃO ENCONTRAR O MUNICÍPIO, RESETA ENDEREÇO
          IF P_ENDERECO.COD_MUNICIPIO IS NULL THEN
            RAISE EX_END_INCOMPLETO;
          END IF;
        END IF;
      
      ELSE
        --SE NÃO FOR CARREGADO, USA O CÓDIGO DO MUNICÍPIO ENCONTRADO                
        P_ENDERECO.COD_MUNICIPIO := V_COD_MUNICIPIO;
      END IF;
    END IF;
  
  EXCEPTION
    --BENEFICIÁRIO NÃO POSSUI ENDEREÇO 
    WHEN NO_DATA_FOUND THEN
      P_ENDERECO.TIP_LOGRADOURO  := NULL;
      P_ENDERECO.DESC_LOGRADOURO := NULL;
      P_ENDERECO.NUM_NUMERO      := NULL;
      P_ENDERECO.DES_COMPLEMENTO := NULL;
      P_ENDERECO.NUM_CEP         := NULL;
      P_ENDERECO.COD_MUNICIPIO   := NULL;
      P_ENDERECO.NOM_BAIRRO      := NULL;
      P_ENDERECO.COD_UF          := NULL;
      P_ENDERECO.COD_PAIS        := NULL;
    
    WHEN EX_END_INCOMPLETO THEN
      P_ENDERECO.TIP_LOGRADOURO  := NULL;
      P_ENDERECO.DESC_LOGRADOURO := NULL;
      P_ENDERECO.NUM_NUMERO      := NULL;
      P_ENDERECO.DES_COMPLEMENTO := NULL;
      P_ENDERECO.NUM_CEP         := NULL;
      P_ENDERECO.COD_MUNICIPIO   := NULL;
      P_ENDERECO.NOM_BAIRRO      := NULL;
      P_ENDERECO.COD_UF          := NULL;
      P_ENDERECO.COD_PAIS        := NULL;
    
  END SP_RET_ENDERECO;

  --CARREGA CADASTRO DE BENEFICIÁRIO 
  PROCEDURE SP_INC_TSOC_CAD_BENEFICIARIO(P_CAD_BEN IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE) IS
  
  BEGIN
  
    INSERT INTO ESOCIAL.TSOC_CAD_BENEFICIARIO
      (ID_CAD_BENEFICIARIO,
       COD_INS,
       COD_IDE_CLI_BEN,
       SEQ_CAD,
       NUM_CPF,
       NUM_NIS,
       NOM_BENEFICIARIO,
       DATA_ING_BENEFICIARIO,
       COD_SEXO,
       COD_RACA,
       COD_EST_CIV,
       FLG_INCAPAZ,
       DAT_INCAPACIDADE,
       DAT_NASC,
       COD_MUNIC_NASC,
       COD_UF_NASC,
       COD_PAIS_NASC,
       COD_NACIO,
       NOM_MAE,
       NOM_PAI,
       TIP_LOGRADOURO,
       DESC_LOGRADOURO,
       NUM_NUMERO,
       DES_COMPLEMENTO,
       NOM_BAIRRO,
       NUM_CEP,
       COD_MUNICIPIO,
       COD_UF,
       COD_PAIS,
       NOM_CIDADE_EXTERIOR,
       COD_POSTAL_EXTERIOR,
       DAT_ING,
       DAT_ULT_ATU,
       NOM_USU_ULT_ATU,
       NOM_PRO_ULT_ATU)
    VALUES
      (P_CAD_BEN.ID_CAD_BENEFICIARIO,
       P_CAD_BEN.COD_INS,
       P_CAD_BEN.COD_IDE_CLI_BEN,
       P_CAD_BEN.SEQ_CAD,
       P_CAD_BEN.NUM_CPF,
       P_CAD_BEN.NUM_NIS,
       P_CAD_BEN.NOM_BENEFICIARIO,
       P_CAD_BEN.DATA_ING_BENEFICIARIO,
       P_CAD_BEN.COD_SEXO,
       P_CAD_BEN.COD_RACA,
       P_CAD_BEN.COD_EST_CIV,
       P_CAD_BEN.FLG_INCAPAZ,
       P_CAD_BEN.DAT_INCAPACIDADE,
       P_CAD_BEN.DAT_NASC,
       P_CAD_BEN.COD_MUNIC_NASC,
       P_CAD_BEN.COD_UF_NASC,
       P_CAD_BEN.COD_PAIS_NASC,
       P_CAD_BEN.COD_NACIO,
       P_CAD_BEN.NOM_MAE,
       P_CAD_BEN.NOM_PAI,
       P_CAD_BEN.TIP_LOGRADOURO,
       P_CAD_BEN.DESC_LOGRADOURO,
       P_CAD_BEN.NUM_NUMERO,
       P_CAD_BEN.DES_COMPLEMENTO,
       P_CAD_BEN.NOM_BAIRRO,
       P_CAD_BEN.NUM_CEP,
       P_CAD_BEN.COD_MUNICIPIO,
       P_CAD_BEN.COD_UF,
       P_CAD_BEN.COD_PAIS,
       P_CAD_BEN.NOM_CIDADE_EXTERIOR,
       P_CAD_BEN.COD_POSTAL_EXTERIOR,
       SYSDATE,
       SYSDATE,
       'ESOCIAL',
       'SP_INC_TSOC_CAD_BENEFICIARIO');
  
    COMMIT;
  
  END SP_INC_TSOC_CAD_BENEFICIARIO;

  --RETORNA IDENTIFICADOR CHAVE DA TABELA DE ERROS TSOC_CTR_ERRO_PROCESSSO
  FUNCTION FC_RET_ID_ERRO_PROCESSO
    RETURN ESOCIAL.TSOC_CTR_ERRO_PROCESSO.ID_ERRO%TYPE IS  BEGIN
    RETURN ESOCIAL.ESOC_SEQ_ID_ERRO_PROCESSO.NEXTVAL;

  END;

  --GERA ERRO DE PROCESSO NA TABELA TSOC_CTR_ERRO_PROCESSO 
  PROCEDURE SP_GERA_ERRO_PROCESSO IS
    V_ID_CAD_ERRO ESOCIAL.TSOC_CTR_ERRO_PROCESSO.ID_ERRO%TYPE;
  BEGIN
  
    V_ID_CAD_ERRO := FC_RET_ID_ERRO_PROCESSO;
  
    INSERT INTO ESOCIAL.TSOC_CTR_ERRO_PROCESSO
      (ID_ERRO,
       COD_INS,
       ID_CAD,
       NOM_PROCESSO,
       TIPO_EVENTO,
       DESC_ERRO,
       DAT_ING,
       DAT_ULT_ATU,
       NOM_USU_ULT_ATU,
       NOM_PRO_ULT_ATU,
       DESC_ERRO_BD,
       NUM_PROCESSO,
       DES_IDENTIFICADOR,
       FLG_TIPO_ERRO,
       ID_CTR_PROCESSO)
    VALUES
      (V_ID_CAD_ERRO,
       GB_REC_ERRO.COD_INS,
       GB_REC_ERRO.ID_CAD,
       GB_REC_ERRO.NOM_PROCESSO,
       GB_REC_ERRO.TIPO_EVENTO,
       GB_REC_ERRO.DESC_ERRO,
       SYSDATE,
       SYSDATE,
       'ESOCIAL',
       'SP_GERA_ERRO_PROCESSO',
       GB_REC_ERRO.DESC_ERRO_BD,
       GB_REC_ERRO.NUM_PROCESSO,
       GB_REC_ERRO.DES_IDENTIFICADOR,
       GB_REC_ERRO.FLG_TIPO_ERRO,
       GB_ID_CTR_PROCESSO
       );
  
    COMMIT;
  
  END SP_GERA_ERRO_PROCESSO;

  PROCEDURE SP_DEFAULT_SESSION IS
  BEGIN
  
    EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_LANGUAGE =  ''BRAZILIAN PORTUGUESE''';
    EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_TERRITORY = ''BRAZIL''';
    EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_LANGUAGE = ''BRAZILIAN PORTUGUESE''';
    EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT = ''DD/MM/YYYY''';
    EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_NUMERIC_CHARACTERS= ''.,''';
    EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_CURRENCY = ''R$''';
    EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_CALENDAR = ''GREGORIAN''';
    EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_ISO_CURRENCY  = ''BRAZIL''';
  
  END SP_DEFAULT_SESSION;

  PROCEDURE SP_RESET_CAD_BENEFICIARIO(P_CAD_BEN OUT ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE) IS
  BEGIN
  
    P_CAD_BEN.ID_CAD_BENEFICIARIO   := NULL;
    P_CAD_BEN.COD_INS               := NULL;
    P_CAD_BEN.COD_IDE_CLI_BEN       := NULL;
    P_CAD_BEN.SEQ_CAD               := NULL;
    P_CAD_BEN.NUM_CPF               := NULL;
    P_CAD_BEN.NUM_NIS               := NULL;
    P_CAD_BEN.NOM_BENEFICIARIO      := NULL;
    P_CAD_BEN.DATA_ING_BENEFICIARIO := NULL;
    P_CAD_BEN.COD_SEXO              := NULL;
    P_CAD_BEN.COD_RACA              := NULL;
    P_CAD_BEN.COD_EST_CIV           := NULL;
    P_CAD_BEN.FLG_INCAPAZ           := NULL;
    P_CAD_BEN.DAT_INCAPACIDADE      := NULL;
    P_CAD_BEN.DAT_NASC              := NULL;
    P_CAD_BEN.COD_MUNIC_NASC        := NULL;
    P_CAD_BEN.COD_UF_NASC           := NULL;
    P_CAD_BEN.COD_PAIS_NASC         := NULL;
    P_CAD_BEN.COD_NACIO             := NULL;
    P_CAD_BEN.NOM_MAE               := NULL;
    P_CAD_BEN.NOM_PAI               := NULL;
    P_CAD_BEN.TIP_LOGRADOURO        := NULL;
    P_CAD_BEN.DESC_LOGRADOURO       := NULL;
    P_CAD_BEN.NUM_NUMERO            := NULL;
    P_CAD_BEN.DES_COMPLEMENTO       := NULL;
    P_CAD_BEN.NOM_BAIRRO            := NULL;
    P_CAD_BEN.NUM_CEP               := NULL;
    P_CAD_BEN.COD_MUNICIPIO         := NULL;
    P_CAD_BEN.COD_UF                := NULL;
    P_CAD_BEN.COD_PAIS              := NULL;
    P_CAD_BEN.NOM_CIDADE_EXTERIOR   := NULL;
    P_CAD_BEN.COD_POSTAL_EXTERIOR   := NULL;
    P_CAD_BEN.DAT_ING               := NULL;
    P_CAD_BEN.DAT_ULT_ATU           := NULL;
    P_CAD_BEN.NOM_USU_ULT_ATU       := NULL;
    P_CAD_BEN.NOM_PRO_ULT_ATU       := NULL;
  
  END SP_RESET_CAD_BENEFICIARIO;

  --GERA EVENTO DE BENEFICIÁRIO 2400 
  --APENAS INCLUSÃO DE BENEFICIÁRIO NOVOS. 

  --ID_CAD_BENEFICIARIO    IDENTIFICADOR CHAVE  DO BENEFICIÁRIO
  --COD_INS                CÓDIGO DO INSTITUTO DO EMPREGADOR/ENTIDADE
  --COD_IDE_CLI_BEN        CÓDIGO IDENTIFICADOR ÚNICO DO BENEFICIÁRIO
  --SEQ_CAD                SEQUENCIA CADASTRAL DO BENEFICIÁRIO
  --NUM_CPF                INFORMAR O CPF DO BENEFICIÁRIO.
  --NUM_NIS                PREENCHER COM O NÚMERO DE IDENTIFICAÇÃO SOCIAL - NIS, O QUAL PODE SER O PIS, PASEP OU NIT.
  --NOM_BENEFICIARIO       NOME DO BENEFICIÁRIO
  --DATA_ING_BENEFICIARIO  PREENCHER COM A DATA DE INÍCIO DO CADASTRO DO BENEFICIÁRIO. INFORMAR A DATA DE INÍCIO DA OBRIGATORIEDADE DOS EVENTOS NÃO PERIÓDICOS PARA ENTES PÚBLICOS NO ESOCIAL CASO O BENEFICIÁRIO POSSUA CADASTRO ANTERIOR A ESSA DATA.
  --COD_SEXO               SEXO DO BENEFICIÁRIO: M - MASCULINO; F - FEMININO. VALORES VÁLIDOS: M, F.
  --COD_RACA               RAÇA E COR DO BENEFICIÁRIO, CONFORME OPÇÕES ABAIXO: 1 - BRANCA; 2 - PRETA; 3 - PARDA; 4 - AMARELA; 5 - INDÍGENA; 6 - NÃO INFORMADO. VALORES VÁLIDOS: 1, 2, 3, 4, 5, 6.
  --COD_EST_CIV            ESTADO CIVIL DO BENEFICIÁRIO, CONFORME OPÇÕES ABAIXO: 1 - SOLTEIRO; 2 - CASADO; 3 - DIVORCIADO; 4 - SEPARADO; 5 - VIÚVO. VALORES VÁLIDOS: 1, 2, 3, 4, 5."
  --FLG_INCAPAZ            Informar se o beneficiário é pessoa com doença incapacitante, na forma da lei: S - Sim; N - Não. Valores Válidos: S, N."
  --DAT_INCAPACIDADE       PREENCHER COM A DATA DO RECONHECIMENTO DA INCAPACIDADE. VALIDAÇÃO: PREENCHIMENTO OBRIGATÓRIO SE {INCFISMEN} = S. NÃO PREENCHER NOS DEMAIS CASOS.
  --DAT_NASC               PREENCHER COM A DATA DE NASCIMENTO
  --COD_MUNIC_NASC         PREENCHER COM O CÓDIGO DO MUNICÍPIO, CONFORME TABELA DO IBGE VALIDAÇÃO: SE INFORMADO, DEVE SER UM CÓDIGO EXISTENTE NA TABELA DO IBGE. O PREENCHIMENTO É OBRIGATÓRIO SE O PAÍS DO NASCIMENTO FOR IGUAL A BRASIL."
  --COD_UF_NASC            Preencher com a sigla da Unidade da Federação Validação: Deve ser uma UF válida."
  --COD_PAIS_NASC          PREENCHER COM O CÓDIGO DO PAÍS DE NASCIMENTO DO BENEFICIÁRIO, CONFORME TABELA 06. VALIDAÇÃO: SE INFORMADO, DEVE SER UM CÓDIGO EXISTENTE NA TABELA."
  --COD_NACIO              Preencher com o código do país de nacionalidade do beneficiário, conforme Tabela 06. Validação: Deve ser um código existente na tabela."
  --NOM_MAE                NOME DA MÃE DO BENEFICIÁRIO."
  --NOM_PAI                Nome do pai do beneficiário."
  --TIP_LOGRADOURO         TIPO DE LOGRADOURO, CONFORME TABELA 20. VALIDAÇÃO: DEVE SER UM CÓDIGO VÁLIDO, EXISTENTE NA TABELA 20."
  --DESC_LOGRADOURO        Descrição do logradouro"
  --NUM_NUMERO             NÚMERO DO LOGRADOURO. SE NÃO HOUVER NÚMERO A SER INFORMADO, PREENCHER COM ""S/N"""
  --DES_COMPLEMENTO        Complemento do logradouro.
  --NOM_BAIRRO             Nome do bairro/distrito
  --NUM_CEP                Código de Endereçamento Postal - CEP. Validação: Deve ser preenchido apenas com números. Deve ser um CEP válido.
  --COD_MUNICIPIO          Preencher com o código do município, conforme tabela do IBGE Validação: Deve ser um código existente na tabela do IBGE."
  --COD_UF                 PREENCHER COM A SIGLA DA UNIDADE DA FEDERAÇÃO VALIDAÇÃO: DEVE SER UMA UF VÁLIDA.
  --COD_PAIS               PREENCHER COM O CÓDIGO DO PAÍS, CONFORME TABELA 6. VALIDAÇÃO: DEVE SER UM CÓDIGO EXISTENTE NA TABELA
  --NOM_CIDADE_EXTERIOR    NOME DA CIDADE FORA DO PAIS
  --COS_POSTAL_EXTERIOR    CÓDIGO DE ENDEREÇAMENTO POSTAL EXTERIOR
  --DAT_ING                DATA DE INGRESSO
  --DAT_ULT_ATU            DATA DA ULTIMA ATUALIZAÇÃO
  --NOM_USU_ULT_ATU        NOME DO USUÁRIO RESPONSÁVEL PELA  ULTIMA ATUALIZAÇÃO
  --NOM_PRO_ULT_ATU        NOME DO PROCESSO RESPONSÁVEL PELA ÚLTIMA ATUALIZAÇÃO*/

  PROCEDURE SP_2400(P_ID_CAD_BENEFICIARIO IN ESOCIAL.TSOC_CAD_BENEFICIARIO.ID_CAD_BENEFICIARIO%TYPE) IS
    V_2400 ESOCIAL.TSOC_2400_BENEFICIARIO_INI%ROWTYPE;
  BEGIN
  
    V_2400.COD_INS        := GB_COD_INS;
    V_2400.ID_PERIODO_DET := GB_ID_PERIODO_DET;
    --OBTÉM NÚMERO DE INSCRIÇÃO E TIPO DE INSCRIÇÃO DO EMPREGADOR 
    SP_RET_INSC_EMP;
    V_2400.TPINSC := GB_EMPREGADOR.TP_INSC;
    V_2400.NRINSC := GB_EMPREGADOR.NUM_CNPJ;
  
    FOR C_2400 IN GB_C_2400(P_ID_CAD_BENEFICIARIO)
    
     LOOP
      --COMPARA A DATA INÍCIO DE GERAÇÃO DO EVENTO COM A ANTERIOR PARA CONTROLAR SEQUENCIAL DE ID        
      IF GB_DAT_EVT_ATU = GB_DAT_EVT_ANT THEN
        GB_SEQ_CHAVE_ID := GB_SEQ_CHAVE_ID + 1;
      ELSE
        GB_SEQ_CHAVE_ID := 1;
      END IF;
      --ZERA VARIÁVEIS
      SP_RESET_2400(V_2400);
      
      --ID DE CADASTRO DO BENEFICIÁRIO
      V_2400.ID_CAD_BENEFICIARIO := C_2400.ID_CAD_BENEFICIARIO;
      --OBTÉM ID CHAVE      
      V_2400.ID_PK := ESOCIAL.ESOC_SEQ_ID_2400.NEXTVAL;
      --COD INS
      V_2400.COD_INS := GB_COD_INS;

      --TASK41563 LNUNES 27/08/2018 VERIFICANDO SE JÁ EXISTE UM ID DE EVENTO
      V_2400.ID := FC_RET_ID_EVENTO_EXISTENTE('2400',P_ID_CAD_BENEFICIARIO);
      IF V_2400.ID IS NULL THEN
        --GERA ID DO EVENTO
        V_2400.ID := FC_GERA_ID_EVENTO;
      END IF;
      
      --OBTÉM SEQUÊNCIA DE CADASTRO DO EVENTO    
      V_2400.SEQ_EVENTO := FC_RET_SEQ_EVENTO_2400(V_2400);
      --OBTEM DADOS DE VERSIONAMENTO E AMBIENTE
      SP_RET_INFO_AMBIENTE(V_2400.TPAMB,V_2400.VERPROC,V_2400.PROCEMI);                   
      ---------------------  
      --SE O PERIODO FOR DO TIPO A - Abertura. Retificação =1 
      --SE FOR R - Reabertura. Retificação = 2 
      IF GB_FLG_STATUS_PERIODO = 'A' 
       THEN V_2400.INDRETIF := 1;
      ELSE V_2400.INDRETIF :=2;
      END IF; 
      --DADOS DO BENEFICIÁRO     
      V_2400.BENEFICIARIO_CPFBENEF  := C_2400.NUM_CPF;
      V_2400.BENEFICIARIO_NMBENEFIC := SUBSTR(C_2400.NOM_BENEFICIARIO,
                                              0,
                                              70);
      --PREENCHER COM A DATA DE INÍCIO DO CADASTRO DO BENEFICIÁRIO. 
      --INFORMAR A DATA DE INÍCIO DA OBRIGATORIEDADE DOS EVENTOS NÃO PERIÓDICOS 
      --PARA ENTES PÚBLICOS NO ESOCIAL CASO O BENEFICIÁRIO POSSUA CADASTRO ANTERIOR A ESSA DATA.
      --VALIDAÇÃO: DEVE SER UMA DATA VÁLIDA, IGUAL OU POSTERIOR À DATA DE 
      --INÍCIO DA OBRIGATORIEDADE DOS EVENTOS NÃO PERIÓDICOS PARA ENTES PÚBLICOS NO ESOCIAL 
      --E IGUAL OU ANTERIOR À DATA ATUAL.
      --DATA OBRIGATORIEDADE EVENTOS NÃO PERIODICOS ESOCIAL: '01/12/2018' 
      V_2400.BENEFICIARIO_DTINICIO := CASE
                                        WHEN C_2400.DATA_ING_BENEFICIARIO >
                                             GB_DAT_ESOCIAL THEN
                                         C_2400.DATA_ING_BENEFICIARIO
                                        ELSE
                                         GB_DAT_ESOCIAL
                                      END;
      V_2400.BENEFICIARIO_SEXO     := C_2400.COD_SEXO;
      --DE PARA RAÇA COR
      V_2400.BENEFICIARIO_RACACOR := FC_DEPARA_RACA_COR(C_2400.COD_RACA);
      --DE PARA ESTADO CIVIL
      V_2400.BENEFICIARIO_ESTCIV      := FC_DEPARA_EST_CIV(C_2400.COD_EST_CIV);
      V_2400.BENEFICIARIO_INCFISMEN   := C_2400.FLG_INCAPAZ;
      V_2400.BENEFICIARIO_DTINCFISMEN := C_2400.DAT_INCAPACIDADE;
      V_2400.DADOSNASC_DTNASCTO       := C_2400.DAT_NASC;
      --DE PARA MUNICIPIO IBGE 
      V_2400.DADOSNASC_CODMUNIC := FC_DEPARA_MUNICIP_IBGE(C_2400.COD_MUNIC_NASC);
      V_2400.DADOSNASC_UF       := C_2400.COD_UF_NASC;
      --DE PARA PAÍS DE NASCIMENTO
      V_2400.DADOSNASC_PAISNASCTO := FC_DEPARA_PAIS_IBGE(C_2400.COD_PAIS_NASC);
      --DE PARA NACIONALIDADE
      V_2400.DADOSNASC_PAISNAC := FC_DEPARA_PAIS_NACION(C_2400.COD_NACIO);
      V_2400.DADOSNASC_NMMAE   := SUBSTR(C_2400.NOM_MAE, 0, 70);
      V_2400.DADOSNASC_NMPAI   := SUBSTR(C_2400.NOM_PAI, 0, 70);
      --NUM NIS
      V_2400.BENEFICIARIO_NISBENEF := TRIM(REPLACE(REPLACE(C_2400.NUM_NIS,'-',''),'.',''));
    
      --SE NÃO FOR UM NIS VÁLIDO, CONSIDERA NULO  
      IF NOT FC_VALIDA_NIT(V_2400.BENEFICIARIO_NISBENEF) AND
         NOT FC_VALIDA_PISPASEP(V_2400.BENEFICIARIO_NISBENEF) THEN
        V_2400.BENEFICIARIO_NISBENEF := NULL;
      END IF;
    
      --DE PARA TIPO DE LOGRADOURO
      V_2400.ENDERECO_TPLOGRAD  := FC_DEPARA_TIP_LOGRADOURO(C_2400.TIP_LOGRADOURO);
      V_2400.ENDERECO_DSCLOGRAD := C_2400.DESC_LOGRADOURO;
    
      BEGIN
        V_2400.ENDERECO_NRLOGRAD := NVL(C_2400.NUM_NUMERO, 'S/N');
      EXCEPTION
        WHEN OTHERS THEN
          V_2400.ENDERECO_NRLOGRAD := 'S/N';
      END;
    
      V_2400.ENDERECO_COMPLEMENTO := C_2400.DES_COMPLEMENTO;
      V_2400.ENDERECO_BAIRRO      := C_2400.NOM_BAIRRO;
      V_2400.ENDERECO_CEP         := C_2400.NUM_CEP;
      --DE PARA MUNICÍPIO
      V_2400.ENDERECO_CODMUNIC := FC_DEPARA_MUNICIP_IBGE(C_2400.COD_MUNICIPIO);
      V_2400.ENDERECO_UF       := C_2400.COD_UF;
      --DE PARA PAÍS DE RESIDENCIA
      V_2400.ENDERECO_PAISRESID := FC_DEPARA_PAIS_IBGE(C_2400.COD_PAIS);
      V_2400.ENDERECO_NMCID     := C_2400.NOM_CIDADE_EXTERIOR;
      V_2400.ENDERECO_CODPOSTAL := C_2400.COD_POSTAL_EXTERIOR;
      V_2400.ID_ORIGEM  := GB_ID_ORIGEM;
      V_2400.CTR_NUM_CPF        := C_2400.NUM_CPF;
      V_2400.CTR_DSC_EVENTO     := '2400';
      V_2400.CTR_FLG_STATUS     := 'AX'; --AGUARDANDO GERAÇÃO XML
      V_2400.FLG_VIGENCIA       := 'A';
    
      --VALIDA O EVENTO, CASO ENCONTRE ERRO ATUALIZA CTR_FLG_STATUS PARA 'EV' ERRO DE VALIDAÇÃO
      --ENVIA A LINHA DA TABELA DE EVENTO RECEBIDA, E A LINHA DE CADASTRO DE BENEFICIÁRIO
      SP_VALIDA_2400(V_2400, C_2400);
    
      BEGIN
        SP_INC_2400(V_2400);
      EXCEPTION
        WHEN OTHERS THEN
          GB_REC_ERRO.COD_INS           := GB_COD_INS;
          GB_REC_ERRO.ID_CAD            := V_2400.ID_PK;
          GB_REC_ERRO.NOM_PROCESSO      := 'SP_INC_2400';
          GB_REC_ERRO.TIPO_EVENTO       := '2400';
          GB_REC_ERRO.DESC_ERRO         := 'ERRO NA INSERÇÃO DO EVENTO 2400';
          GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
          GB_REC_ERRO.DES_IDENTIFICADOR := 'COD IDE CLI:' ||
                                           C_2400.COD_IDE_CLI_BEN;
          SP_GERA_ERRO_PROCESSO;
      END;
    
    END LOOP;
  
    /* EXCEPTION
    
    WHEN EX_EMPREGADOR THEN 
          GB_REC_ERRO.COD_INS      := GB_COD_INS;
          GB_REC_ERRO.ID_CAD       := NULL;
          GB_REC_ERRO.NOM_PROCESSO := 'SP_2400';
          GB_REC_ERRO.TIPO_EVENTO  := '2400';
          GB_REC_ERRO.DESC_ERRO    := 'NÃO HÁ EMPREGADOR ASSOCIADO PARA GERAÇÃO DO EVENTO';
          GB_REC_ERRO.DESC_ERRO_BD := SQLERRM;         
          GB_REC_ERRO.DES_IDENTIFICADOR := NULL;
        
          SP_GERA_ERRO_PROCESSO;*/
  
  END;
  
  
  --Retorna informações do ambiente para geração do evento
  PROCEDURE SP_RET_INFO_AMBIENTE(P_TPAMB OUT ESOCIAL.TSOC_PAR_AMBIENTE.TPAMB%TYPE,
                                 P_PROCEMI OUT ESOCIAL.TSOC_PAR_AMBIENTE.PROCEMI%TYPE,
                                 P_VERPROC OUT ESOCIAL.TSOC_PAR_AMBIENTE.VERPROC%TYPE
                                 )
  IS 
  BEGIN 
    SELECT PA.TPAMB, PA.PROCEMI, PA.VERPROC
      INTO P_TPAMB, P_PROCEMI, P_VERPROC 
     FROM ESOCIAL.TSOC_PAR_AMBIENTE PA 
     WHERE PA.FLG_STATUS = 'A';                 
  END SP_RET_INFO_AMBIENTE; 
  
  

  PROCEDURE SP_INC_2400(P_2400 IN ESOCIAL.TSOC_2400_BENEFICIARIO_INI%ROWTYPE) IS
  BEGIN
  
    INSERT INTO ESOCIAL.TSOC_2400_BENEFICIARIO_INI BI
      (ID_PK,
       COD_INS,
       SEQ_EVENTO,
       ID,
       BENEFICIARIO_CPFBENEF,
       ID_CAD_BENEFICIARIO,
       ID_PERIODO_DET,
       INDRETIF,
       NRRECIBO,
       TPAMB,
       PROCEMI,
       VERPROC,
       TPINSC,
       NRINSC,
       BENEFICIARIO_NISBENEF,
       BENEFICIARIO_NMBENEFIC,
       BENEFICIARIO_DTINICIO,
       BENEFICIARIO_SEXO,
       BENEFICIARIO_RACACOR,
       BENEFICIARIO_ESTCIV,
       BENEFICIARIO_INCFISMEN,
       BENEFICIARIO_DTINCFISMEN,
       DADOSNASC_DTNASCTO,
       DADOSNASC_CODMUNIC,
       DADOSNASC_UF,
       DADOSNASC_PAISNASCTO,
       DADOSNASC_PAISNAC,
       DADOSNASC_NMMAE,
       DADOSNASC_NMPAI,
       ENDERECO_TPLOGRAD,
       ENDERECO_DSCLOGRAD,
       ENDERECO_NRLOGRAD,
       ENDERECO_COMPLEMENTO,
       ENDERECO_BAIRRO,
       ENDERECO_CEP,
       ENDERECO_CODMUNIC,
       ENDERECO_UF,
       ENDERECO_PAISRESID,
       ENDERECO_NMCID,
       ENDERECO_CODPOSTAL,
       ID_ORIGEM,
       CTR_NUM_CPF,
       ID_LOTE,
       CTR_DSC_EVENTO,
       CTR_FLG_STATUS,
       XML_ENVIO,
       FLG_VIGENCIA,
       DAT_ING,
       DAT_ULT_ATU,
       NOM_USU_ULT_ATU,
       NOM_PRO_ULT_ATU)
    
    VALUES
    
      (P_2400.ID_PK,
       P_2400.COD_INS,
       P_2400.SEQ_EVENTO,
       P_2400.ID,
       P_2400.BENEFICIARIO_CPFBENEF,
       P_2400.ID_CAD_BENEFICIARIO,
       P_2400.ID_PERIODO_DET,
       P_2400.INDRETIF,
       P_2400.NRRECIBO,
       P_2400.TPAMB,
       P_2400.PROCEMI,
       P_2400.VERPROC,
       P_2400.TPINSC,
       P_2400.NRINSC,
       P_2400.BENEFICIARIO_NISBENEF,
       P_2400.BENEFICIARIO_NMBENEFIC,
       P_2400.BENEFICIARIO_DTINICIO,
       P_2400.BENEFICIARIO_SEXO,
       P_2400.BENEFICIARIO_RACACOR,
       P_2400.BENEFICIARIO_ESTCIV,
       P_2400.BENEFICIARIO_INCFISMEN,
       P_2400.BENEFICIARIO_DTINCFISMEN,
       P_2400.DADOSNASC_DTNASCTO,
       P_2400.DADOSNASC_CODMUNIC,
       P_2400.DADOSNASC_UF,
       P_2400.DADOSNASC_PAISNASCTO,
       P_2400.DADOSNASC_PAISNAC,
       P_2400.DADOSNASC_NMMAE,
       P_2400.DADOSNASC_NMPAI,
       P_2400.ENDERECO_TPLOGRAD,
       P_2400.ENDERECO_DSCLOGRAD,
       P_2400.ENDERECO_NRLOGRAD,
       P_2400.ENDERECO_COMPLEMENTO,
       P_2400.ENDERECO_BAIRRO,
       P_2400.ENDERECO_CEP,
       P_2400.ENDERECO_CODMUNIC,
       P_2400.ENDERECO_UF,
       P_2400.ENDERECO_PAISRESID,
       P_2400.ENDERECO_NMCID,
       P_2400.ENDERECO_CODPOSTAL,
       P_2400.ID_ORIGEM,
       P_2400.CTR_NUM_CPF,
       P_2400.ID_LOTE,
       P_2400.CTR_DSC_EVENTO,
       P_2400.CTR_FLG_STATUS,
       P_2400.XML_ENVIO,
       P_2400.FLG_VIGENCIA,
       SYSDATE,
       SYSDATE,
       'ESOCIAL',
       'SP_INC_2400');
  
    COMMIT;
  
  END SP_INC_2400;

  /*FUNCTION FC_RET_ID_PK RETURN ESOCIAL.TSOC_2400_BENEFICIARIO_INI.ID_PK%TYPE 
    IS
   BEGIN       
        RETURN ESOCIAL.ESOC_SEQ_ID_2400.NEXTVAL;         
  END; 
  
    
    */

  /*************************DESCRIÇÃO DA REGRA***********************************
  
  A IDENTIFICAÇÃO ÚNICA DO EVENTO (ID) É COMPOSTA POR 36 CARACTERES, 
  CONFORME O QUE SEGUE: IDTNNNNNNNNNNNNNNAAAAMMDDHHMMSSQQQQQ ID - TEXTO FIXO "ID"; 
  T - TIPO DE INSCRIÇÃO DO EMPREGADOR (1 - CNPJ; 2 - CPF); 
  NNNNNNNNNNNNNN - NÚMERO DO CNPJ OU CPF DO EMPREGADOR - COMPLETAR COM ZEROS À DIREITA. 
  NO CASO DE PESSOAS JURÍDICAS, O CNPJ INFORMADO DEVE CONTER 8 OU 14 
  POSIÇÕES DE ACORDO COM O ENQUADRAMENTO DO CONTRIBUINTE PARA PREENCHIMENTO DO CAMPO 
  {IDEEMPREGADOR/NRINSC} DO EVENTO S-1000, COMPLETANDO-SE COM ZEROS À DIREITA, 
  SE NECESSÁRIO. AAAAMMDD - ANO, MÊS E DIA DA GERAÇÃO DO EVENTO; 
  HHMMSS - HORA, MINUTO E SEGUNDO DA GERAÇÃO DO EVENTO; 
  QQQQQ - NÚMERO SEQUENCIAL DA CHAVE. INCREMENTAR SOMENTE QUANDO OCORRER 
  GERAÇÃO DE EVENTOS NA MESMA DATA/HORA, COMPLETANDO COM ZEROS À ESQUERDA. 
  OBS.: NO CASO DE PESSOAS JURÍDICAS, O CNPJ INFORMADO DEVERÁ CONTER 8 OU 14 
  POSIÇÕES DE ACORDO COM O ENQUADRAMENTO DO CONTRIBUINTE PARA PREENCHIMENTO DO CAMPO 
  {IDEEMPREGADOR/NRINSC} DO EVENTO S-1000, COMPLETANDO-SE COM ZEROS À DIREITA, SE NECESSÁRIO.  
       
  **********************************************************************************/

  --GERA ID DE EVENTO 
  --TP INSC 1 = CNPJ / 2 = CPF 
  --A DATA DE GERAÇÃO DE CADA EVENTO É ATUALIZADA A CADA 10 EVENTOS GERADOS,
  --O SEQUENCIAL DE ID DE EVENTO É INCREMENTADO. 
  --CONTROLADOS NO PRÓPRIO EVENTO,
  --APÓS 10 EVENTOS GERADOS A DATA É REDEFINIDA, E O SEQUENCIAL ZERADO. 

  FUNCTION FC_GERA_ID_EVENTO RETURN VARCHAR2 IS
  BEGIN
  
    RETURN 'ID' || GB_EMPREGADOR.TP_INSC || GB_EMPREGADOR.NUM_CNPJ || GB_DAT_EVT_ATU || LPAD(GB_SEQ_CHAVE_ID,
                                                                                             5,
                                                                                             0);
  END FC_GERA_ID_EVENTO;

  --RETORNA A PRIMEIRA FOLHA DE PAGAMENTO DO BENEFICIÁRIO
 FUNCTION FC_RET_PRIMEIRA_FOLHA RETURN DATE IS
    V_DAT_PRIMEIRA_FOLHA DATE;
  BEGIN
    SELECT MIN(PER_PROCESSO)
      INTO V_DAT_PRIMEIRA_FOLHA
      FROM USER_IPESP.TB_HFOLHA H1
     WHERE H1.COD_INS = GB_FOLHA.COD_INS
       AND H1.COD_BENEFICIO = GB_FOLHA.COD_BENEFICIO
       AND H1.COD_IDE_CLI = GB_FOLHA.COD_IDE_CLI
       AND H1.SEQ_PAGAMENTO = GB_FOLHA.SEQ_PAGAMENTO
       AND H1.TIP_PROCESSO = GB_FOLHA.TIP_PROCESSO;
  
    RETURN V_DAT_PRIMEIRA_FOLHA;
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
    
  END FC_RET_PRIMEIRA_FOLHA;



FUNCTION FC_RET_ULTIMA_FOLHA(P_COD_INS IN USER_IPESP.TB_BENEFICIARIO.COD_INS%TYPE,
                             P_COD_IDE_CLI IN USER_IPESP.TB_BENEFICIARIO.COD_IDE_CLI_BEN%TYPE,
                             P_COD_BENEFICIO IN USER_IPESP.TB_BENEFICIARIO.COD_BENEFICIO%TYPE)
                           RETURN USER_IPESP.TB_BENEFICIARIO.PER_ULT_PROCESSO%TYPE IS 
V_DAT_ULT_FOLHA USER_IPESP.TB_BENEFICIARIO.PER_ULT_PROCESSO%TYPE;
BEGIN 
  SELECT PER_ULT_PROCESSO     
    INTO V_DAT_ULT_FOLHA
     FROM USER_IPESP.TB_BENEFICIARIO BEN 
     WHERE BEN.COD_IDE_CLI_BEN = P_COD_IDE_CLI 
       AND BEN.COD_BENEFICIO = P_COD_BENEFICIO 
       AND BEN.COD_INS = P_COD_INS; 
       
       
    RETURN V_DAT_ULT_FOLHA;            
       
END FC_RET_ULTIMA_FOLHA;



  --RETORNA O PERCENTUAL DE RATEIO VIGENTE DO BENEFICIÁRIO
  FUNCTION FC_RET_RATEIO(P_COD_BENEFICIO IN NUMBER,
                         P_COD_IDE_CLI   IN VARCHAR2)
  --O NOVO LAYOUT NÃO POSSUI COLUNA DE RATEIO                        
   RETURN NUMBER --ESOCIAL.TSOC_CAD_BENEFICIARIO.VAL_PERCENT_RATEIO%TYPE
   IS
    V_VAL_PERCENT NUMBER; --ESOCIAL.TSOC_CAD_BENEFICIO;
  
  BEGIN
  
    SELECT VAL_PERCENT_RATEIO
      INTO V_VAL_PERCENT
      FROM USER_IPESP.TB_RATEIO_BENEFICIO RB
     WHERE RB.COD_BENEFICIO = P_COD_BENEFICIO
       AND RB.COD_IDE_CLI_BEN = P_COD_IDE_CLI
       AND DAT_INI_VIG >= SYSDATE
       AND (RB.DAT_FIM_VIG IS NULL OR RB.DAT_FIM_VIG <= SYSDATE)
       AND RB.COD_INS = GB_COD_INS
       AND RB.FLG_STATUS = 'A';
  
    RETURN V_VAL_PERCENT;
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN 0;
    
  END FC_RET_RATEIO;

  FUNCTION FC_RET_SEQ_EVENTO_2400(P_SEQ_EVT IN ESOCIAL.TSOC_2400_BENEFICIARIO_INI%ROWTYPE)
    RETURN ESOCIAL.TSOC_2400_BENEFICIARIO_INI.SEQ_EVENTO%TYPE IS
    V_SEQ_EVENTO ESOCIAL.TSOC_2400_BENEFICIARIO_INI.SEQ_EVENTO%TYPE;
  BEGIN
  
    SELECT NVL(MAX(BI.SEQ_EVENTO), 0) + 1
      INTO V_SEQ_EVENTO
      FROM ESOCIAL.TSOC_2400_BENEFICIARIO_INI BI
     WHERE BI.COD_INS = P_SEQ_EVT.COD_INS
       AND BI.ID = P_SEQ_EVT.ID;
  
    RETURN V_SEQ_EVENTO;
  
  END FC_RET_SEQ_EVENTO_2400;

  --OBTEM O TIPO DE INSCRIÇÃO E  NÚMERO DA INSCRIÇÃO DO EMPREGADOR ASSOCIADO AO PERIODO EM ABERTO DA ORIGEM 

  PROCEDURE SP_RET_INSC_EMP IS
  BEGIN
    SELECT EMP.NUM_CNPJ, EMP.TP_INSC
      INTO GB_EMPREGADOR.NUM_CNPJ, GB_EMPREGADOR.TP_INSC
      FROM ESOCIAL.TSOC_CAD_EMPREGADOR  EMP,
           ESOCIAL.TSOC_CTR_PERIODO_DET PD,
           ESOCIAL.TSOC_PAR_ORIGEM      PO
     WHERE EMP.COD_INS = GB_COD_INS
       AND PD.ID_ORIGEM = PO.ID_ORIGEM
       AND PO.ID_CAD_EMPREGADOR = EMP.ID_CAD_EMPREGADOR
       AND PD.COD_INS = EMP.COD_INS
       AND PD.ID_PERIODO_DET = GB_ID_PERIODO_DET
       AND PD.ID_ORIGEM = GB_ID_ORIGEM;
  
  EXCEPTION
    WHEN OTHERS THEN
      GB_EMPREGADOR.TP_INSC  := NULL;
      GB_EMPREGADOR.NUM_CNPJ := NULL;
    
  END SP_RET_INSC_EMP;

  --RETORNA O CÓDIGO DE RAÇA EQUIVALENTE NO ESOCIAL 
  FUNCTION FC_DEPARA_RACA_COR(P_COD_RACA IN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_RACA%TYPE)
    RETURN ESOCIAL.TSOC_2400_BENEFICIARIO_INI.BENEFICIARIO_RACACOR%TYPE IS
    V_COD_RACA ESOCIAL.TSOC_2400_BENEFICIARIO_INI.BENEFICIARIO_RACACOR%TYPE;
  
  BEGIN
  
    SELECT CS.COD_ESOCIAL
      INTO V_COD_RACA
      FROM ESOCIAL.TSOC_PAR_SIGEPREV_ESOCIAL CS
     WHERE CS.COD_TIPO = 2 --RAÇA/COR
       AND CS.COD_INS = GB_COD_INS
       AND CS.COD_SIGEPREV = TO_CHAR(P_COD_RACA);
  
    RETURN V_COD_RACA;
  
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
    
  END FC_DEPARA_RACA_COR;

  --RETORNA O CÓDIGO DE ESTADO CIVIL EQUIVALENTE NO ESOCIAL 
  FUNCTION FC_DEPARA_EST_CIV(P_EST_CIV IN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_EST_CIV%TYPE)
    RETURN ESOCIAL.TSOC_2400_BENEFICIARIO_INI.BENEFICIARIO_ESTCIV%TYPE IS
    V_EST_CIV ESOCIAL.TSOC_2400_BENEFICIARIO_INI.BENEFICIARIO_ESTCIV%TYPE;
  
  BEGIN
  
    SELECT CS.COD_ESOCIAL
      INTO V_EST_CIV
      FROM ESOCIAL.TSOC_PAR_SIGEPREV_ESOCIAL CS
     WHERE CS.COD_TIPO = 1 --ESTADO CIVIL
       AND CS.COD_INS = GB_COD_INS
       AND CS.COD_SIGEPREV = TO_CHAR(P_EST_CIV);
  
    RETURN V_EST_CIV;
  
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
    
  END FC_DEPARA_EST_CIV;

  --RETORNA O CÓDIGO DO MUNICIPIO EQUIVALENTE NO ESOCIAL (IBGE)
  FUNCTION FC_DEPARA_MUNICIP_IBGE(P_COD_MUN IN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_MUNICIPIO%TYPE)
    RETURN ESOCIAL.TSOC_2400_BENEFICIARIO_INI.ENDERECO_CODMUNIC%TYPE IS
    V_COD_MUNICIPIO ESOCIAL.TSOC_2400_BENEFICIARIO_INI.ENDERECO_CODMUNIC%TYPE;
  
  BEGIN
    SELECT CS.COD_ESOCIAL
      INTO V_COD_MUNICIPIO
      FROM ESOCIAL.TSOC_PAR_SIGEPREV_ESOCIAL CS
     WHERE CS.COD_TIPO = 5 --MUNICIPIO
       AND CS.COD_INS = GB_COD_INS
       AND CS.COD_SIGEPREV = TO_CHAR(P_COD_MUN);
  
    RETURN V_COD_MUNICIPIO;
  
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
    
  END FC_DEPARA_MUNICIP_IBGE;

  --RETORNA O CÓDIGO DO PAIS EQUIVALENTE NO ESOCIAL           
  FUNCTION FC_DEPARA_PAIS_IBGE(P_COD_PAIS IN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_PAIS%TYPE)
    RETURN ESOCIAL.TSOC_2400_BENEFICIARIO_INI.ENDERECO_PAISRESID%TYPE IS
    V_COD_PAIS ESOCIAL.TSOC_2400_BENEFICIARIO_INI.ENDERECO_PAISRESID%TYPE;
  
  BEGIN
    SELECT CS.COD_ESOCIAL
      INTO V_COD_PAIS
      FROM ESOCIAL.TSOC_PAR_SIGEPREV_ESOCIAL CS
     WHERE CS.COD_TIPO = 3 --PAÍS
       AND CS.COD_INS = GB_COD_INS
       AND CS.COD_SIGEPREV = TO_CHAR(P_COD_PAIS);
  
    RETURN V_COD_PAIS;
  
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
    
  END FC_DEPARA_PAIS_IBGE;

  --RETORNA O CÓDIGO DE NACIONALIDADE EQUIVALENTE NO ESOCIAL 
  FUNCTION FC_DEPARA_PAIS_NACION(P_COD_NACIO IN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_NACIO%TYPE)
    RETURN ESOCIAL.TSOC_2400_BENEFICIARIO_INI.DADOSNASC_PAISNAC%TYPE IS
    V_COD_NACIO ESOCIAL.TSOC_2400_BENEFICIARIO_INI.DADOSNASC_PAISNAC%TYPE;
  BEGIN
  
    SELECT CS.COD_ESOCIAL
      INTO V_COD_NACIO
      FROM ESOCIAL.TSOC_PAR_SIGEPREV_ESOCIAL CS
     WHERE CS.COD_TIPO = 4 --NACIONALIDADE
       AND CS.COD_INS = GB_COD_INS
       AND CS.COD_SIGEPREV = TO_CHAR(P_COD_NACIO);
  
    RETURN V_COD_NACIO;
  
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
    
  END FC_DEPARA_PAIS_NACION;

  --VALIDA SE EXISTE PERÍODO ABERTO PARA A ORIGEM 
/*  FUNCTION FC_RET_PERIODO_ORIGEM
    RETURN ESOCIAL.TSOC_CTR_PERIODO_DET.ID_PERIODO_DET%TYPE IS
    V_ID_PERIODO_DET ESOCIAL.TSOC_CTR_PERIODO_DET.ID_PERIODO_DET%TYPE;
  
  BEGIN

     SELECT ID_PERIODO_DET
       INTO V_ID_PERIODO_DET
       FROM TSOC_CTR_PERIODO P,
            TSOC_CTR_PERIODO_DET PD
      WHERE P.COD_INS = PD.COD_INS
        AND P.ID_PERIODO = PD.ID_PERIODO
        AND P.FLG_STATUS = 'A'
        AND PD.FLG_STATUS = 'A'
        AND ID_ORIGEM = GB_ID_ORIGEM
        AND ID_EVENTO = GB_ID_EVENTO;
  
\*    SELECT PD.ID_PERIODO
      INTO V_ID_PERIODO
      FROM ESOCIAL.TSOC_CTR_PERIODO_DET PD, ESOCIAL.TSOC_CTR_PERIODO P
     WHERE P.ID_ORIGEM = GB_ID_ORIGEM
       AND PD.STATUS = 'A'
       AND PD.COD_INS = GB_COD_INS
       AND PD.ID_PERIODO_DET = P.ID_PERIODO
       AND PD.ID_EVENTO = GB_ID_EVENTO
       ;*\
  
    RETURN V_ID_PERIODO_DET;
  
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
    
  END FC_RET_PERIODO_ORIGEM;*/

  FUNCTION FC_DEPARA_TIP_LOGRADOURO(P_TIP_LOGRAD IN ESOCIAL.TSOC_CAD_BENEFICIARIO.TIP_LOGRADOURO%TYPE)
    RETURN ESOCIAL.TSOC_2400_BENEFICIARIO_INI.ENDERECO_TPLOGRAD%TYPE IS
    V_TIP_LOGRAD_ESOC ESOCIAL.TSOC_2400_BENEFICIARIO_INI.ENDERECO_TPLOGRAD%TYPE;
  BEGIN
  
    SELECT SE.COD_ESOCIAL
      INTO V_TIP_LOGRAD_ESOC
      FROM ESOCIAL.TSOC_PAR_SIGEPREV_ESOCIAL SE
     WHERE SE.COD_INS = GB_COD_INS
       AND SE.COD_TIPO = 6 --LOGRADOURO
       AND SE.COD_SIGEPREV = TO_CHAR(P_TIP_LOGRAD);
  
    RETURN V_TIP_LOGRAD_ESOC;
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN 'O'; --OUTROS
  
    WHEN OTHERS THEN
      RETURN NULL;
    
  END FC_DEPARA_TIP_LOGRADOURO;

  FUNCTION FC_VALIDA_CPF(P_CPF IN VARCHAR2)
    RETURN BOOLEAN IS
  
    M_TOTAL  NUMBER := 0;
    M_DIGITO NUMBER := 0;
  
  BEGIN
  
    IF P_CPF IS NULL THEN
      RETURN FALSE;
    END IF;
  
    FOR I IN 1 .. 9 LOOP
      M_TOTAL := M_TOTAL + SUBSTR(P_CPF, I, 1) * (11 - I);
    END LOOP;
  
    M_DIGITO := 11 - MOD(M_TOTAL, 11);
  
    IF M_DIGITO > 9 THEN
      M_DIGITO := 0;
    END IF;
  
    IF M_DIGITO != SUBSTR(P_CPF, 10, 1) THEN
      RETURN FALSE;
    END IF;
  
    --M_DIGITO := 0;
    M_TOTAL := 0;
  
    FOR I IN 1 .. 10 LOOP
      M_TOTAL := M_TOTAL + SUBSTR(P_CPF, I, 1) * (12 - I);
    END LOOP;
  
    M_DIGITO := 11 - MOD(M_TOTAL, 11);
  
    IF M_DIGITO > 9 THEN
      M_DIGITO := 0;
    END IF;
  
    IF M_DIGITO != SUBSTR(P_CPF, 11, 1) THEN
      RETURN FALSE;
    END IF;
  
    RETURN TRUE;
  
  END FC_VALIDA_CPF;

  FUNCTION FC_VALIDA_NIT(P_NIT IN VARCHAR2) RETURN BOOLEAN
  
   IS
    M11       PLS_INTEGER;
    SOMA      PLS_INTEGER;
    DV        PLS_INTEGER;
    DIGITO    PLS_INTEGER;
    I         PLS_INTEGER := 0;
    NIT_LIMPO VARCHAR2(11) := TRIM(P_NIT);
  
  BEGIN
  
    IF P_NIT IS NULL THEN
      RETURN FALSE;
    END IF;
  
    IF LENGTH(NIT_LIMPO) <> 11 THEN
      RETURN FALSE;
    END IF;
  
    DV   := SUBSTR(NIT_LIMPO, 11, 1);
    SOMA := 0;
    M11  := 2;
  
    WHILE I < 10
    
     LOOP
    
      I    := I + 1;
      SOMA := SOMA + (M11 * SUBSTR(NIT_LIMPO, 11 - I, 1));
    
      IF M11 < 9 THEN
        M11 := M11 + 1;
      ELSE
        M11 := 2;
      END IF;
    
      DIGITO := 11 - (SOMA MOD 11);
      IF DIGITO > 9 THEN
        DIGITO := 0;
      END IF;
    
    END LOOP;
  
    IF DV = DIGITO THEN
      RETURN TRUE;
    
    ELSE
      RETURN FALSE;
    END IF;
  
  END FC_VALIDA_NIT;

  FUNCTION FC_VALIDA_PISPASEP(P_PIS_NUM VARCHAR2) RETURN BOOLEAN IS
    ERRO_PIS   VARCHAR2(1); -- RECEBE 'N' PARA PIS CORRETO E 'S' CASO CONTRÁRIO
    SOMATORIO  NUMBER; -- P/ CALCULAR SOMA
    POS_PIS    NUMBER; -- PARA PERCORRER A STRING
    PESO_PIS   NUMBER; -- MULTIPLICADOR
    INT_PIS    NUMBER; -- VARIAVEL AUXILIAR
    MODULO_PIS NUMBER; -- VARIAVEL AUXILIAR
  
  BEGIN
  
    IF P_PIS_NUM IS NULL THEN
      RETURN FALSE;
    END IF;
  
    IF NVL(LENGTH(P_PIS_NUM), 0) <> 11 THEN
      RETURN FALSE;
    ELSE
      ERRO_PIS  := 'N';
      SOMATORIO := 0;
      POS_PIS   := 1;
      PESO_PIS  := 3;
    
      WHILE POS_PIS < 3 LOOP
      
        INT_PIS   := TO_NUMBER(SUBSTR(P_PIS_NUM, POS_PIS, 1)) * PESO_PIS;
        SOMATORIO := SOMATORIO + INT_PIS;
        PESO_PIS  := PESO_PIS - 1;
        POS_PIS   := POS_PIS + 1;
      
      END LOOP;
    
      PESO_PIS := 9;
    
      WHILE POS_PIS < 11 LOOP
      
        INT_PIS   := TO_NUMBER(SUBSTR(P_PIS_NUM, POS_PIS, 1)) * PESO_PIS;
        SOMATORIO := SOMATORIO + INT_PIS;
        PESO_PIS  := PESO_PIS - 1;
        POS_PIS   := POS_PIS + 1;
      
      END LOOP;
    
      INT_PIS := MOD(SOMATORIO, 11);
    
      IF INT_PIS < 2 THEN
        INT_PIS := 11;
      END IF;
    
      MODULO_PIS := 11 - INT_PIS;
    
      IF MODULO_PIS <> TO_NUMBER(SUBSTR(P_PIS_NUM, 11, 1)) THEN
        ERRO_PIS := 'S';
      ELSE
      
        POS_PIS := 1;
        WHILE POS_PIS < 11 LOOP
        
          INT_PIS := POS_PIS + 1;
          IF SUBSTR(P_PIS_NUM, POS_PIS, 1) <> SUBSTR(P_PIS_NUM, INT_PIS, 1) THEN
            ERRO_PIS := 'N';
            POS_PIS  := 11;
          ELSE
            POS_PIS := POS_PIS + 1;
          END IF;
        END LOOP;
      END IF;
    
      IF ERRO_PIS = 'S' THEN
        RETURN FALSE;
      ELSE
        RETURN TRUE;
      END IF;
    END IF;
  END;

  PROCEDURE SP_VALIDA_2400(P_2400  IN OUT ESOCIAL.TSOC_2400_BENEFICIARIO_INI%ROWTYPE,
                           PC_2400 IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE) IS
  BEGIN
  
    --VERIFICA SE O CPF É NULO 
    --SE FOR NULO, INVALIDA O EVENTO
    IF P_2400.BENEFICIARIO_CPFBENEF IS NULL THEN
      P_2400.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2400.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_VALIDA_CPF';
      GB_REC_ERRO.TIPO_EVENTO       := '2400';
      GB_REC_ERRO.DESC_ERRO         := 'CPF NÃO INFORMADO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'NUM CPF:' ||
                                       P_2400.BENEFICIARIO_CPFBENEF;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
      --VERIFICA SE O CPF É INVALIDA, SE SIM, INVALIDA O EVENTO
    ELSIF NOT FC_VALIDA_CPF(P_2400.BENEFICIARIO_CPFBENEF) THEN
      P_2400.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2400.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_VALIDA_CPF';
      GB_REC_ERRO.TIPO_EVENTO       := '2400';
      GB_REC_ERRO.DESC_ERRO         := 'CPF INVÁLIDO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'NUM CPF:' ||
                                       P_2400.BENEFICIARIO_CPFBENEF;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO  ;
    END IF;
  
    /*      --VALIDA NIS NULO      
    IF P_2400.BENEFICIARIO_NISBENEF IS NULL THEN   
        --P_2400.CTR_FLG_STATUS := 'EV';         
        GB_REC_ERRO.COD_INS      := GB_COD_INS;
        GB_REC_ERRO.ID_CAD       := P_2400.ID_PK;
        GB_REC_ERRO.NOM_PROCESSO := 'FC_VALIDA_NIT/FC_VALIDA_PIS';
        GB_REC_ERRO.TIPO_EVENTO  := '2400';
        GB_REC_ERRO.DESC_ERRO    := 'NIS/NIT/PIS/PASEP NÃO INFORMADO';
        GB_REC_ERRO.DESC_ERRO_BD := NULL;         
        GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO:' ||P_2400.ID_CAD_BENEFICIARIO;
        GB_REC_ERRO.FLG_TIPO_ERRO := 'W'; 
        SP_GERA_ERRO_PROCESSO;  */
    --VALIDA NIS INVÁLIDO
  
    --VALIDA NIS
    IF NOT FC_VALIDA_NIT(PC_2400.NUM_NIS) AND
       NOT FC_VALIDA_PISPASEP(PC_2400.NUM_NIS) THEN
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2400.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_VALIDA_NIT/FC_VALIDA_PIS';
      GB_REC_ERRO.TIPO_EVENTO       := '2400';
      GB_REC_ERRO.DESC_ERRO         := 'NIS/NIT/PIS/PASEP É INVÁLIDO E FOI CONSIDERADO COMO NULO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO:' ||
                                       P_2400.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --VALIDA NOME
    IF P_2400.BENEFICIARIO_NMBENEFIC IS NULL THEN
      P_2400.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2400.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_2400';
      GB_REC_ERRO.TIPO_EVENTO       := '2400';
      GB_REC_ERRO.DESC_ERRO         := 'NOME DO BENEFICIARIO NÃO PODE SER NULO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: ' ||
                                       P_2400.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    ELSIF LENGTH(PC_2400.NOM_BENEFICIARIO) > 70 THEN
      P_2400.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2400.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_2400';
      GB_REC_ERRO.TIPO_EVENTO       := '2400';
      GB_REC_ERRO.DESC_ERRO         := 'NOME DO BENEFICIARIO FOI ABREVIADO POR CONTER MAIS DE 70 CARACTERES';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'NOME: ' || PC_2400.NOM_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --RAÇA/COR NULA 
    IF P_2400.BENEFICIARIO_RACACOR IS NULL THEN
      P_2400.CTR_FLG_STATUS         := 'EV'; --ERRO NO EVENTO           
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2400.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_DEPARA_RACA_COR';
      GB_REC_ERRO.TIPO_EVENTO       := '2400';
      GB_REC_ERRO.DESC_ERRO         := 'RAÇA/COR NÃO IDENTIFICADA';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: ' ||
                                       P_2400.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --ESTADO CIVIL
    IF P_2400.BENEFICIARIO_ESTCIV IS NULL THEN
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2400.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_DEPARA_EST_CIV';
      GB_REC_ERRO.TIPO_EVENTO       := '2400';
      GB_REC_ERRO.DESC_ERRO         := 'ESTADO CIVIL NÃO IDENTIFICADO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: ' ||
                                       P_2400.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --VALIDA MUNICÍPIO DE NASCIMENTO
    --SE O PAÍS FOR BRASIL E O MUNICÍPIO DE NASCIMENTO FOR NULO, GERA ERRO NO EVENTO
    IF P_2400.DADOSNASC_PAISNASCTO = '105' AND
       P_2400.DADOSNASC_CODMUNIC IS NULL THEN
      P_2400.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2400.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_DEPARA_MUNICIP_IBGE';
      GB_REC_ERRO.TIPO_EVENTO       := '2400';
      GB_REC_ERRO.DESC_ERRO         := 'MUNICÍPIO DE NASCIMENTO NÃO PODE SER NULO PARA RESIDENTES NO BRASIL';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: ' ||
                                       P_2400.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --VALIDA PAÍS DE NASCIMENTO 
    IF P_2400.DADOSNASC_PAISNASCTO IS NULL THEN
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2400.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_DEPARA_PAIS_IBGE';
      GB_REC_ERRO.TIPO_EVENTO       := '2400';
      GB_REC_ERRO.DESC_ERRO         := 'CÓDIGO DO PAIS DE NASCIMENTO NÃO IDENTIFICADO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: ' ||
                                       P_2400.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --VALIDA NACIONALIDADE
    IF P_2400.DADOSNASC_PAISNAC IS NULL THEN
      P_2400.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2400.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_DEPARA_PAIS_NACION';
      GB_REC_ERRO.TIPO_EVENTO       := '2400';
      GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER NACIONALIDADE ESOCIAL';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: ' ||
                                       P_2400.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    /*       --VALIDA TIPO DE LOGRADOURO
     IF P_2400.ENDERECO_TPLOGRAD IS NULL THEN 
        P_2400.CTR_FLG_STATUS := 'EV'; 
        GB_REC_ERRO.COD_INS      := GB_COD_INS;
        GB_REC_ERRO.ID_CAD       := P_2400.ID_PK;
        GB_REC_ERRO.NOM_PROCESSO := 'FC_DEPARA_TIP_LOGRADOURO';
        GB_REC_ERRO.TIPO_EVENTO  := '2400';
        GB_REC_ERRO.DESC_ERRO    := 'TIPO DE LOGRADOURO NÃO IDENTIFICADO';
        GB_REC_ERRO.DESC_ERRO_BD := NULL;         
        GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: '||P_2400.ID_CAD_BENEFICIARIO;          
        GB_REC_ERRO.FLG_TIPO_ERRO := 'E';    
        SP_GERA_ERRO_PROCESSO; 
      END IF;
     
     --CÓDIGO DE MUNICÍPIO (DE PARA)
     IF P_2400.ENDERECO_CODMUNIC IS NULL THEN 
        P_2400.CTR_FLG_STATUS := 'EV';
        GB_REC_ERRO.COD_INS      :=  GB_COD_INS;
        GB_REC_ERRO.ID_CAD       :=  P_2400.ID_PK;
        GB_REC_ERRO.NOM_PROCESSO := 'FC_DEPARA_MUNICIP_IBGE';
        GB_REC_ERRO.TIPO_EVENTO  := '2400';
        GB_REC_ERRO.DESC_ERRO    := 'MUNICÍPIO DE ENDEREÇO NÃO IDENTIFICADO';
        GB_REC_ERRO.DESC_ERRO_BD := NULL;         
        GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: '||P_2400.ID_CAD_BENEFICIARIO;          
        SP_GERA_ERRO_PROCESSO;
      END IF;
      
     --PAÍS DE RESIDÊNCIA
     IF P_2400.ENDERECO_PAISRESID IS NULL THEN
        P_2400.CTR_FLG_STATUS := 'EV';
        GB_REC_ERRO.COD_INS      := GB_COD_INS;
        GB_REC_ERRO.ID_CAD       := P_2400.ID_PK;
        GB_REC_ERRO.NOM_PROCESSO := 'FC_DEPARA_PAIS_IBGE';
        GB_REC_ERRO.TIPO_EVENTO  := '2400';
        GB_REC_ERRO.DESC_ERRO    := 'ERRO AO OBTER O PAÍS IBGE PARA ENDERECO DE RESIDENCIA';
        GB_REC_ERRO.DESC_ERRO_BD := NULL;         
        GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: '||P_2400.ID_CAD_BENEFICIARIO;              
        SP_GERA_ERRO_PROCESSO;
    END IF;          */
  
    --VALIDA CAMPOS OBRIGATÓRIOS DE ENDEREÇO 
    IF P_2400.ENDERECO_PAISRESID = 105 THEN
      IF P_2400.ENDERECO_TPLOGRAD IS NULL OR
         P_2400.ENDERECO_DSCLOGRAD IS NULL OR
         P_2400.ENDERECO_NRLOGRAD IS NULL OR P_2400.ENDERECO_CEP IS NULL OR
         P_2400.ENDERECO_CODMUNIC IS NULL OR P_2400.ENDERECO_UF IS NULL THEN
        P_2400.CTR_FLG_STATUS := 'EV';
      
        GB_REC_ERRO.COD_INS           := GB_COD_INS;
        GB_REC_ERRO.ID_CAD            := P_2400.ID_PK;
        GB_REC_ERRO.NOM_PROCESSO      := 'SP_VALIDA_ENDERECO';
        GB_REC_ERRO.TIPO_EVENTO       := '2400';
        GB_REC_ERRO.DESC_ERRO         := 'ENDEREÇO INCOMPLETO PARA RESIDENTES NO BRASIL';
        GB_REC_ERRO.DESC_ERRO_BD      := NULL;
        GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO :' ||
                                         P_2400.ID_CAD_BENEFICIARIO;
        GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
        SP_GERA_ERRO_PROCESSO;
      END IF;
    
    ELSE
      IF P_2400.ENDERECO_PAISRESID IS NULL OR
         P_2400.ENDERECO_DSCLOGRAD IS NULL OR
         P_2400.ENDERECO_NRLOGRAD IS NULL OR P_2400.ENDERECO_NMCID IS NULL THEN
        P_2400.CTR_FLG_STATUS := 'EV';
      
        GB_REC_ERRO.COD_INS           := GB_COD_INS;
        GB_REC_ERRO.ID_CAD            := P_2400.ID_PK;
        GB_REC_ERRO.NOM_PROCESSO      := 'SP_VALIDA_ENDERECO';
        GB_REC_ERRO.TIPO_EVENTO       := '2400';
        GB_REC_ERRO.DESC_ERRO         := 'ENDEREÇO INCOMPLETO PARA RESIDENTE NO EXTERIOR';
        GB_REC_ERRO.DESC_ERRO_BD      := NULL;
        GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO :' ||
                                         P_2400.ID_CAD_BENEFICIARIO;
        GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
        SP_GERA_ERRO_PROCESSO;
      END IF;
    END IF;
  
    --VALIDA DATA DE INGRESSO
    IF P_2400.BENEFICIARIO_DTINICIO IS NULL THEN
      P_2400.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2400.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_2400';
      GB_REC_ERRO.TIPO_EVENTO       := '2400';
      GB_REC_ERRO.DESC_ERRO         := 'DATA DE INGRESSO DO BENEFICIÁRIO NÃO PODE SER NULA';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: ' ||
                                       P_2400.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --VALIDA SEXO BENEFICIÁRIO
    IF P_2400.BENEFICIARIO_SEXO IS NULL OR
       P_2400.BENEFICIARIO_SEXO NOT IN ('M', 'F') THEN
      P_2400.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2400.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_2400';
      GB_REC_ERRO.TIPO_EVENTO       := '2400';
      GB_REC_ERRO.DESC_ERRO         := 'COD SEXO DO BENEFICIÁRIO INVÁLIDO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: ' ||
                                       P_2400.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --VALIDA INCAPACIDADE FÍSICA 
    IF P_2400.BENEFICIARIO_INCFISMEN IS NULL OR
       P_2400.BENEFICIARIO_INCFISMEN NOT IN ('S', 'N') THEN
      P_2400.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2400.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_2400';
      GB_REC_ERRO.TIPO_EVENTO       := '2400';
      GB_REC_ERRO.DESC_ERRO         := 'INDICADOR DE INCAPACIDADE FÍSICA INVÁLIDO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: ' ||
                                       P_2400.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --SE A INCAPCIDADE FÍSICA = 'S', A DATA DEVE SER PREENCHIDA
    IF P_2400.BENEFICIARIO_INCFISMEN = 'S' AND
       P_2400.BENEFICIARIO_DTINCFISMEN IS NULL THEN
      P_2400.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2400.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_2400';
      GB_REC_ERRO.TIPO_EVENTO       := '2400';
      GB_REC_ERRO.DESC_ERRO         := 'DATA DA INCAPACIDADE FÍSICA OBRIGATÓRIA';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: ' ||
                                       P_2400.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --VALIDA DATA DE NASCIMENTO 
    IF P_2400.DADOSNASC_DTNASCTO IS NULL THEN
      P_2400.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2400.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_2400';
      GB_REC_ERRO.TIPO_EVENTO       := '2400';
      GB_REC_ERRO.DESC_ERRO         := 'DATA DE NASCIMENTO NÃO PODE SER NULA';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: ' ||
                                       P_2400.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --VALIDA NOME DA MÃE
    IF LENGTH(PC_2400.NOM_MAE) > 70 THEN
      P_2400.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2400.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_2400';
      GB_REC_ERRO.TIPO_EVENTO       := '2400';
      GB_REC_ERRO.DESC_ERRO         := 'NOME DA MÃE DO BENEFICIARIO FOI ABREVIADO POR CONTER MAIS DE 70 CARACTERES';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'NOME: ' || PC_2400.NOM_MAE;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --VALIDA NOME DO PAI
    IF LENGTH(PC_2400.NOM_PAI) > 70 THEN
      P_2400.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2400.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_2400';
      GB_REC_ERRO.TIPO_EVENTO       := '2400';
      GB_REC_ERRO.DESC_ERRO         := 'NOME DO PAI DO BENEFICIARIO FOI ABREVIADO POR CONTER MAIS DE 70 CARACTERES';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'NOME: ' || PC_2400.NOM_PAI;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
  END SP_VALIDA_2400;

  PROCEDURE SP_RESET_2400(P_2400 IN OUT ESOCIAL.TSOC_2400_BENEFICIARIO_INI%ROWTYPE) IS
  BEGIN
  
    P_2400.ID_PK := NULL;
    P_2400.SEQ_EVENTO            := NULL;
    P_2400.ID                    := NULL;
    P_2400.BENEFICIARIO_CPFBENEF := NULL;
    P_2400.ID_CAD_BENEFICIARIO   := NULL;
    P_2400.INDRETIF              := NULL;
    P_2400.NRRECIBO              := NULL;
    P_2400.TPAMB                 := NULL;
    P_2400.PROCEMI               := NULL;
    P_2400.VERPROC               := NULL;
    P_2400.BENEFICIARIO_NISBENEF    := NULL;
    P_2400.BENEFICIARIO_NMBENEFIC   := NULL;
    P_2400.BENEFICIARIO_DTINICIO    := NULL;
    P_2400.BENEFICIARIO_SEXO        := NULL;
    P_2400.BENEFICIARIO_RACACOR     := NULL;
    P_2400.BENEFICIARIO_ESTCIV      := NULL;
    P_2400.BENEFICIARIO_INCFISMEN   := NULL;
    P_2400.BENEFICIARIO_DTINCFISMEN := NULL;
    P_2400.DADOSNASC_DTNASCTO       := NULL;
    P_2400.DADOSNASC_CODMUNIC       := NULL;
    P_2400.DADOSNASC_UF             := NULL;
    P_2400.DADOSNASC_PAISNASCTO     := NULL;
    P_2400.DADOSNASC_PAISNAC        := NULL;
    P_2400.DADOSNASC_NMMAE          := NULL;
    P_2400.DADOSNASC_NMPAI          := NULL;
    P_2400.ENDERECO_TPLOGRAD        := NULL;
    P_2400.ENDERECO_DSCLOGRAD       := NULL;
    P_2400.ENDERECO_NRLOGRAD        := NULL;
    P_2400.ENDERECO_COMPLEMENTO     := NULL;
    P_2400.ENDERECO_BAIRRO          := NULL;
    P_2400.ENDERECO_CEP             := NULL;
    P_2400.ENDERECO_CODMUNIC        := NULL;
    P_2400.ENDERECO_UF              := NULL;
    P_2400.ENDERECO_PAISRESID       := NULL;
    P_2400.ENDERECO_NMCID           := NULL;
    P_2400.ENDERECO_CODPOSTAL       := NULL;
    P_2400.ID_ORIGEM        := NULL;
    P_2400.CTR_NUM_CPF              := NULL;
    P_2400.ID_LOTE             := NULL;  
    P_2400.CTR_DSC_EVENTO           := NULL;
    P_2400.CTR_FLG_STATUS           := NULL;
    P_2400.XML_ENVIO                := NULL;
    P_2400.FLG_VIGENCIA             := NULL;
    P_2400.DAT_ING                  := NULL;
    P_2400.DAT_ULT_ATU              := NULL;
    P_2400.NOM_USU_ULT_ATU          := NULL;
    P_2400.NOM_PRO_ULT_ATU          := NULL;   
  
  END SP_RESET_2400;

 FUNCTION FC_OBTEM_HBRUTO(P_COD_TIPO_BEN IN USER_IPESP.TB_CONCESSAO_BENEFICIO.COD_TIPO_BENEFICIO%TYPE,
                           P_DAT_INI_BEN  IN USER_IPESP.TB_BENEFICIARIO.DAT_INI_BEN%TYPE,
                           P_COD_ENTIDADE IN USER_IPESP.TB_CONCESSAO_BENEFICIO.COD_ENTIDADE%TYPE)
    RETURN NUMBER IS
    V_VAL_CREDITO  NUMBER(18,  4);
    V_PER_PROCESSO DATE;
  BEGIN
  
    --PARA BENEFÍCIOS ANTERIORES AO ESOCIAL USCAR O VALOR BRUTO PAGO NA FOLHA DO PERIODO EM ABERTO      
    IF P_DAT_INI_BEN <= GB_DAT_ESOCIAL THEN
     
      V_PER_PROCESSO := GB_FOLHA.PER_PROCESSO;
    ELSE
      --PARA BENEFICIOS CONCEDIDOS APÓS O ESOCIAL, UTILIZAR A PRIMEIRA FOLHA DO BENEFICIARIO
      V_PER_PROCESSO := FC_RET_PRIMEIRA_FOLHA;
    END IF;
    
    BEGIN 
       SELECT SUM(DECODE(DET.FLG_NATUREZA,
                                     'C',
                                     DET.VAL_RUBRICA,
                                     DET.VAL_RUBRICA * -1))
                         INTO V_VAL_CREDITO
                         FROM  USER_IPESP.TB_HDET_CALCULADO      DET
                       WHERE DET.COD_INS = GB_FOLHA.COD_INS
                         AND DET.TIP_PROCESSO = GB_FOLHA.TIP_PROCESSO
                         AND DET.PER_PROCESSO = V_PER_PROCESSO
                         AND DET.SEQ_PAGAMENTO = GB_FOLHA.SEQ_PAGAMENTO
                         AND DET.COD_BENEFICIO = GB_FOLHA.COD_BENEFICIO
                         AND DET.COD_IDE_CLI = GB_FOLHA.COD_IDE_CLI 
                         AND DET.DAT_INI_REF = DET.PER_PROCESSO
                         AND SUBSTR(DET.COD_FCRUBRICA, -2) NOT IN
                             ('50', '51', '55', '56', '57', '58', '59', '60')
                         AND DET.COD_FCRUBRICA NOT IN (7000600, 7003700)
                         AND EXISTS
                               (SELECT 1
                                  FROM USER_IPESP.TB_COMPOE_DET C
                                 WHERE C.COD_INS = GB_COD_INS
                                   AND C.COD_FCRUBRICA_COMPOSTA = DECODE(P_COD_TIPO_BEN,'M',99300,99100) 
                                   AND C.COD_FCRUBRICA_COMPOE =
                                       DET.COD_FCRUBRICA
                                   AND C.COD_ENTIDADE_COMPOSTA = P_COD_ENTIDADE
                                   AND (V_PER_PROCESSO BETWEEN
                                       C.DAT_INI_VIG AND C.DAT_FIM_VIG OR
                                       C.DAT_FIM_VIG IS NULL)
                                   AND ROWNUM = 1);     
    
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          V_VAL_CREDITO := 0;
        WHEN OTHERS THEN
          V_VAL_CREDITO := -1;
      END;
    
    --END IF;
  
    IF V_VAL_CREDITO < 0 THEN
      RETURN 0;
    ELSE
    
      RETURN ROUND(NVL(V_VAL_CREDITO, 0), 2);
    
    END IF;
  
  END FC_OBTEM_HBRUTO;

  --PROCESSA EVENTO 2410 BENEFÍCIO INICIAL, GERADO A PARTIR DO CADASTRO DE BENEFÍCIO
  PROCEDURE SP_2410(P_ID_CAD_BENEFICIO IN ESOCIAL.TSOC_CAD_BENEFICIO.ID_CAD_BENEFICIO%TYPE) IS
    V_2410 ESOCIAL.TSOC_2410_BENEFICIO_INI%ROWTYPE;
  BEGIN
  
    --COMPARA A DATA INÍCIO DE GERAÇÃO DO EVENTO COM A ANTERIOR PARA CONTROLAR SEQUENCIAL DE ID        
    IF GB_DAT_EVT_ATU = GB_DAT_EVT_ANT THEN
      GB_SEQ_CHAVE_ID := GB_SEQ_CHAVE_ID + 1;
    ELSE
      GB_SEQ_CHAVE_ID := 1;
    END IF;
  
    V_2410.COD_INS        := GB_COD_INS;
    V_2410.ID_PERIODO_DET := GB_ID_PERIODO_DET;
    --OBTÉM NÚMERO DE INSCRIÇÃO E TIPO DE INSCRIÇÃO DO EMPREGADOR 
    SP_RET_INSC_EMP;
    V_2410.TPINSC := GB_EMPREGADOR.TP_INSC;
    V_2410.NRINSC := GB_EMPREGADOR.NUM_CNPJ;
  
    FOR C_2410 IN GB_C_2410(P_ID_CAD_BENEFICIO)
    
     LOOP
      --COMPARA A DATA INÍCIO DE GERAÇÃO DO EVENTO COM A ANTERIOR PARA CONTROLAR SEQUENCIAL DE ID        
      IF GB_DAT_EVT_ATU = GB_DAT_EVT_ANT THEN
        GB_SEQ_CHAVE_ID := GB_SEQ_CHAVE_ID + 1;
      ELSE
        GB_SEQ_CHAVE_ID := 1;
      END IF;
      --ZERA VARIÁVEIS
      SP_RESET_2410(V_2410);
      --ID DE CADASTRO DO BENEFICIÁRIO
      V_2410.ID_CAD_BENEFICIO := C_2410.ID_CAD_BENEFICIO;
      --OBTÉM ID CHAVE      
      V_2410.ID_PK := ESOCIAL.ESOC_SEQ_ID_2410.NEXTVAL;
      --COD INS
      V_2410.COD_INS := GB_COD_INS;
    
      --TASK41563 LNUNES 27/08/2018 VERIFICANDO SE JÁ EXISTE UM ID DE EVENTO
      V_2410.ID := FC_RET_ID_EVENTO_EXISTENTE('2410',P_ID_CAD_BENEFICIO);
      IF V_2410.ID IS NULL THEN
        --GERA ID DO EVENTO
        V_2410.ID := FC_GERA_ID_EVENTO;
      END IF;    

      --OBTÉM SEQUÊNCIA DE CADASTRO DO EVENTO    
      V_2410.SEQ_EVENTO := FC_RET_SEQ_EVENTO_2410(V_2410);
      --OBTEM DADOS DE VERSIONAMENTO E AMBIENTE
      SP_RET_INFO_AMBIENTE(V_2410.TPAMB,V_2410.VERPROC,V_2410.PROCEMI);    
       --SE O PERIODO FOR DO TIPO A - Abertura. Retificação =1 
      --SE FOR R - Reabertura. Retificação = 2 
      IF GB_FLG_STATUS_PERIODO = 'A' 
       THEN V_2410.INDRETIF := 1;
       ELSE V_2410.INDRETIF :=2; 
      END IF; 
      --DADOS DO BENEFÍCIO 
      V_2410.BENEFICIARIO_CPFBENEF   := C_2410.NUM_CPF_BENEF;
      V_2410.BENEFICIARIO_MATRICULA  := C_2410.NUM_MATRICULA;
      V_2410.BENEFICIARIO_CNPJORIGEM := C_2410.NUM_CNPJ_ENTIDADE;
      --SE NÃO FOR UM CNPJ VÁLIDO, CONSIDERA NULO  
      IF FC_VALIDA_CNPJ(V_2410.BENEFICIARIO_CNPJORIGEM) THEN
        V_2410.BENEFICIARIO_CNPJORIGEM := C_2410.NUM_CNPJ_ENTIDADE;
      ELSE
        V_2410.BENEFICIARIO_CNPJORIGEM := NULL;
      END IF;
    
      V_2410.INFOBENINICIO_CADINI         := C_2410.FLG_DAT_BEN_ANTERIOR;
      V_2410.INFOBENINICIO_DTINIBENEFICIO := C_2410.DAT_INIBEN;
      V_2410.INFOBENINICIO_NRBENEFICIO    := C_2410.COD_BENEFICIO;
      V_2410.DADOSBENEFICIO_VRBENEFICIO   := C_2410.VAL_INI_BEN;
      V_2410.DADOSBENEFICIO_TPPLANRP      := C_2410.TIP_PLAN_SEG;
      --AGUARDANDO DEFINIÇÃO
      V_2410.DADOSBENEFICIO_DSC          := C_2410.DESC_ORIG_PAG_BEN;
      V_2410.DADOSBENEFICIO_INDDECJUD    := C_2410.FLG_BEN_JUD;
      V_2410.DADOSBENEFICIO_INDHOMOLOGTC := C_2410.FLG_BEN_TC;
    
      --DE PARA TIPO DE PENSÃO------------------------------------------------
      IF C_2410.COD_TIPO_BENEFICIO = 'M' THEN
      
        V_2410.INFOPENMORTE_TPPENMORTE    := FC_DEPARA_TPPENMORTE(C_2410);
        V_2410.INSTPENMORTE_CPFINST       := C_2410.NUM_CPF_INST;
        V_2410.INSTPENMORTE_DTINST        := C_2410.DAT_OBITO_INST;
        V_2410.INSTPENMORTE_INTAPOSENTADO := C_2410.FLG_INST_APOSENTADO;
      
      ELSE
      
        V_2410.INFOPENMORTE_TPPENMORTE    := NULL;
        V_2410.INSTPENMORTE_CPFINST       := NULL;
        V_2410.INSTPENMORTE_DTINST        := NULL;
        V_2410.INSTPENMORTE_INTAPOSENTADO := NULL;
      END IF;
      -------------------------------------------------------------------------      
      --AGUARDANDO DEFINIÇÃO
      V_2410.HOMOLOGTC_DTHOMOL := C_2410.DAT_HOMOLOG_TC;
      --AGUARDANDO DEFINIÇÃO
      V_2410.HOMOLOGTC_NRATOLEGAL := C_2410.NUM_ATO_LEGAL_TC;
    
      --DE PARA TIPO DE BENEFÍCIO SIGEPREV X ESOCIAL 
      V_2410.DADOSBENEFICIO_TPBENEFICIO := FC_DEPARA_TIP_BENEFICIO(C_2410);
    
      V_2410.ID_ORIGEM := GB_ID_ORIGEM;
      V_2410.CTR_NUM_CPF       := C_2410.NUM_CPF_BENEF;
      V_2410.CTR_DSC_EVENTO    := '2410';
      V_2410.CTR_FLG_STATUS    := 'AX'; --AGUARDANDO VALIDAÇÃO DO XML      
      V_2410.FLG_VIGENCIA      := 'A';
    
      --VALIDA O EVENTO, CASO ENCONTRE ERRO ATUALIZA CTR_FLG_STATUS PARA 'EV' ERRO DE VALIDAÇÃO
      --ENVIA A LINHA DA TABELA DE EVENTO RECEBIDA, E A LINHA DE CADASTRO DE BENEFICIÁRIO
      SP_VALIDA_2410(V_2410, C_2410);
    
      BEGIN
        SP_INC_2410(V_2410);
      EXCEPTION
        WHEN OTHERS THEN
          GB_REC_ERRO.COD_INS           := GB_COD_INS;
          GB_REC_ERRO.ID_CAD            := V_2410.ID_PK;
          GB_REC_ERRO.NOM_PROCESSO      := 'SP_INC_2410';
          GB_REC_ERRO.TIPO_EVENTO       := '2410';
          GB_REC_ERRO.DESC_ERRO         := 'ERRO NA INSERÇÃO DO EVENTO 2410';
          GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
          GB_REC_ERRO.DES_IDENTIFICADOR := 'COD IDE CLI:' ||
                                           C_2410.COD_IDE_CLI_BEN;
          SP_GERA_ERRO_PROCESSO;
      END;
    
    END LOOP;

  
  END SP_2410;

  PROCEDURE SP_RESET_2410(P_2410 IN OUT ESOCIAL.TSOC_2410_BENEFICIO_INI%ROWTYPE) IS
  BEGIN
  
    P_2410.ID_PK := NULL;
    --P_2410.COD_INS                      := NULL;
    P_2410.SEQ_EVENTO                := NULL;
    P_2410.ID                        := NULL;
    P_2410.BENEFICIARIO_CPFBENEF     := NULL;
    P_2410.INFOBENINICIO_NRBENEFICIO := NULL;
    P_2410.ID_CAD_BENEFICIO          := NULL;
    --P_2410.ID_PERIODO_DET               := NULL;
    P_2410.INDRETIF := NULL;
    P_2410.NRRECIBO := NULL;
    P_2410.TPAMB    := NULL;
    P_2410.PROCEMI  := NULL;
    P_2410.VERPROC  := NULL;
    --P_2410.TPINSC                       := NULL;
    --P_2410.NRINSC                       := NULL; 
    P_2410.BENEFICIARIO_MATRICULA       := NULL;
    P_2410.BENEFICIARIO_CNPJORIGEM      := NULL;
    P_2410.INFOBENINICIO_CADINI         := NULL;
    P_2410.INFOBENINICIO_DTINIBENEFICIO := NULL;
    P_2410.DADOSBENEFICIO_TPBENEFICIO   := NULL;
    P_2410.DADOSBENEFICIO_VRBENEFICIO   := NULL;
    P_2410.DADOSBENEFICIO_TPPLANRP      := NULL;
    P_2410.DADOSBENEFICIO_DSC           := NULL;
    P_2410.DADOSBENEFICIO_INDDECJUD     := NULL;
    P_2410.DADOSBENEFICIO_INDHOMOLOGTC  := NULL;
    P_2410.INFOPENMORTE_TPPENMORTE      := NULL;
    P_2410.INSTPENMORTE_CPFINST         := NULL;
    P_2410.INSTPENMORTE_DTINST          := NULL;
    P_2410.INSTPENMORTE_INTAPOSENTADO   := NULL;
    P_2410.HOMOLOGTC_DTHOMOL            := NULL;
    P_2410.HOMOLOGTC_NRATOLEGAL         := NULL;
    P_2410.ID_ORIGEM            := NULL;
    P_2410.CTR_NUM_CPF                  := NULL;
    P_2410.ID_LOTE                 := NULL; 
    P_2410.CTR_DSC_EVENTO               := NULL;
    P_2410.CTR_FLG_STATUS               := NULL;
    P_2410.XML_ENVIO                    := NULL;
    P_2410.FLG_VIGENCIA                 := NULL;
    P_2410.DAT_ING                      := NULL;
    P_2410.DAT_ULT_ATU                  := NULL;
    P_2410.NOM_USU_ULT_ATU              := NULL;
    P_2410.NOM_PRO_ULT_ATU              := NULL;

  END SP_RESET_2410;

  --RETORNA O SEQUENCIAL DO EVENTO 2410. 
  FUNCTION FC_RET_SEQ_EVENTO_2410(P_SEQ_EVT IN ESOCIAL.TSOC_2410_BENEFICIO_INI%ROWTYPE)
    RETURN ESOCIAL.TSOC_2410_BENEFICIO_INI.SEQ_EVENTO%TYPE IS
    V_SEQ_EVENTO ESOCIAL.TSOC_2410_BENEFICIO_INI.SEQ_EVENTO%TYPE;
  BEGIN
  
    SELECT NVL(MAX(BI.SEQ_EVENTO), 0) + 1
      INTO V_SEQ_EVENTO
      FROM ESOCIAL.TSOC_2410_BENEFICIO_INI BI
     WHERE BI.COD_INS = P_SEQ_EVT.COD_INS
       AND BI.ID = P_SEQ_EVT.ID;
  
    RETURN V_SEQ_EVENTO;
  
  END FC_RET_SEQ_EVENTO_2410;

  --FAZ INCLUSÃO NA TABELA DE EVENTO 2410
  PROCEDURE SP_INC_2410(P_2410 IN ESOCIAL.TSOC_2410_BENEFICIO_INI%ROWTYPE) IS
  BEGIN
  
    INSERT INTO ESOCIAL.TSOC_2410_BENEFICIO_INI
      (ID_PK,
       COD_INS,
       SEQ_EVENTO,
       ID,
       BENEFICIARIO_CPFBENEF,
       INFOBENINICIO_NRBENEFICIO,
       ID_CAD_BENEFICIO,
       ID_PERIODO_DET,
       INDRETIF,
       NRRECIBO,
       TPAMB,
       PROCEMI,
       VERPROC,
       TPINSC,
       NRINSC,
       BENEFICIARIO_MATRICULA,
       BENEFICIARIO_CNPJORIGEM,
       INFOBENINICIO_CADINI,
       INFOBENINICIO_DTINIBENEFICIO,
       DADOSBENEFICIO_TPBENEFICIO,
       DADOSBENEFICIO_VRBENEFICIO,
       DADOSBENEFICIO_TPPLANRP,
       DADOSBENEFICIO_DSC,
       DADOSBENEFICIO_INDDECJUD,
       DADOSBENEFICIO_INDHOMOLOGTC,
       INFOPENMORTE_TPPENMORTE,
       INSTPENMORTE_CPFINST,
       INSTPENMORTE_DTINST,
       INSTPENMORTE_INTAPOSENTADO,
       HOMOLOGTC_DTHOMOL,
       HOMOLOGTC_NRATOLEGAL,
       ID_ORIGEM,
       CTR_NUM_CPF,
       ID_LOTE,     
       CTR_DSC_EVENTO,
       CTR_FLG_STATUS,
       XML_ENVIO,
       FLG_VIGENCIA,
       DAT_ING,
       DAT_ULT_ATU,
       NOM_USU_ULT_ATU,
       NOM_PRO_ULT_ATU
      )
    VALUES
      (P_2410.ID_PK,
       P_2410.COD_INS,
       P_2410.SEQ_EVENTO,
       P_2410.ID,
       P_2410.BENEFICIARIO_CPFBENEF,
       P_2410.INFOBENINICIO_NRBENEFICIO,
       P_2410.ID_CAD_BENEFICIO,
       P_2410.ID_PERIODO_DET,
       P_2410.INDRETIF,
       P_2410.NRRECIBO,
       P_2410.TPAMB,
       P_2410.PROCEMI,
       P_2410.VERPROC,
       P_2410.TPINSC,
       P_2410.NRINSC,
       P_2410.BENEFICIARIO_MATRICULA,
       P_2410.BENEFICIARIO_CNPJORIGEM,
       P_2410.INFOBENINICIO_CADINI,
       P_2410.INFOBENINICIO_DTINIBENEFICIO,
       P_2410.DADOSBENEFICIO_TPBENEFICIO,
       P_2410.DADOSBENEFICIO_VRBENEFICIO,
       P_2410.DADOSBENEFICIO_TPPLANRP,
       P_2410.DADOSBENEFICIO_DSC,
       P_2410.DADOSBENEFICIO_INDDECJUD,
       P_2410.DADOSBENEFICIO_INDHOMOLOGTC,
       P_2410.INFOPENMORTE_TPPENMORTE,
       P_2410.INSTPENMORTE_CPFINST,
       P_2410.INSTPENMORTE_DTINST,
       P_2410.INSTPENMORTE_INTAPOSENTADO,
       P_2410.HOMOLOGTC_DTHOMOL,
       P_2410.HOMOLOGTC_NRATOLEGAL,
       P_2410.ID_ORIGEM,
       P_2410.CTR_NUM_CPF,
       P_2410.ID_LOTE,
       P_2410.CTR_DSC_EVENTO,
       P_2410.CTR_FLG_STATUS,
       P_2410.XML_ENVIO,
       P_2410.FLG_VIGENCIA,
       SYSDATE,
       SYSDATE,
       'ESOCIAL',
       'SP_INC_2410');
  
    COMMIT;
  
  END SP_INC_2410;

  FUNCTION FC_DEPARA_TIP_BENEFICIO(P_CUR_2410 IN GB_C_2410%ROWTYPE)
    RETURN ESOCIAL.TSOC_2410_BENEFICIO_INI.DADOSBENEFICIO_TPBENEFICIO%TYPE IS
    V_PARIDADE CHAR;
    V_PER_ULT_PROCESSO USER_IPESP.TB_BENEFICIARIO.PER_ULT_PROCESSO%TYPE;
  BEGIN
  
    V_PER_ULT_PROCESSO :=  FC_RET_ULTIMA_FOLHA(P_CUR_2410.COD_INS,
                                               P_CUR_2410.COD_IDE_CLI_BEN,
                                               P_CUR_2410.COD_BENEFICIO
                                               );
   
    --VERIFICA SE O BENEFÍCIO POSSUI PARIDADE 
    V_PARIDADE := FC_PARIDADE_FOLHA(V_PER_ULT_PROCESSO);
       
  
    -- 3.4.1  CRITÉRIO DE BUSCA COLUNA TIP_BENEFICIO ¿ BENEFÍCIOS CONCEDIDOS ANTES DO ESOCIAL
    IF P_CUR_2410.FLG_DAT_BEN_ANTERIOR = 'S' THEN
    
      /* -CÓDIGO 0901 - APOSENTADORIA SEM PARIDADE CONCEDIDA ANTES DA OBRIGATORIEDADE DE ENVIO DOS EVENTOS NÃO PERIÓDICOS PARA ENTES PÚBLICOS NO ESOCIAL
      A)  CONSIDERAR BENEFÍCIO DE APOSENTADORIA DIFERENTE DE INVALIDEZ. ACESSAR A TB_CONCESSAO_BENEFICIO ONDE COD_TIPO_BENEFICIO <> M E I;
      B)  APENAS BENEFÍCIO DE APOSENTADORIA CIVIL. TB_CONCESSAO_BENEFICIO ONDE COD_ENTIDADE <> 5;
      C)  E QUE POSSUA A RUBRICA 1026 (TRUNC(COD_FCRUBRICA/100)) PRESENTE NA PRIMEIRA FOLHA DE PAGAMENTO RECEBIDA PELO SIGEPREV.*/
    
      IF P_CUR_2410.COD_TIPO_BENEFICIO NOT IN ('M', 'I') AND
         P_CUR_2410.COD_ENTIDADE <> '5'
        --VERIFICA SE O BENEFÍCIO POSSUI PARIDADE NO PERIODO DA PRIMEIRA FOLHA
         AND V_PARIDADE = 0 THEN
        RETURN '0901';
      
        /*  ? CÓDIGO 0902 - APOSENTADORIA COM PARIDADE CONCEDIDA ANTES DA OBRIGATORIEDADE DE ENVIO DOS EVENTOS NÃO PERIÓDICOS PARA ENTES PÚBLICOS NO ESOCIAL
        A)  CONSIDERAR BENEFÍCIO DE APOSENTADORIA DIFERENTE DE INVALIDEZ. ACESSAR A TB_CONCESSAO_BENEFICIO ONDE COD_TIPO_BENEFICIO <> M E I;
        B)  APENAS BENEFÍCIO DE APOSENTADORIA CIVIL. TB_CONCESSAO_BENEFICIO ONDE COD_ENTIDADE <> 5;
        C)  E QUE NÃO POSSUA A RUBRICA 1026 (TRUNC(COD_FCRUBRICA/100)) PRESENTE NA PRIMEIRA FOLHA DE PAGAMENTO RECEBIDA PELO SIGEPREV.*/
      
      ELSIF P_CUR_2410.COD_TIPO_BENEFICIO NOT IN ('M', 'I') AND
            P_CUR_2410.COD_ENTIDADE <> '5' AND V_PARIDADE = 1 THEN
        RETURN '0902';
      
        /*? CÓDIGO 0903 - APOSENTADORIA POR INVALIDEZ COM PARIDADE CONCEDIDA ANTES DA OBRIGATORIEDADE DE ENVIO DOS EVENTOS NÃO PERIÓDICOS PARA ENTES PÚBLICOS NO ESOCIAL
        A)  CONSIDERAR BENEFÍCIO DE APOSENTADORIA DIFERENTE DE INVALIDEZ. ACESSAR A TB_CONCESSAO_BENEFICIO ONDE COD_TIPO_BENEFICIO = I;
        B)  APENAS BENEFÍCIO DE APOSENTADORIA CIVIL. TB_CONCESSAO_BENEFICIO ONDE COD_ENTIDADE <> 5;
        C)  E QUE NÃO POSSUA A RUBRICA 1026 (TRUNC(COD_FCRUBRICA/100)) PRESENTE NA PRIMEIRA FOLHA DE PAGAMENTO RECEBIDA PELO SIGEPREV.*/
      
      ELSIF P_CUR_2410.COD_TIPO_BENEFICIO = 'I' AND
            P_CUR_2410.COD_ENTIDADE <> 5 AND V_PARIDADE = 1 THEN
        RETURN '0903';
      
        /*? CÓDIGO 0904 - APOSENTADORIA POR INVALIDEZ SEM PARIDADE CONCEDIDA ANTES DA OBRIGATORIEDADE DE ENVIO DOS EVENTOS NÃO PERIÓDICOS PARA ENTES PÚBLICOS NO ESOCIAL
        A)  CONSIDERAR BENEFÍCIO DE APOSENTADORIA DIFERENTE DE INVALIDEZ. ACESSAR A TB_CONCESSAO_BENEFICIO ONDE COD_TIPO_BENEFICIO = I;
        B)  E QUE POSSUA A RUBRICA 1026 (TRUNC(COD_FCRUBRICA/100)) PRESENTE NA PRIMEIRA FOLHA DE PAGAMENTO RECEBIDA PELO SIGEPREV.*/
      
      ELSIF P_CUR_2410.COD_TIPO_BENEFICIO = 'I' AND
            P_CUR_2410.COD_ENTIDADE <> 5 AND V_PARIDADE = 0 THEN
        RETURN '0904';
      
        /*? CÓDIGO 0905 - TRANSFERÊNCIA PARA RESERVA CONCEDIDA ANTES DA OBRIGATORIEDADE DE ENVIO DOS EVENTOS NÃO PERIÓDICOS PARA ENTES PÚBLICOS NO ESOCIAL
        A)  APENAS BENEFÍCIO DE INATIVIDADE MILITAR. ACESSAR A TABELA TB_CONCESSAO_BENEFICIO ONDE COD_ENTIDADE = 5;
        B)  CONSIDERAR BENEFÍCIO DE INATIVIDADE COM RESERVA: 
        A.  IDENTIFICAR O TIPO DE BENEFÍCIO. TB_CONCESSAO_BENEFICIO ONDE COD_TIPO_BENEFICIO = RAP, REO, V OU G;
        B.  SE COD_TIPO_BENEFICIO = V OU G OS CARGOS DEVEM SER COD_CARGO(CONCESSAO) = 3885, 3979, 3980, 3981, 3982, 3983, 3984, 3985, 3986, 3987, 3988, 3989 OU 3990.*/
      
      ELSIF P_CUR_2410.COD_TIPO_BENEFICIO IN ('RAP', 'REO', 'V', 'G') AND
            P_CUR_2410.COD_ENTIDADE = 5 THEN
        RETURN '0905';
      
        /*? CÓDIGO 0906 - REFORMA CONCEDIDA ANTES DA OBRIGATORIEDADE DE ENVIO DOS EVENTOS NÃO PERIÓDICOS PARA ENTES PÚBLICOS NO ESOCIAL CONSIDERAR BENEFÍCIO DE INATIVIDADE COM RESERVA: 
        A)  APENAS BENEFÍCIO DE INATIVIDADE MILITAR. ACESSAR A TABELA TB_CONCESSAO_BENEFICIO ONDE COD_ENTIDADE = 5;
        B)  CONSIDERAR BENEFÍCIO DE INATIVIDADE COM REFORMA: 
        A.  IDENTIFICAR O TIPO DE BENEFÍCIO. TB_CONCESSAO_BENEFICIO ONDE COD_TIPO_BENEFICIO = REFEO E REFAP, V OU G;
        B.  SE COD_TIPO_BENEFICIO = V OU G OS CARGOS DEVEM SER COD_CARGO(CONCESSAO) = 3991, 3992, 3995, 3996, 3997 OU 3998.*/
      
        --AGUARDANDO DEFINIÇÃO DE CARGOS
      ELSIF (P_CUR_2410.COD_TIPO_BENEFICIO IN ('REFEO', 'REFAP') OR
            (P_CUR_2410.COD_TIPO_BENEFICIO IN ('V', 'G') AND
            P_CUR_2410.COD_CARGO IN (3991, 3992, 3995, 3996, 3997, 3998))) AND
            P_CUR_2410.COD_ENTIDADE = 5 THEN
        RETURN '0906';
      
        /*? CÓDIGO 0907 - PENSÃO POR MORTE COM PARIDADE CONCEDIDA ANTES DA OBRIGATORIEDADE DE ENVIO DOS EVENTOS NÃO PERIÓDICOS PARA ENTES PÚBLICOS NO ESOCIAL
        A)  CONSIDERAR BENEFÍCIO DE PENSÃO. ACESSAR A TB_CONCESSAO_BENEFICIO ONDE COD_TIPO_BENEFICIO = M;
        B)  E QUE NÃO POSSUA AS RUBRICAS 1031 OU 1026 (TRUNC(COD_FCRUBRICA/100)) PRESENTE NA PRIMEIRA FOLHA DE PAGAMENTO RECEBIDA PELO SIGEPREV.*/
      
      ELSIF P_CUR_2410.COD_TIPO_BENEFICIO = 'M' AND V_PARIDADE = 1 THEN
        RETURN '0907';
      
        /*? CÓDIGO 0908 - PENSÃO POR MORTE SEM PARIDADE CONCEDIDA ANTES DA OBRIGATORIEDADE DE ENVIO DOS EVENTOS NÃO PERIÓDICOS PARA ENTES PÚBLICOS NO ESOCIAL
        A)  CONSIDERAR BENEFÍCIO DE PENSÃO. ACESSAR A TB_CONCESSAO_BENEFICIO ONDE COD_TIPO_BENEFICIO = M;
        B)  E QUE POSSUA AS RUBRICAS 1031 OU 1026 (TRUNC(COD_FCRUBRICA/100)) PRESENTE NA PRIMEIRA FOLHA DE PAGAMENTO RECEBIDA PELO SIGEPREV.*/
      
      ELSIF P_CUR_2410.COD_TIPO_BENEFICIO = 'M' AND V_PARIDADE = 0 THEN
        RETURN '0908';
      
        /*? CÓDIGO 0909 - OUTROS BENEFÍCIOS PREVIDENCIÁRIOS CONCEDIDOS ANTES DA OBRIGATORIEDADE DE ENVIO DOS EVENTOS NÃO PERIÓDICOS PARA ENTES PÚBLICOS NO ESOCIAL
        A)  QUALQUER BENEFÍCIO QUE NÃO SE ENQUADRAR NOS ITENS ACIMA, DEVERÃO SER ENVIADOS COM O CÓDIGO 0909.*/
      
      ELSE
        RETURN '0909';
      END IF;
    
    ELSE
    
      --BENEFÍCIOS CONCEDIDOS APÓS A OBRIGATORIEDADE DO ESOCIAL 
    
      /*? APOSENTADORIA CIVIL 
      A)  IDENTIFICAR O CAMPO PAP_COD_BEN NA TABELA SIMPAP ATRAVÉS DO RELACIONAMENTO DOS CAMPOS PAP_COD_ADM_TRA = COD_BENEFICIO, ONDE O CAMPO PAP_IND_ACE_SER = S;
      B)  COM O PAP_COD_BEN IDENTIFICADO, ACESSAR A TABELA BENCAL RELACIONANDO OS CAMPOS CAL_COD_BEN = PAP_COD_BEN PARA IDENTIFICA O CAMPO CAL_SEQ_BEN.
      C)  UTILIZAR O CAMPO CAL_SEQ_BEN PARA IDENTIFICAR O CÓDIGO DO TIPO DE BENEFÍCIO NO DE PARA, CONFORME ITEM 4.1.*/
    
      --IF P_CUR_2410.COD_TIPO_BENEFICIO <> 'M' AND P_CUR_2410.COD_ENTIDADE <> 5 
      --RETORNA O TIPO DE BENEFÍCIO ESOCIAL PARA BENEFÍCIOS DE APOSENTADORIA CIVIL
      --THEN RETURN FC_DEPARA_TIP_BEN_APO_CIV;   
    
      RETURN FC_DEPARA_TIP_BEN_POS_ESOC(P_CUR_2410); -- FC_RET_COD_CAL_PAP_SIGEPREV
    
      /*? INATIVIDADE MILITAR
      A)  IDENTIFICAR O CAMPO PAP_COD_BEN NA TABELA SIMPAP ATRAVÉS DO RELACIONAMENTO DOS CAMPOS PAP_COD_ADM_TRA = COD_BENEFICIO, ONDE O CAMPO PAP_IND_ACE_SER = S;
      B)  UTILIZAR O CAMPO PAP_COD_BEN PARA IDENTIFICAR O CÓDIGO DO TIPO DE BENEFÍCIO NO DE PARA, CONFORME ITEM 4.1.*/
    
      --END IF;
    
      /*? PENSÃO CIVIL 
      
      
      
      
      
      
      ? PENSÃO MILITAR*/
    
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
    
  END FC_DEPARA_TIP_BENEFICIO;

  --DE PARA TIPO DE BENEFICIO ESOCIAL, PARA BENEFÍCIOS 
  --CONCEDIDOS APÓS O ESOCIAL 
  --BUSCA O SEQ_BEN OU COD_PAP, PARA BUSCAR O CÓDIGO
  --ESOCIAL NO DE PARA CÓDIGO 7 
  FUNCTION FC_DEPARA_TIP_BEN_POS_ESOC(P_CUR_2410 IN GB_C_2410%ROWTYPE)
    RETURN ESOCIAL.TSOC_2410_BENEFICIO_INI.DADOSBENEFICIO_TPBENEFICIO%TYPE IS
    V_COD_CAL_PAP NUMBER;
  BEGIN
    V_COD_CAL_PAP := FC_RET_COD_CAL_PAP_SIGEPREV(P_CUR_2410);
  
    SELECT CSE.COD_ESOCIAL
      INTO V_COD_CAL_PAP
      FROM ESOCIAL.TSOC_PAR_SIGEPREV_ESOCIAL CSE
     WHERE CSE.COD_TIPO = 7
       AND CSE.COD_SIGEPREV = V_COD_CAL_PAP;
  
    RETURN V_COD_CAL_PAP;
  
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
    
  END FC_DEPARA_TIP_BEN_POS_ESOC;

  --VERIFICA SE O BENEFÍCIO POSSUI PARIDADE 
  FUNCTION FC_PARIDADE_FOLHA(P_PER_ULT_PROCESSO IN USER_IPESP.TB_BENEFICIARIO.PER_ULT_PROCESSO%TYPE) RETURN NUMBER IS
    V_PARIDADE NUMBER;
  BEGIN

    SELECT 0
      INTO V_PARIDADE
      FROM USER_IPESP.TB_HDET_CALCULADO HC
     WHERE HC.COD_INS = GB_FOLHA.COD_INS
       AND HC.TIP_PROCESSO = GB_FOLHA.TIP_PROCESSO
       AND HC.SEQ_PAGAMENTO = GB_FOLHA.SEQ_PAGAMENTO
       AND HC.COD_BENEFICIO = GB_FOLHA.COD_BENEFICIO
       AND HC.COD_IDE_CLI = GB_FOLHA.COD_IDE_CLI
       AND HC.PER_PROCESSO = P_PER_ULT_PROCESSO --FC_RET_PRIMEIRA_FOLHA--GB_FOLHA.PER_PROCESSO 
       AND TRUNC(HC.COD_FCRUBRICA / 100) IN (1026, 1031)
       AND ROWNUM = 1;
  
    RETURN V_PARIDADE;
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN 1;
    
  END FC_PARIDADE_FOLHA;

  --RETORNA CAL_SEQ_BEN EM APOSENTADORIA CIVIL, OU PAP_COD_BEN EM CASO DE OUTROS TIPOS DE BENEFÍCIO
  --DE APOSENTADORIA CIVIL NO ESOCIAL 
  FUNCTION FC_RET_COD_CAL_PAP_SIGEPREV(P_CUR_2410 IN GB_C_2410%ROWTYPE)
    RETURN NUMBER IS
    V_COD_PAP_CAL NUMBER;
  
  BEGIN
  
    /*?  APOSENTADORIA CIVIL 
    A)  IDENTIFICAR O CAMPO PAP_COD_BEN NA TABELA SIMPAP ATRAVÉS DO RELACIONAMENTO DOS CAMPOS PAP_COD_ADM_TRA = COD_BENEFICIO, ONDE O CAMPO PAP_IND_ACE_SER = S;
    B)  COM O PAP_COD_BEN IDENTIFICADO, ACESSAR A TABELA BENCAL RELACIONANDO OS CAMPOS CAL_COD_BEN = PAP_COD_BEN PARA IDENTIFICA O CAMPO CAL_SEQ_BEN.
    C)  UTILIZAR O CAMPO CAL_SEQ_BEN PARA IDENTIFICAR O CÓDIGO DO TIPO DE BENEFÍCIO NO DE PARA, CONFORME ITEM 4.1.*/
  
    IF P_CUR_2410.COD_TIPO_BENEFICIO <> 'M' AND
       P_CUR_2410.COD_ENTIDADE <> 5 THEN
    
      SELECT CAL.CAL_SEQ_BEN
        INTO V_COD_PAP_CAL
        FROM USER_IPESP.SIMPAP PAP, USER_IPESP.BENCAL CAL
       WHERE PAP.PAP_COD_ADM_TRA = '00' || P_CUR_2410.COD_BENEFICIO
         AND PAP.PAP_COD_INS = GB_COD_INS
         AND PAP.PAP_IND_ACE_SER = 'S'
         AND CAL.CAL_COD_BEN = PAP.PAP_COD_BEN
         AND CAL.CAL_COD_INS = PAP.PAP_COD_INS;
    
      /*? INATIVIDADE MILITAR/PENSÃO CIVIL/PENSÃO MILITAR 
      A)  ACESSAR A SIMPAP COM O COD_BENEFICIO E COD_IDE_CLI;
      B)  IDENTIFICAR O CAMPO PAP_COD_BEN NA TABELA SIMPAP ATRAVÉS DO RELACIONAMENTO DOS CAMPOS PAP_COD_ADM_TRA = COD_BENEFICIO, ONDE O CAMPO PAP_IND_ACE_SER = S;
      C)  UTILIZAR O CAMPO PAP_COD_BEN PARA IDENTIFICAR O CÓDIGO DO TIPO DE BENEFÍCIO NO DE PARA, CONFORME ITEM 4.1.*/
    
    ELSE
    
      SELECT PAP.PAP_COD_BEN
        INTO V_COD_PAP_CAL
        FROM USER_IPESP.SIMPAP PAP
       WHERE PAP.PAP_COD_ADM_TRA = '00' || P_CUR_2410.COD_BENEFICIO
         AND PAP.PAP_COD_INS = GB_COD_INS
         AND PAP.PAP_IND_ACE_SER = 'S';
    
    END IF;
  
    RETURN V_COD_PAP_CAL;
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
    
  END FC_RET_COD_CAL_PAP_SIGEPREV;

  --RETORNA O TIPO DE BENEFICIO ESOCIAL   
  FUNCTION FC_DEPARA_TIPBEN(P_CUR_2410 IN GB_C_2410%ROWTYPE)
    RETURN ESOCIAL.TSOC_2410_BENEFICIO_INI.DADOSBENEFICIO_TPBENEFICIO%TYPE IS
    V_TIP_BEN_ESOC ESOCIAL.TSOC_2410_BENEFICIO_INI.DADOSBENEFICIO_TPBENEFICIO%TYPE;
    V_COD_PAP_CAL  NUMBER;
  
  BEGIN
  
    V_COD_PAP_CAL := FC_DEPARA_TIP_BENEFICIO(P_CUR_2410);
  
    SELECT COD_ESOCIAL
      INTO V_TIP_BEN_ESOC
      FROM ESOCIAL.TSOC_PAR_SIGEPREV_ESOCIAL CSE
     WHERE CSE.COD_INS = GB_COD_INS
       AND CSE.COD_TIPO = 7
       AND CSE.COD_SIGEPREV = V_COD_PAP_CAL;
  
    RETURN V_TIP_BEN_ESOC;
  END FC_DEPARA_TIPBEN;

  --RECEBE O PARENTESCO OU PERFIL DO BENEFICIÁRIO, PARA RETORNAR O TIPO DE PENSÃO
  --POR MORTE DO ESOCIAL 
  FUNCTION FC_DEPARA_TPPENMORTE(P_CUR_2410 IN GB_C_2410%ROWTYPE)
    RETURN ESOCIAL.TSOC_2410_BENEFICIO_INI.INFOPENMORTE_TPPENMORTE%TYPE IS
    V_TIP_PEN ESOCIAL.TSOC_2410_BENEFICIO_INI.INFOPENMORTE_TPPENMORTE%TYPE;
  BEGIN
  
    --VERIFICA SE É CONCESSAO SIGEPREV OU LEGADO                
    IF P_CUR_2410.COD_BENEFICIO >= 60000000 THEN
      --SE FOR SIGEPREV É UM CÓDIGO DO PERFIL 
      SELECT COD_ESOCIAL
        INTO V_TIP_PEN
        FROM ESOCIAL.TSOC_PAR_SIGEPREV_ESOCIAL CSE
       WHERE CSE.COD_INS = GB_COD_INS
         AND CSE.COD_TIPO = 8 --DE PARA DE PERFIL PARA TIPO DE PENSÃO
         AND CSE.COD_SIGEPREV = P_CUR_2410.COD_TIPO_PENSAO;
      --SE FOR LEGADO É UM CÓDIGO DO PARENTESCO   
    ELSE
      SELECT COD_ESOCIAL
        INTO V_TIP_PEN
        FROM ESOCIAL.TSOC_PAR_SIGEPREV_ESOCIAL CSE
       WHERE CSE.COD_INS = GB_COD_INS
         AND CSE.COD_TIPO = 9 --DE PARA DE PARENTESCO PARA TIPO DE PENSAO
         AND CSE.COD_SIGEPREV = P_CUR_2410.COD_TIPO_PENSAO;
    END IF;
  
    RETURN V_TIP_PEN;
  
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
    
  END FC_DEPARA_TPPENMORTE;

  PROCEDURE SP_VALIDA_2410(P_2410     IN OUT ESOCIAL.TSOC_2410_BENEFICIO_INI%ROWTYPE,
                           P_CUR_2410 IN GB_C_2410%ROWTYPE) IS
  BEGIN
  
    --VERIFICA SE O CNPJ DA ENTIDADE É NULA
    IF P_2410.BENEFICIARIO_CNPJORIGEM IS NULL THEN
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2410.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_VALIDA_CNPJ';
      GB_REC_ERRO.TIPO_EVENTO       := '2410';
      GB_REC_ERRO.DESC_ERRO         := 'CNPJ DA ENTIDADE NÃO INFORMADO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'NUM CNPJ' ||
                                       P_2410.BENEFICIARIO_CNPJORIGEM;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
      SP_GERA_ERRO_PROCESSO;
      --VERIFICA SE O CNPJ É INVALIDO
    ELSIF NOT FC_VALIDA_CNPJ(P_2410.BENEFICIARIO_CNPJORIGEM) THEN
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2410.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_VALIDA_CNPJ';
      GB_REC_ERRO.TIPO_EVENTO       := '2410';
      GB_REC_ERRO.DESC_ERRO         := 'CNPJ INVÁLIDO, FOI CONSIDERADO NULO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'NUM CNPJ:' ||
                                       P_CUR_2410.NUM_CNPJ_ENTIDADE;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --VALIDA TIPO DE BENEFÍCIO ESOCIAL
    IF P_2410.DADOSBENEFICIO_TPBENEFICIO IS NULL THEN
      P_2410.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2410.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_DEPARA_TIP_BENEFICIO';
      GB_REC_ERRO.TIPO_EVENTO       := '2410';
      GB_REC_ERRO.DESC_ERRO         := 'TIPO DE BENEFÍCIO ESOCIAL INVÁLIDO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID CAD BENEFICIO' ||
                                       P_CUR_2410.ID_CAD_BENEFICIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --VALIDA VALOR INICIAL DO BENEFÍCIO 
    IF P_2410.DADOSBENEFICIO_VRBENEFICIO IS NULL OR
       P_2410.DADOSBENEFICIO_VRBENEFICIO = 0 THEN
      P_2410.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2410.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_OBTEM_HBRUTO';
      GB_REC_ERRO.TIPO_EVENTO       := '2410';
      GB_REC_ERRO.DESC_ERRO         := 'VALOR DO BENEFÍCIO NÃO PODE SER NULO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID CAD BENEFICIO' ||
                                       P_CUR_2410.ID_CAD_BENEFICIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --VALIDA INDICADOR DE BENEFÍCIO POR ORDEM JUDICIAL
    IF P_2410.DADOSBENEFICIO_INDDECJUD IS NULL THEN
      P_2410.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2410.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_FLG_BEN_JUD';
      GB_REC_ERRO.TIPO_EVENTO       := '2410';
      GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER INDICADOR DE BENEFICIO ORDEM JUD.';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID CAD BENEFICIO' ||
                                       P_CUR_2410.ID_CAD_BENEFICIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --VALIDAÇÕES FEITAS PARA BENEFÍCIOS DE PENSÃO
    IF P_CUR_2410.COD_TIPO_BENEFICIO = 'M' THEN
      --VALIDA TIPO DE PENSÃO POR MORTE 
      IF P_2410.INFOPENMORTE_TPPENMORTE IS NULL THEN
        P_2410.CTR_FLG_STATUS         := 'EV';
        GB_REC_ERRO.COD_INS           := GB_COD_INS;
        GB_REC_ERRO.ID_CAD            := P_2410.ID_PK;
        GB_REC_ERRO.NOM_PROCESSO      := 'FC_DEPARA_TPPENMORTE';
        GB_REC_ERRO.TIPO_EVENTO       := '2410';
        GB_REC_ERRO.DESC_ERRO         := 'TIPO DE PENSÃO NÃO PODE SER NULO PARA BENEFÍCIO DE PENSÃO';
        GB_REC_ERRO.DESC_ERRO_BD      := NULL;
        GB_REC_ERRO.DES_IDENTIFICADOR := 'ID CAD BENEFICIO' ||
                                         P_CUR_2410.ID_CAD_BENEFICIO;
        GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
        SP_GERA_ERRO_PROCESSO;
      END IF;
      --VALIDA O CPF DO INSTITUIDOR DE PENSÃO. NÃO PODE SER NULO NEM INVÁLIDO (A FUNÇÃO RETORNA INVÁLIDO CASO SEJA NULO)
      IF NOT FC_VALIDA_CPF(P_2410.INSTPENMORTE_CPFINST) THEN
        P_2410.CTR_FLG_STATUS         := 'EV';
        GB_REC_ERRO.COD_INS           := GB_COD_INS;
        GB_REC_ERRO.ID_CAD            := P_2410.ID_PK;
        GB_REC_ERRO.NOM_PROCESSO      := 'SP_RET_INFO_INST/FC_VALIDA_CPF';
        GB_REC_ERRO.TIPO_EVENTO       := '2410';
        GB_REC_ERRO.DESC_ERRO         := 'CPF DO INSTITUIDOR DE PENSÃO É INVÁLIDO';
        GB_REC_ERRO.DESC_ERRO_BD      := NULL;
        GB_REC_ERRO.DES_IDENTIFICADOR := 'CPF DO INSTITUIDOR' ||
                                         P_CUR_2410.NUM_CPF_INST;
        GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
        SP_GERA_ERRO_PROCESSO;
      END IF;
    
      --VALIDA SE INDICATIVO DE INSTITUIDOR APOSENTADO É NULO 
      IF P_2410.INSTPENMORTE_INTAPOSENTADO IS NULL THEN
        P_2410.CTR_FLG_STATUS         := 'EV';
        GB_REC_ERRO.COD_INS           := GB_COD_INS;
        GB_REC_ERRO.ID_CAD            := P_2410.ID_PK;
        GB_REC_ERRO.NOM_PROCESSO      := 'SP_RET_INFO_INST';
        GB_REC_ERRO.TIPO_EVENTO       := '2410';
        GB_REC_ERRO.DESC_ERRO         := 'INDICATIVO DE INSTITUIDOR APOSENTADO NÃO PODE SER NULO';
        GB_REC_ERRO.DESC_ERRO_BD      := NULL;
        GB_REC_ERRO.DES_IDENTIFICADOR := 'CPF DO INSTITUIDOR' ||
                                         P_CUR_2410.NUM_CPF_INST;
        GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
        SP_GERA_ERRO_PROCESSO;
      END IF;
    
    END IF;
  
  END SP_VALIDA_2410;

  FUNCTION FC_VALIDA_CNPJ(P_CNPJ IN VARCHAR2) RETURN BOOLEAN
  
   IS
  
    DIGITO     NUMBER := 0;
    SOMA       NUMBER := 0;
    CNPJ_LIMPO VARCHAR2(14) := TRIM(P_CNPJ);
  
  BEGIN
  
    IF P_CNPJ IS NULL THEN
      RETURN FALSE;
    END IF;
  
    IF P_CNPJ IN ('00000000000000') THEN
      RETURN FALSE;
    END IF;
  
    IF LENGTH(CNPJ_LIMPO) <> 14 THEN
      RETURN FALSE;
    END IF;
  
    FOR I IN 1 .. 4
    
     LOOP
      SOMA := SOMA + SUBSTR(CNPJ_LIMPO, I, 1) * (6 - I);
    END LOOP;
  
    FOR I IN 5 .. 12
    
     LOOP
      SOMA := SOMA + SUBSTR(CNPJ_LIMPO, I, 1) * (14 - I);
    END LOOP;
  
    DIGITO := 11 - MOD(SOMA, 11);
  
    IF DIGITO > 9 THEN
      DIGITO := 0;
    END IF;
  
    IF DIGITO != SUBSTR(CNPJ_LIMPO, 13, 1) THEN
      RETURN FALSE;
    END IF;
  
    --DIGITO := 0;
    SOMA := 0;
  
    FOR I IN 1 .. 5
    
     LOOP
      SOMA := SOMA + SUBSTR(CNPJ_LIMPO, I, 1) * (7 - I);
    END LOOP;
  
    FOR I IN 6 .. 13
    
     LOOP
      SOMA := SOMA + SUBSTR(CNPJ_LIMPO, I, 1) * (15 - I);
    END LOOP;
  
    DIGITO := 11 - MOD(SOMA, 11);
  
    IF DIGITO > 9 THEN
      DIGITO := 0;
    END IF;
  
    IF DIGITO != SUBSTR(CNPJ_LIMPO, 14, 1) THEN
      RETURN FALSE;
    END IF;
  
    RETURN TRUE;
  
  END FC_VALIDA_CNPJ;

  /***** INÍCIO 2405 - ALTERAÇÃO DE BENEFICIÁRIO *****/

  --VERIFICA OS BENEFICIÁRIOS QUE TIVERAM ALGUMA ALTERAÇÃO
  PROCEDURE SP_ALT_BENEFICIARIO(P_COD_INS IN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_INS%TYPE,
                                P_ID_CTR_PROCESSO IN ESOCIAL.TSOC_CTR_PROCESSO.ID_CTR_PROCESSO%TYPE)
  
   IS
  
    V_CAD_BEN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE;
    --EXCEÇÃO LANÇADA QUANDO O MUNICÍPIO DE NASCIMENTO DO BENEFICIÁRIO NÃO É ENCONTRADO
    EX_PARAM_PROC EXCEPTION;
  
    --V_NUM_PROCESSO ESOCIAL.TSOC_CTR_ERRO_PROCESSO.NUM_PROCESSO%TYPE;
  
    V_BENEFICIARIO_DADOS_ORIGINAIS GB_C_ALT_BENEFICIARIO%ROWTYPE;
    V_DADOS_NASC_DIFERENTES        BOOLEAN;
    V_OUTROS_DADOS_DIFERENTES      BOOLEAN; 
  
  BEGIN
  
    --PADRONIZA PARAMETROS DE SESSÃO
    SP_DEFAULT_SESSION;
  
    --GERA O NÚMERO DO PROCESSO (CONTROLE)
    GB_REC_ERRO.NUM_PROCESSO := ESOCIAL.ESOC_SEQ_NUM_PROCESSO.NEXTVAL;
  
    GB_COD_INS := P_COD_INS;

    BEGIN   
    SP_CARREGA_IDS(P_ID_CTR_PROCESSO);
    EXCEPTION 
    WHEN OTHERS THEN 
      RAISE EX_PARAM_PROC; 
    END; 
    
    SP_SETA_PROCESSO(P_ID_CTR_PROCESSO, 'INICIO_PROCESSAMENTO');    
    
    --MASSA DE BENEFICIÁRIOS QUE FORAM FINALIZADOS COM SUCESSO 
    FOR C_ALT_BENEFICIARIO IN GB_C_ALT_BENEFICIARIO
    
     LOOP
      BEGIN
      
        --GUARDANDO O RESULTADO DO CURSOR NA VARIÁVEL
        V_BENEFICIARIO_DADOS_ORIGINAIS := C_ALT_BENEFICIARIO;
      
        --ZERA VARÍAVEIS
        SP_RESET_CAD_BENEFICIARIO(V_CAD_BEN);
        --OBTEM COD_INS
        V_CAD_BEN.COD_INS := GB_COD_INS;
        --OBTEM IDE_CLI       
        V_CAD_BEN.COD_IDE_CLI_BEN := C_ALT_BENEFICIARIO.COD_IDE_CLI_BEN;
        --OBTEM ID CHAVE DE CADASTRO
        --V_CAD_BEN.ID_CAD_BENEFICIARIO := ESOCIAL.ESOC_SEQ_ID_CAD_BENEFICIARIO.NEXTVAL;
      
        --OBTEM A SEQUÊNCIA CADASTRAL DO BENEFICIÁRIO        
        BEGIN
          V_CAD_BEN.SEQ_CAD := FC_RET_SEQ_CAD_BENEFICIARIO(V_CAD_BEN);
        EXCEPTION
          WHEN OTHERS THEN
            GB_REC_ERRO.COD_INS           := GB_COD_INS;
            GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
            GB_REC_ERRO.NOM_PROCESSO      := 'FC_RET_SEQ_CAD_BENEFICIARIO';
            GB_REC_ERRO.TIPO_EVENTO       := '2405';
            GB_REC_ERRO.DESC_ERRO         := 'ERRO NA GERACAO DE SEQUENCIAL CADASTRAL DE BENEFICIÁRIO';
            GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
            GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
            GB_REC_ERRO.FLG_TIPO_ERRO     := 'X';
            SP_GERA_ERRO_PROCESSO;
        END;
      
        --ONTEM INFORMAÇÕES DO BENEFICIARIO (PESSOA FÍSICA)
        BEGIN
          SP_RET_INFO_PESSOA_FISICA(V_CAD_BEN);
        EXCEPTION
          WHEN OTHERS THEN
            GB_REC_ERRO.COD_INS           := GB_COD_INS;
            GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
            GB_REC_ERRO.NOM_PROCESSO      := 'SP_RET_INFO_PESSOA_FISICA';
            GB_REC_ERRO.TIPO_EVENTO       := '2405';
            GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER INFORMAÇÕES DO BENEFICIÁRIO (PESSOA FISICA)';
            GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
            GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
            GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
            SP_GERA_ERRO_PROCESSO;
        END;
      
        BEGIN
          --OBTEM O NÚMERO DO NIS/PIS  
          V_CAD_BEN.NUM_NIS := FC_RET_NIS_PIS_BEN(V_CAD_BEN);
        EXCEPTION
          WHEN OTHERS THEN
            GB_REC_ERRO.COD_INS           := GB_COD_INS;
            GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
            GB_REC_ERRO.NOM_PROCESSO      := 'FC_RET_NIS_PIS_BEN';
            GB_REC_ERRO.TIPO_EVENTO       := '2405';
            GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER NIS/PIS DO BENEFICIARIO';
            GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
            GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
            GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
            SP_GERA_ERRO_PROCESSO;
        END;
      
        BEGIN
          --OBTER A DATA DE INGRESSO DO BENEFICIÁRIO 
          V_CAD_BEN.DATA_ING_BENEFICIARIO := FC_RET_DAT_ING_BEN(V_CAD_BEN);
        EXCEPTION
          WHEN OTHERS THEN
            GB_REC_ERRO.COD_INS           := GB_COD_INS;
            GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
            GB_REC_ERRO.NOM_PROCESSO      := 'FC_RET_DAT_ING_BEN';
            GB_REC_ERRO.TIPO_EVENTO       := '2405';
            GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER A DATA DE INGRESSO DO BENEFICIARIO';
            GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
            GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
            GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
            SP_GERA_ERRO_PROCESSO;
        END;
      
        BEGIN
          --IDENTIFICA INCAPACIDADE 
          SP_RET_INCAPACIDADE_BEN(V_CAD_BEN);
        EXCEPTION
          WHEN OTHERS THEN
            GB_REC_ERRO.COD_INS           := GB_COD_INS;
            GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
            GB_REC_ERRO.NOM_PROCESSO      := 'SP_RET_INCAPACIDADE_BEN';
            GB_REC_ERRO.TIPO_EVENTO       := '2405';
            GB_REC_ERRO.DESC_ERRO         := 'ERRO AO RETORNAR IDENTIFICADOR DE INCAPACIDADE DO BENEFICIÁRIO';
            GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
            GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
            GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
            SP_GERA_ERRO_PROCESSO;
        END;
      
        --OBTÉM DADOS DE NASCIMENTO DO BENEFICIÁRIO 
        BEGIN
          SP_RET_INFO_NASC_BEN(V_CAD_BEN);
        EXCEPTION
          WHEN OTHERS THEN
            GB_REC_ERRO.COD_INS           := GB_COD_INS;
            GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
            GB_REC_ERRO.NOM_PROCESSO      := 'SP_RET_INFO_NASC_BEN';
            GB_REC_ERRO.TIPO_EVENTO       := '2405';
            GB_REC_ERRO.DESC_ERRO         := 'ERRO AO RETORNAR INFORMAÇÕES DE NASCIMENTO DO BENEFICIÁRIO';
            GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
            GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
            GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
            SP_GERA_ERRO_PROCESSO;
        END;
      
        --OBTÉM ENDEREÇO BENEFICIÁRIO    
        BEGIN
          SP_RET_ENDERECO(V_CAD_BEN);
        EXCEPTION
          WHEN OTHERS THEN
            GB_REC_ERRO.COD_INS           := GB_COD_INS;
            GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
            GB_REC_ERRO.NOM_PROCESSO      := 'SP_RET_ENDERECO';
            GB_REC_ERRO.TIPO_EVENTO       := '2405';
            GB_REC_ERRO.DESC_ERRO         := 'ERRO AO RETORNAR INFORMAÇÕES DE ENDEREÇO DO BENEFICIÁRIO';
            GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
            GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
            GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
            SP_GERA_ERRO_PROCESSO;
        END;
      
      EXCEPTION
        WHEN OTHERS THEN
          GB_REC_ERRO.COD_INS           := GB_COD_INS;
          GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
          GB_REC_ERRO.NOM_PROCESSO      := 'SP_ALT_BENEFICIARIO';
          GB_REC_ERRO.TIPO_EVENTO       := '2405';
          GB_REC_ERRO.DESC_ERRO         := 'ERRO AO GERAR O CADASTRO DO BENEFICIÁRIO';
          GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
          GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
          GB_REC_ERRO.FLG_TIPO_ERRO     := 'X';
          SP_GERA_ERRO_PROCESSO;
        
      END;
    
      --ATUALIZA CADASTRO DE BENEFICIÁRIO E INSERE NA TABELA DE HISTÓRICO
      IF GB_REC_ERRO.FLG_TIPO_ERRO <> 'X' OR
         GB_REC_ERRO.FLG_TIPO_ERRO IS NULL THEN
      
        BEGIN
          --VERIFICANDO SE ALGUMA DAS COLUNAS DE NASCIMENTO SOFREU ALTERAÇÃO
          V_DADOS_NASC_DIFERENTES := FC_DADOS_NASC_DIFERENTES(V_BENEFICIARIO_DADOS_ORIGINAIS,
                                                              V_CAD_BEN);
        EXCEPTION
          WHEN OTHERS THEN
            GB_REC_ERRO.COD_INS           := GB_COD_INS;
            GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
            GB_REC_ERRO.NOM_PROCESSO      := 'FC_DADOS_NASC_DIFERENTES';
            GB_REC_ERRO.TIPO_EVENTO       := '2405';
            GB_REC_ERRO.DESC_ERRO         := 'ERRO AO COMPARAR SE OS DADOS DE NASCIMENTO SÃO DIFERENTES';
            GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
            GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
            GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
            SP_GERA_ERRO_PROCESSO;
        END;
      
        IF V_DADOS_NASC_DIFERENTES THEN
        
          BEGIN
            --INCLUI O REGISTRO ORIGINAL NA TABELA DE HISTÓRICO
            SP_INC_TSOC_HCAD_BENEFICIARIO(V_BENEFICIARIO_DADOS_ORIGINAIS);
          EXCEPTION
            WHEN OTHERS THEN
              GB_REC_ERRO.COD_INS           := GB_COD_INS;
              GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
              GB_REC_ERRO.NOM_PROCESSO      := 'SP_INC_TSOC_HCAD_BENEFICIARIO';
              GB_REC_ERRO.TIPO_EVENTO       := '2405';
              GB_REC_ERRO.DESC_ERRO         := 'ERRO AO INCLUIR HISTÓRICO DE CADASTRO DO BENEFICIÁRIO';
              GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
              GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
              GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
              SP_GERA_ERRO_PROCESSO;
          END;
        
          BEGIN
            --ATUALIZA CADASTRO DE BENEFICIÁRIO
            SP_ATU_TSOC_CAD_BENEFICIARIO(V_CAD_BEN,'DADOS_NASC');
          EXCEPTION
            WHEN OTHERS THEN
              GB_REC_ERRO.COD_INS           := GB_COD_INS;
              GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
              GB_REC_ERRO.NOM_PROCESSO      := 'SP_ATU_TSOC_CAD_BENEFICIARIO';
              GB_REC_ERRO.TIPO_EVENTO       := '2405';
              GB_REC_ERRO.DESC_ERRO         := 'ERRO AO ATUALIZAR O CADASTRO DO BENEFICIÁRIO';
              GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
              GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
              GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
              SP_GERA_ERRO_PROCESSO;
          END;
        
          --REGRA: GERA NOVO REGISTRO NA 2400
        
          --RECEBE A DATA DE INÍCIO E FIM DA GERAÇÃO DO EVENTO
          --PARA CONTROLE DE ID DE EVENTO.
        
          GB_DAT_EVT_ANT := GB_DAT_EVT_ATU;
          GB_DAT_EVT_ATU := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MMSS');
          SP_2400(V_BENEFICIARIO_DADOS_ORIGINAIS.ID_CAD_BENEFICIARIO);
        
        ELSE
        
          BEGIN
            --VERIFICANDO SE AS DEMAIS COLUNAS SOFRERAM ALTERAÇÕES
            V_OUTROS_DADOS_DIFERENTES := FC_OUTROS_DADOS_DIFERENTES(V_BENEFICIARIO_DADOS_ORIGINAIS,
                                                                    V_CAD_BEN);
          EXCEPTION
            WHEN OTHERS THEN
              GB_REC_ERRO.COD_INS           := GB_COD_INS;
              GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
              GB_REC_ERRO.NOM_PROCESSO      := 'FC_OUTROS_DADOS_DIFERENTES';
              GB_REC_ERRO.TIPO_EVENTO       := '2405';
              GB_REC_ERRO.DESC_ERRO         := 'ERRO AO COMPARAR SE OS DEMAIS DADOS SÃO DIFERENTES';
              GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
              GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
              GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
              SP_GERA_ERRO_PROCESSO;
          END;
        
          IF V_OUTROS_DADOS_DIFERENTES THEN
          
            BEGIN
              --INCLUI NA TABELA DE HISTÓRICO
              SP_INC_TSOC_HCAD_BENEFICIARIO(V_BENEFICIARIO_DADOS_ORIGINAIS);
            EXCEPTION
              WHEN OTHERS THEN
                GB_REC_ERRO.COD_INS           := GB_COD_INS;
                GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
                GB_REC_ERRO.NOM_PROCESSO      := 'SP_INC_TSOC_HCAD_BENEFICIARIO';
                GB_REC_ERRO.TIPO_EVENTO       := '2405';
                GB_REC_ERRO.DESC_ERRO         := 'ERRO AO INCLUIR HISTÓRICO DE CADASTRO DO BENEFICIÁRIO';
                GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
                GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
                GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
                SP_GERA_ERRO_PROCESSO;
            END;
          
            BEGIN
              --ATUALIZA CADASTRO DE BENEFICIÁRIO
              SP_ATU_TSOC_CAD_BENEFICIARIO(V_CAD_BEN, 'OUTROS_DADOS');
            EXCEPTION
               WHEN EX_PARAM_PROC THEN 
                GB_REC_ERRO.COD_INS           := GB_COD_INS;
                GB_REC_ERRO.ID_CAD            := NULL;
                GB_REC_ERRO.NOM_PROCESSO      := 'SP_CAD_BENEFICIARIO';
                GB_REC_ERRO.TIPO_EVENTO       := '2405';
                GB_REC_ERRO.DESC_ERRO         := 'ERRO NA PARAMETRIZAÇÃO DO PROCESSO';
                GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
                GB_REC_ERRO.DES_IDENTIFICADOR := NULL;
                GB_REC_ERRO.FLG_TIPO_ERRO     := 'X';
                SP_GERA_ERRO_PROCESSO;
                SP_SETA_PROCESSO(P_ID_CTR_PROCESSO, 'ERRO_PROCESSAMENTO');   
            
            
              WHEN OTHERS THEN
                GB_REC_ERRO.COD_INS           := GB_COD_INS;
                GB_REC_ERRO.ID_CAD            := V_CAD_BEN.ID_CAD_BENEFICIARIO;
                GB_REC_ERRO.NOM_PROCESSO      := 'SP_ATU_TSOC_CAD_BENEFICIARIO';
                GB_REC_ERRO.TIPO_EVENTO       := '2405';
                GB_REC_ERRO.DESC_ERRO         := 'ERRO AO ATUALIZAR O CADASTRO DO BENEFICIÁRIO';
                GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
                GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BEN.COD_IDE_CLI_BEN;
                GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
                SP_GERA_ERRO_PROCESSO;
                SP_SETA_PROCESSO(P_ID_CTR_PROCESSO, 'ERRO_PROCESSAMENTO');
            END;
          
            --REGRA: GERA NOVO REGISTRO NA 2405
            GB_DAT_EVT_ANT := GB_DAT_EVT_ATU;
            GB_DAT_EVT_ATU := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MMSS');
            SP_2405(V_BENEFICIARIO_DADOS_ORIGINAIS.ID_CAD_BENEFICIARIO);
          
          END IF;
        
        END IF;
      
      END IF;
     
      
      SP_SETA_PROCESSO(P_ID_CTR_PROCESSO, 'ATUALIZA_QUANTIDADE');        
    
    END LOOP;
    
    SP_SETA_PROCESSO(P_ID_CTR_PROCESSO, 'FIM_PROCESSAMENTO'); 
  
  EXCEPTION
  
     
    
    WHEN OTHERS THEN
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := NULL;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_CAD_BENEFICIARIO';
      GB_REC_ERRO.TIPO_EVENTO       := '2405';
      GB_REC_ERRO.DESC_ERRO         := 'ERRO NO PROCESSO DE CADASTRO DE BENEFICIÁRIO';
      GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
      GB_REC_ERRO.DES_IDENTIFICADOR := NULL;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'X';
      SP_GERA_ERRO_PROCESSO;
      SP_SETA_PROCESSO(P_ID_CTR_PROCESSO, 'ERRO_PROCESSAMENTO');      
    
  END SP_ALT_BENEFICIARIO;

  --VERIFICA SE HOUVE ALGUMA ALTERAÇÃO NOS DADOS DE NASCIMENTO DO BENEFICIÁRIO
  FUNCTION FC_DADOS_NASC_DIFERENTES(P_BENEFICIARIO_DADOS_ORIGINAIS IN GB_C_ALT_BENEFICIARIO%ROWTYPE,
                                    P_BENEFICIARIO_DADOS_NOVOS     IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE)
    RETURN BOOLEAN IS
  
  BEGIN
  
    --CAMPOS A SEREM VERIFICADOS:
    --DATA DE NASCIMENTO, MUNICÍPIO DE NASCIMENTO, UF DE NASCIMENTO E PAÍS DE NASCIMENTO
  
    IF (P_BENEFICIARIO_DADOS_ORIGINAIS.DAT_NASC <>
       P_BENEFICIARIO_DADOS_NOVOS.DAT_NASC OR
       P_BENEFICIARIO_DADOS_ORIGINAIS.COD_MUNIC_NASC <>
       P_BENEFICIARIO_DADOS_NOVOS.COD_MUNIC_NASC OR
       P_BENEFICIARIO_DADOS_ORIGINAIS.COD_UF_NASC <>
       P_BENEFICIARIO_DADOS_NOVOS.COD_UF_NASC OR
       P_BENEFICIARIO_DADOS_ORIGINAIS.COD_PAIS_NASC <>
       P_BENEFICIARIO_DADOS_NOVOS.COD_PAIS_NASC) THEN
    
      RETURN TRUE;
    
    ELSE
    
      RETURN FALSE;
    
    END IF;
  
  END FC_DADOS_NASC_DIFERENTES;

  --VERIFICA SE HOUVE ALGUMA ALTERAÇÃO NOS DEMAIS DADOS DO BENEFICIÁRIO
  FUNCTION FC_OUTROS_DADOS_DIFERENTES(P_BENEFICIARIO_DADOS_ORIGINAIS IN GB_C_ALT_BENEFICIARIO%ROWTYPE,
                                      P_BENEFICIARIO_DADOS_NOVOS     IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE)
    RETURN BOOLEAN IS
  
  BEGIN
  
    IF (P_BENEFICIARIO_DADOS_ORIGINAIS.NUM_CPF <>
       P_BENEFICIARIO_DADOS_NOVOS.NUM_CPF OR
       P_BENEFICIARIO_DADOS_ORIGINAIS.NOM_BENEFICIARIO <>
       P_BENEFICIARIO_DADOS_NOVOS.NOM_BENEFICIARIO OR
       P_BENEFICIARIO_DADOS_ORIGINAIS.DATA_ING_BENEFICIARIO <>
       P_BENEFICIARIO_DADOS_NOVOS.DATA_ING_BENEFICIARIO OR
       P_BENEFICIARIO_DADOS_ORIGINAIS.COD_SEXO <>
       P_BENEFICIARIO_DADOS_NOVOS.COD_SEXO OR
       P_BENEFICIARIO_DADOS_ORIGINAIS.COD_RACA <>
       P_BENEFICIARIO_DADOS_NOVOS.COD_RACA OR
       P_BENEFICIARIO_DADOS_ORIGINAIS.FLG_INCAPAZ <>
       P_BENEFICIARIO_DADOS_NOVOS.FLG_INCAPAZ OR
       P_BENEFICIARIO_DADOS_ORIGINAIS.TIP_LOGRADOURO <>
       P_BENEFICIARIO_DADOS_NOVOS.TIP_LOGRADOURO OR
       P_BENEFICIARIO_DADOS_ORIGINAIS.DESC_LOGRADOURO <>
       P_BENEFICIARIO_DADOS_NOVOS.DESC_LOGRADOURO OR
       P_BENEFICIARIO_DADOS_ORIGINAIS.NUM_NUMERO <>
       P_BENEFICIARIO_DADOS_NOVOS.NUM_NUMERO OR
       P_BENEFICIARIO_DADOS_ORIGINAIS.NUM_CEP <>
       P_BENEFICIARIO_DADOS_NOVOS.NUM_CEP OR
       P_BENEFICIARIO_DADOS_ORIGINAIS.COD_MUNICIPIO <>
       P_BENEFICIARIO_DADOS_NOVOS.COD_MUNICIPIO OR
       P_BENEFICIARIO_DADOS_ORIGINAIS.COD_UF <>
       P_BENEFICIARIO_DADOS_NOVOS.COD_UF OR
       P_BENEFICIARIO_DADOS_ORIGINAIS.COD_PAIS <>
       P_BENEFICIARIO_DADOS_NOVOS.COD_PAIS OR
       P_BENEFICIARIO_DADOS_ORIGINAIS.NOM_CIDADE_EXTERIOR <>
       P_BENEFICIARIO_DADOS_NOVOS.NOM_CIDADE_EXTERIOR OR
       P_BENEFICIARIO_DADOS_ORIGINAIS.NOM_MAE <>
       P_BENEFICIARIO_DADOS_NOVOS.NOM_MAE OR
       P_BENEFICIARIO_DADOS_ORIGINAIS.NOM_PAI <>
       P_BENEFICIARIO_DADOS_NOVOS.NOM_PAI) THEN
    
      RETURN TRUE;
    
    ELSE
    
      RETURN FALSE;
    
    END IF;
  
  END FC_OUTROS_DADOS_DIFERENTES;

  --CARREGA HISTÓRICO DE CADASTRO DE BENEFICIÁRIO 
  PROCEDURE SP_INC_TSOC_HCAD_BENEFICIARIO(P_CAD_BEN IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE) IS
  
    V_ID_HCAD_BENEFICIARIO ESOCIAL.TSOC_HCAD_BENEFICIARIO.ID_HIST_BENEFICIARIO%TYPE;
    
    V_SEQ_HIST ESOCIAL.TSOC_HCAD_BENEFICIARIO.SEQ_HIST%TYPE;
  
  BEGIN
  
    --OBTEM ID CHAVE DE CADASTRO
    V_ID_HCAD_BENEFICIARIO := ESOCIAL.ESOC_SEQ_ID_HCAD_BENEFICIARIO.NEXTVAL;
    
    --OBTEM SEQ_HIST
    V_SEQ_HIST := FC_RET_SEQ_HCAD_BENEFICIARIO(P_CAD_BEN);
  
    INSERT INTO ESOCIAL.TSOC_HCAD_BENEFICIARIO
      (ID_HIST_BENEFICIARIO,
       COD_INS,
       COD_IDE_CLI_BEN,
       SEQ_HIST,
       ID_CAD_BENEFICIARIO,
       NUM_CPF,
       NUM_NIS,
       NOM_BENEFICIARIO,
       DATA_ING_BENEFICIARIO,
       COD_SEXO,
       COD_RACA,
       COD_EST_CIV,
       FLG_INCAPAZ,
       DAT_INCAPACIDADE,
       DAT_NASC,
       COD_MUNIC_NASC,
       COD_UF_NASC,
       COD_PAIS_NASC,
       COD_NACIO,
       NOM_MAE,
       NOM_PAI,
       TIP_LOGRADOURO,
       DESC_LOGRADOURO,
       NUM_NUMERO,
       DES_COMPLEMENTO,
       NOM_BAIRRO,
       NUM_CEP,
       COD_MUNICIPIO,
       COD_UF,
       COD_PAIS,
       NOM_CIDADE_EXTERIOR,
       COS_POSTAL_EXTERIOR,
       DAT_ING,
       DAT_ULT_ATU,
       NOM_USU_ULT_ATU,
       NOM_PRO_ULT_ATU)
    VALUES
      (V_ID_HCAD_BENEFICIARIO,
       P_CAD_BEN.COD_INS,
       P_CAD_BEN.COD_IDE_CLI_BEN,
       V_SEQ_HIST,
       P_CAD_BEN.ID_CAD_BENEFICIARIO,
       P_CAD_BEN.NUM_CPF,
       P_CAD_BEN.NUM_NIS,
       P_CAD_BEN.NOM_BENEFICIARIO,
       P_CAD_BEN.DATA_ING_BENEFICIARIO,
       P_CAD_BEN.COD_SEXO,
       P_CAD_BEN.COD_RACA,
       P_CAD_BEN.COD_EST_CIV,
       P_CAD_BEN.FLG_INCAPAZ,
       P_CAD_BEN.DAT_INCAPACIDADE,
       P_CAD_BEN.DAT_NASC,
       P_CAD_BEN.COD_MUNIC_NASC,
       P_CAD_BEN.COD_UF_NASC,
       P_CAD_BEN.COD_PAIS_NASC,
       P_CAD_BEN.COD_NACIO,
       P_CAD_BEN.NOM_MAE,
       P_CAD_BEN.NOM_PAI,
       P_CAD_BEN.TIP_LOGRADOURO,
       P_CAD_BEN.DESC_LOGRADOURO,
       P_CAD_BEN.NUM_NUMERO,
       P_CAD_BEN.DES_COMPLEMENTO,
       P_CAD_BEN.NOM_BAIRRO,
       P_CAD_BEN.NUM_CEP,
       P_CAD_BEN.COD_MUNICIPIO,
       P_CAD_BEN.COD_UF,
       P_CAD_BEN.COD_PAIS,
       P_CAD_BEN.NOM_CIDADE_EXTERIOR,
       P_CAD_BEN.COD_POSTAL_EXTERIOR,
       SYSDATE,
       SYSDATE,
       'ESOCIAL',
       'SP_INC_TSOC_HCAD_BENEFICIARIO');
  
    COMMIT;
  
  END SP_INC_TSOC_HCAD_BENEFICIARIO;

  --RETORNA A SEQUENCIA DE HISTÓRICO CADASTRAL DO BENEFICIÁRIO 
  FUNCTION FC_RET_SEQ_HCAD_BENEFICIARIO(P_SEQ_HIST IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE)
    RETURN ESOCIAL.TSOC_HCAD_BENEFICIARIO.SEQ_HIST%TYPE IS
    V_SEQ_CAD_HIST ESOCIAL.TSOC_HCAD_BENEFICIARIO.SEQ_HIST%TYPE;
  
  BEGIN
  
    SELECT NVL(MAX(C.SEQ_HIST), 0) + 1
      INTO V_SEQ_CAD_HIST
      FROM ESOCIAL.TSOC_HCAD_BENEFICIARIO C
     WHERE C.COD_IDE_CLI_BEN = P_SEQ_HIST.COD_IDE_CLI_BEN
       AND C.COD_INS = P_SEQ_HIST.COD_INS;
  
    RETURN V_SEQ_CAD_HIST;
  
  END FC_RET_SEQ_HCAD_BENEFICIARIO;
  
  FUNCTION FC_RET_SEQ_EVENTO_2405(P_SEQ_EVT IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE)
    RETURN ESOCIAL.TSOC_2405_BENEFICIARIO_ALT.SEQ_EVENTO%TYPE IS
    V_SEQ_EVENTO ESOCIAL.TSOC_2405_BENEFICIARIO_ALT.SEQ_EVENTO%TYPE;
  BEGIN
  
    SELECT NVL(MAX(BA.SEQ_EVENTO), 0) + 1
      INTO V_SEQ_EVENTO
      FROM ESOCIAL.TSOC_2405_BENEFICIARIO_ALT BA
     WHERE BA.COD_INS = P_SEQ_EVT.COD_INS
       AND BA.ID_CAD_BENEFICIARIO = P_SEQ_EVT.ID_CAD_BENEFICIARIO;
  
    RETURN V_SEQ_EVENTO;
  
  END FC_RET_SEQ_EVENTO_2405;

  --ATUALIZA CADASTRO DE BENEFICIÁRIO 
  --P_TIPO: DADOS_NASC, OUTROS_DADOS
  
  PROCEDURE SP_ATU_TSOC_CAD_BENEFICIARIO(P_CAD_BEN IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE, P_TIPO VARCHAR2) IS
  
  BEGIN
    
    IF P_TIPO = 'DADOS_NASC' THEN
  
      UPDATE TSOC_CAD_BENEFICIARIO
         SET DAT_NASC = P_CAD_BEN.DAT_NASC,
             COD_MUNIC_NASC = P_CAD_BEN.COD_MUNIC_NASC,
             COD_UF_NASC = P_CAD_BEN.COD_UF_NASC,
             COD_PAIS_NASC = P_CAD_BEN.COD_PAIS_NASC,
             DAT_ULT_ATU = SYSDATE,
             NOM_USU_ULT_ATU = 'ESOCIAL',
             NOM_PRO_ULT_ATU = 'SP_ATU_TSOC_CAD_BENEFICIARIO'
       WHERE COD_INS = P_CAD_BEN.COD_INS
         AND COD_IDE_CLI_BEN = P_CAD_BEN.COD_IDE_CLI_BEN;
    
    ELSIF P_TIPO = 'OUTROS_DADOS' THEN

      UPDATE TSOC_CAD_BENEFICIARIO
         SET NUM_CPF = P_CAD_BEN.NUM_CPF,
             NUM_NIS = P_CAD_BEN.NUM_NIS,
             NOM_BENEFICIARIO = P_CAD_BEN.NOM_BENEFICIARIO,
             DATA_ING_BENEFICIARIO = P_CAD_BEN.DATA_ING_BENEFICIARIO,
             COD_SEXO = P_CAD_BEN.COD_SEXO,
             COD_RACA = P_CAD_BEN.COD_RACA,
             COD_EST_CIV = P_CAD_BEN.COD_EST_CIV,
             FLG_INCAPAZ = P_CAD_BEN.FLG_INCAPAZ,
             DAT_INCAPACIDADE = P_CAD_BEN.DAT_INCAPACIDADE,
             COD_NACIO = P_CAD_BEN.COD_NACIO,
             NOM_MAE = P_CAD_BEN.NOM_MAE,
             NOM_PAI = P_CAD_BEN.NOM_PAI,
             TIP_LOGRADOURO = P_CAD_BEN.TIP_LOGRADOURO,
             DESC_LOGRADOURO = P_CAD_BEN.DESC_LOGRADOURO,
             NUM_NUMERO = P_CAD_BEN.NUM_NUMERO,
             DES_COMPLEMENTO = P_CAD_BEN.DES_COMPLEMENTO,
             NOM_BAIRRO = P_CAD_BEN.NOM_BAIRRO,
             NUM_CEP = P_CAD_BEN.NUM_CEP,
             COD_MUNICIPIO = P_CAD_BEN.COD_MUNICIPIO,
             COD_UF = P_CAD_BEN.COD_UF,
             COD_PAIS = P_CAD_BEN.COD_PAIS,
             NOM_CIDADE_EXTERIOR = P_CAD_BEN.NOM_CIDADE_EXTERIOR,
             COD_POSTAL_EXTERIOR = P_CAD_BEN.COD_POSTAL_EXTERIOR,
             DAT_ULT_ATU = SYSDATE,
             NOM_USU_ULT_ATU = 'ESOCIAL',
             NOM_PRO_ULT_ATU = 'SP_ATU_TSOC_CAD_BENEFICIARIO'
       WHERE COD_INS = P_CAD_BEN.COD_INS
         AND COD_IDE_CLI_BEN = P_CAD_BEN.COD_IDE_CLI_BEN;
     
    END IF;
      
    COMMIT;
  
  END SP_ATU_TSOC_CAD_BENEFICIARIO;

  --GERA EVENTO DE BENEFICIÁRIO 2405 
  --APENAS INCLUSÃO DE BENEFICIÁRIO NOVOS. 

  --ID_CAD_BENEFICIARIO    IDENTIFICADOR CHAVE  DO BENEFICIÁRIO
  --COD_INS                CÓDIGO DO INSTITUTO DO EMPREGADOR/ENTIDADE
  --COD_IDE_CLI_BEN        CÓDIGO IDENTIFICADOR ÚNICO DO BENEFICIÁRIO
  --SEQ_CAD                SEQUENCIA CADASTRAL DO BENEFICIÁRIO
  --NUM_CPF                INFORMAR O CPF DO BENEFICIÁRIO.
  --NUM_NIS                PREENCHER COM O NÚMERO DE IDENTIFICAÇÃO SOCIAL - NIS, O QUAL PODE SER O PIS, PASEP OU NIT.
  --NOM_BENEFICIARIO       NOME DO BENEFICIÁRIO
  --DATA_ING_BENEFICIARIO  PREENCHER COM A DATA DE INÍCIO DO CADASTRO DO BENEFICIÁRIO. INFORMAR A DATA DE INÍCIO DA OBRIGATORIEDADE DOS EVENTOS NÃO PERIÓDICOS PARA ENTES PÚBLICOS NO ESOCIAL CASO O BENEFICIÁRIO POSSUA CADASTRO ANTERIOR A ESSA DATA.
  --COD_SEXO               SEXO DO BENEFICIÁRIO: M - MASCULINO; F - FEMININO. VALORES VÁLIDOS: M, F.
  --COD_RACA               RAÇA E COR DO BENEFICIÁRIO, CONFORME OPÇÕES ABAIXO: 1 - BRANCA; 2 - PRETA; 3 - PARDA; 4 - AMARELA; 5 - INDÍGENA; 6 - NÃO INFORMADO. VALORES VÁLIDOS: 1, 2, 3, 4, 5, 6.
  --COD_EST_CIV            ESTADO CIVIL DO BENEFICIÁRIO, CONFORME OPÇÕES ABAIXO: 1 - SOLTEIRO; 2 - CASADO; 3 - DIVORCIADO; 4 - SEPARADO; 5 - VIÚVO. VALORES VÁLIDOS: 1, 2, 3, 4, 5."
  --FLG_INCAPAZ            Informar se o beneficiário é pessoa com doença incapacitante, na forma da lei: S - Sim; N - Não. Valores Válidos: S, N."
  --DAT_INCAPACIDADE       PREENCHER COM A DATA DO RECONHECIMENTO DA INCAPACIDADE. VALIDAÇÃO: PREENCHIMENTO OBRIGATÓRIO SE {INCFISMEN} = S. NÃO PREENCHER NOS DEMAIS CASOS.
  --DAT_NASC               PREENCHER COM A DATA DE NASCIMENTO
  --COD_MUNIC_NASC         PREENCHER COM O CÓDIGO DO MUNICÍPIO, CONFORME TABELA DO IBGE VALIDAÇÃO: SE INFORMADO, DEVE SER UM CÓDIGO EXISTENTE NA TABELA DO IBGE. O PREENCHIMENTO É OBRIGATÓRIO SE O PAÍS DO NASCIMENTO FOR IGUAL A BRASIL."
  --COD_UF_NASC            Preencher com a sigla da Unidade da Federação Validação: Deve ser uma UF válida."
  --COD_PAIS_NASC          PREENCHER COM O CÓDIGO DO PAÍS DE NASCIMENTO DO BENEFICIÁRIO, CONFORME TABELA 06. VALIDAÇÃO: SE INFORMADO, DEVE SER UM CÓDIGO EXISTENTE NA TABELA."
  --COD_NACIO              Preencher com o código do país de nacionalidade do beneficiário, conforme Tabela 06. Validação: Deve ser um código existente na tabela."
  --NOM_MAE                NOME DA MÃE DO BENEFICIÁRIO."
  --NOM_PAI                Nome do pai do beneficiário."
  --TIP_LOGRADOURO         TIPO DE LOGRADOURO, CONFORME TABELA 20. VALIDAÇÃO: DEVE SER UM CÓDIGO VÁLIDO, EXISTENTE NA TABELA 20."
  --DESC_LOGRADOURO        Descrição do logradouro"
  --NUM_NUMERO             NÚMERO DO LOGRADOURO. SE NÃO HOUVER NÚMERO A SER INFORMADO, PREENCHER COM ""S/N"""
  --DES_COMPLEMENTO        Complemento do logradouro.
  --NOM_BAIRRO             Nome do bairro/distrito
  --NUM_CEP                Código de Endereçamento Postal - CEP. Validação: Deve ser preenchido apenas com números. Deve ser um CEP válido.
  --COD_MUNICIPIO          Preencher com o código do município, conforme tabela do IBGE Validação: Deve ser um código existente na tabela do IBGE."
  --COD_UF                 PREENCHER COM A SIGLA DA UNIDADE DA FEDERAÇÃO VALIDAÇÃO: DEVE SER UMA UF VÁLIDA.
  --COD_PAIS               PREENCHER COM O CÓDIGO DO PAÍS, CONFORME TABELA 6. VALIDAÇÃO: DEVE SER UM CÓDIGO EXISTENTE NA TABELA
  --NOM_CIDADE_EXTERIOR    NOME DA CIDADE FORA DO PAIS
  --COS_POSTAL_EXTERIOR    CÓDIGO DE ENDEREÇAMENTO POSTAL EXTERIOR
  --DAT_ING                DATA DE INGRESSO
  --DAT_ULT_ATU            DATA DA ULTIMA ATUALIZAÇÃO
  --NOM_USU_ULT_ATU        NOME DO USUÁRIO RESPONSÁVEL PELA  ULTIMA ATUALIZAÇÃO
  --NOM_PRO_ULT_ATU        NOME DO PROCESSO RESPONSÁVEL PELA ÚLTIMA ATUALIZAÇÃO*/

  PROCEDURE SP_2405(P_ID_CAD_BENEFICIARIO IN ESOCIAL.TSOC_CAD_BENEFICIARIO.ID_CAD_BENEFICIARIO%TYPE) IS
    V_2405 ESOCIAL.TSOC_2405_BENEFICIARIO_ALT%ROWTYPE;
  BEGIN
  
    V_2405.COD_INS        := GB_COD_INS;
    V_2405.ID_PERIODO_DET := GB_ID_PERIODO_DET;
    --OBTÉM NÚMERO DE INSCRIÇÃO E TIPO DE INSCRIÇÃO DO EMPREGADOR 
    SP_RET_INSC_EMP;
    V_2405.TPINSC := GB_EMPREGADOR.TP_INSC;
    V_2405.NRINSC := GB_EMPREGADOR.NUM_CNPJ;
  
    FOR C_2405 IN GB_C_2400(P_ID_CAD_BENEFICIARIO)
    
     LOOP
      --COMPARA A DATA INÍCIO DE GERAÇÃO DO EVENTO COM A ANTERIOR PARA CONTROLAR SEQUENCIAL DE ID        
      IF GB_DAT_EVT_ATU = GB_DAT_EVT_ANT THEN
        GB_SEQ_CHAVE_ID := GB_SEQ_CHAVE_ID + 1;
      ELSE
        GB_SEQ_CHAVE_ID := 1;
      END IF;
      --ZERA VARIÁVEIS
      SP_RESET_2405(V_2405);
      --ID DE CADASTRO DO BENEFICIÁRIO
      V_2405.ID_CAD_BENEFICIARIO := C_2405.ID_CAD_BENEFICIARIO;
      --OBTÉM ID CHAVE      
      V_2405.ID_PK := ESOCIAL.ESOC_SEQ_ID_2405.NEXTVAL;
      --COD INS
      V_2405.COD_INS := GB_COD_INS;
      
      --TASK41563 LNUNES 27/08/2018 VERIFICANDO SE JÁ EXISTE UM ID DE EVENTO
      V_2405.ID := FC_RET_ID_EVENTO_EXISTENTE('2405',P_ID_CAD_BENEFICIARIO);
      IF V_2405.ID IS NULL THEN
        --GERA ID DO EVENTO
        V_2405.ID := FC_GERA_ID_EVENTO;
      END IF;        
      
      --OBTÉM SEQUÊNCIA DE CADASTRO DO EVENTO    
      V_2405.SEQ_EVENTO := FC_RET_SEQ_EVENTO_2405(V_2405);
      --OBTEM DADOS DE VERSIONAMENTO E AMBIENTE
      --VERIFICAR---------
      SP_RET_INFO_AMBIENTE(V_2405.TPAMB,V_2405.VERPROC,V_2405.PROCEMI);    
      ---------------------  
      --SE O PERIODO FOR DO TIPO A - Abertura. Retificação =1 
      --SE FOR R - Reabertura. Retificação = 2 
      IF GB_FLG_STATUS_PERIODO = 'A' 
       THEN V_2405.INDRETIF := 1;
       ELSE V_2405.INDRETIF :=2; 
      END IF; 
      --DADOS DO BENEFICIÁRO     
      V_2405.BENEFICIARIO_CPFBENEF  := C_2405.NUM_CPF;
      V_2405.BENEFICIARIO_NMBENEFIC := SUBSTR(C_2405.NOM_BENEFICIARIO,
                                              0,
                                              70);
      --PREENCHER COM A DATA DE INÍCIO DO CADASTRO DO BENEFICIÁRIO. 
      --INFORMAR A DATA DE INÍCIO DA OBRIGATORIEDADE DOS EVENTOS NÃO PERIÓDICOS 
      --PARA ENTES PÚBLICOS NO ESOCIAL CASO O BENEFICIÁRIO POSSUA CADASTRO ANTERIOR A ESSA DATA.
      --VALIDAÇÃO: DEVE SER UMA DATA VÁLIDA, IGUAL OU POSTERIOR À DATA DE 
      --INÍCIO DA OBRIGATORIEDADE DOS EVENTOS NÃO PERIÓDICOS PARA ENTES PÚBLICOS NO ESOCIAL 
      --E IGUAL OU ANTERIOR À DATA ATUAL.
      --DATA OBRIGATORIEDADE EVENTOS NÃO PERIODICOS ESOCIAL: '01/12/2018' 
      V_2405.BENEFICIARIO_DTINICIO := CASE
                                        WHEN C_2405.DATA_ING_BENEFICIARIO >
                                             GB_DAT_ESOCIAL THEN
                                         C_2405.DATA_ING_BENEFICIARIO
                                        ELSE
                                         GB_DAT_ESOCIAL
                                      END;
      V_2405.BENEFICIARIO_SEXO     := C_2405.COD_SEXO;
      --DE PARA RAÇA COR
      V_2405.BENEFICIARIO_RACACOR := FC_DEPARA_RACA_COR(C_2405.COD_RACA);
      --DE PARA ESTADO CIVIL
      V_2405.BENEFICIARIO_ESTCIV      := FC_DEPARA_EST_CIV(C_2405.COD_EST_CIV);
      V_2405.BENEFICIARIO_INCFISMEN   := C_2405.FLG_INCAPAZ;
      V_2405.BENEFICIARIO_DTINCFISMEN := C_2405.DAT_INCAPACIDADE;
      --NUM NIS
      V_2405.BENEFICIARIO_NISBENEF := C_2405.NUM_NIS;
    
      --SE NÃO FOR UM NIS VÁLIDO, CONSIDERA NULO  
      IF NOT FC_VALIDA_NIT(V_2405.BENEFICIARIO_NISBENEF) AND
         NOT FC_VALIDA_PISPASEP(V_2405.BENEFICIARIO_NISBENEF) THEN
        V_2405.BENEFICIARIO_NISBENEF := NULL;
      END IF;
    
      --DE PARA TIPO DE LOGRADOURO
      V_2405.ENDERECO_TPLOGRAD  := FC_DEPARA_TIP_LOGRADOURO(C_2405.TIP_LOGRADOURO);
      V_2405.ENDERECO_DSCLOGRAD := C_2405.DESC_LOGRADOURO;
    
      BEGIN
        V_2405.ENDERECO_NRLOGRAD := NVL(C_2405.NUM_NUMERO, 'S/N');
      EXCEPTION
        WHEN OTHERS THEN
          V_2405.ENDERECO_NRLOGRAD := 'S/N';
      END;
    
      V_2405.ENDERECO_COMPLEMENTO := C_2405.DES_COMPLEMENTO;
      V_2405.ENDERECO_BAIRRO      := C_2405.NOM_BAIRRO;
      V_2405.ENDERECO_CEP         := C_2405.NUM_CEP;
      --DE PARA MUNICÍPIO
      V_2405.ENDERECO_CODMUNIC := FC_DEPARA_MUNICIP_IBGE(C_2405.COD_MUNICIPIO);
      V_2405.ENDERECO_UF       := C_2405.COD_UF;
      --DE PARA PAÍS DE RESIDENCIA
      V_2405.ENDERECO_PAISRESID := FC_DEPARA_PAIS_IBGE(C_2405.COD_PAIS);
      V_2405.ENDERECO_NMCID     := C_2405.NOM_CIDADE_EXTERIOR;
      V_2405.ENDERECO_CODPOSTAL := C_2405.COD_POSTAL_EXTERIOR;
      V_2405.ID_ORIGEM  := GB_ID_ORIGEM;
      V_2405.CTR_NUM_CPF        := C_2405.NUM_CPF;
      V_2405.CTR_DSC_EVENTO     := '2405';
      V_2405.CTR_FLG_STATUS     := 'AX'; --AGUARDANDO GERAÇÃO XML
      V_2405.FLG_VIGENCIA       := 'A';
    
      --VALIDA O EVENTO, CASO ENCONTRE ERRO ATUALIZA CTR_FLG_STATUS PARA 'EV' ERRO DE VALIDAÇÃO
      --ENVIA A LINHA DA TABELA DE EVENTO RECEBIDA, E A LINHA DE CADASTRO DE BENEFICIÁRIO
      SP_VALIDA_2405(V_2405, C_2405);
    
      BEGIN
        SP_INC_2405(V_2405);
      EXCEPTION
        WHEN OTHERS THEN
          GB_REC_ERRO.COD_INS           := GB_COD_INS;
          GB_REC_ERRO.ID_CAD            := V_2405.ID_PK;
          GB_REC_ERRO.NOM_PROCESSO      := 'SP_INC_2405';
          GB_REC_ERRO.TIPO_EVENTO       := '2405';
          GB_REC_ERRO.DESC_ERRO         := 'ERRO NA INSERÇÃO DO EVENTO 2405';
          GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
          GB_REC_ERRO.DES_IDENTIFICADOR := 'COD IDE CLI:' ||
                                           C_2405.COD_IDE_CLI_BEN;
          SP_GERA_ERRO_PROCESSO;
      END;
    
    END LOOP;
  
    /* EXCEPTION
    
    WHEN EX_EMPREGADOR THEN 
          GB_REC_ERRO.COD_INS      := GB_COD_INS;
          GB_REC_ERRO.ID_CAD       := NULL;
          GB_REC_ERRO.NOM_PROCESSO := 'SP_2405';
          GB_REC_ERRO.TIPO_EVENTO  := '2405';
          GB_REC_ERRO.DESC_ERRO    := 'NÃO HÁ EMPREGADOR ASSOCIADO PARA GERAÇÃO DO EVENTO';
          GB_REC_ERRO.DESC_ERRO_BD := SQLERRM;         
          GB_REC_ERRO.DES_IDENTIFICADOR := NULL;
        
          SP_GERA_ERRO_PROCESSO;*/
  
  END;

  PROCEDURE SP_RESET_2405(P_2405 IN OUT ESOCIAL.TSOC_2405_BENEFICIARIO_ALT%ROWTYPE) IS
  BEGIN
  
    P_2405.ID_PK := NULL;
    P_2405.SEQ_EVENTO            := NULL;
    P_2405.ID                    := NULL;
    P_2405.BENEFICIARIO_CPFBENEF := NULL;
    P_2405.ID_CAD_BENEFICIARIO   := NULL;
    P_2405.INDRETIF              := NULL;
    P_2405.NRRECIBO              := NULL;
    P_2405.TPAMB                 := NULL;
    P_2405.PROCEMI               := NULL;
    P_2405.VERPROC               := NULL;
    P_2405.BENEFICIARIO_NISBENEF    := NULL;
    P_2405.BENEFICIARIO_NMBENEFIC   := NULL;
    P_2405.BENEFICIARIO_DTINICIO    := NULL;
    P_2405.BENEFICIARIO_SEXO        := NULL;
    P_2405.BENEFICIARIO_RACACOR     := NULL;
    P_2405.BENEFICIARIO_ESTCIV      := NULL;
    P_2405.BENEFICIARIO_INCFISMEN   := NULL;
    P_2405.BENEFICIARIO_DTINCFISMEN := NULL;
    P_2405.DADOSNASC_NMMAE          := NULL; 
    P_2405.DADOSNASC_NMPAI          := NULL;
    P_2405.ENDERECO_TPLOGRAD        := NULL;
    P_2405.ENDERECO_DSCLOGRAD       := NULL;
    P_2405.ENDERECO_NRLOGRAD        := NULL;
    P_2405.ENDERECO_COMPLEMENTO     := NULL;
    P_2405.ENDERECO_BAIRRO          := NULL;
    P_2405.ENDERECO_CEP             := NULL;
    P_2405.ENDERECO_CODMUNIC        := NULL;
    P_2405.ENDERECO_UF              := NULL;
    P_2405.ENDERECO_PAISRESID       := NULL;
    P_2405.ENDERECO_NMCID           := NULL;
    P_2405.ENDERECO_CODPOSTAL       := NULL;
    P_2405.ID_ORIGEM        := NULL;
    P_2405.CTR_NUM_CPF              := NULL;
    P_2405.ID_LOTE             := NULL;  
    P_2405.CTR_DSC_EVENTO           := NULL;
    P_2405.CTR_FLG_STATUS           := NULL;
    P_2405.XML_ENVIO                := NULL;
    P_2405.FLG_VIGENCIA             := NULL;
    P_2405.DAT_ING                  := NULL;
    P_2405.DAT_ULT_ATU              := NULL;
    P_2405.NOM_USU_ULT_ATU          := NULL;
    P_2405.NOM_PRO_ULT_ATU          := NULL;  
  
  END SP_RESET_2405;

  FUNCTION FC_RET_SEQ_EVENTO_2405(P_SEQ_EVT IN ESOCIAL.TSOC_2405_BENEFICIARIO_ALT%ROWTYPE)
    RETURN ESOCIAL.TSOC_2405_BENEFICIARIO_ALT.SEQ_EVENTO%TYPE IS
    V_SEQ_EVENTO ESOCIAL.TSOC_2405_BENEFICIARIO_ALT.SEQ_EVENTO%TYPE;
  BEGIN
  
    SELECT NVL(MAX(BI.SEQ_EVENTO), 0) + 1
      INTO V_SEQ_EVENTO
      FROM ESOCIAL.TSOC_2405_BENEFICIARIO_ALT BI
     WHERE BI.COD_INS = P_SEQ_EVT.COD_INS
       AND BI.ID = P_SEQ_EVT.ID;
  
    RETURN V_SEQ_EVENTO;
  
  END FC_RET_SEQ_EVENTO_2405;
  
  PROCEDURE SP_VALIDA_2405(P_2405  IN OUT ESOCIAL.TSOC_2405_BENEFICIARIO_ALT%ROWTYPE,
                           PC_2405 IN ESOCIAL.TSOC_CAD_BENEFICIARIO%ROWTYPE) IS
  BEGIN
  
    --VERIFICA SE O CPF É NULO 
    --SE FOR NULO, INVALIDA O EVENTO
    IF P_2405.BENEFICIARIO_CPFBENEF IS NULL THEN
      P_2405.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2405.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_VALIDA_CPF';
      GB_REC_ERRO.TIPO_EVENTO       := '2405';
      GB_REC_ERRO.DESC_ERRO         := 'CPF NÃO INFORMADO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'NUM CPF:' ||
                                       P_2405.BENEFICIARIO_CPFBENEF;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
      --VERIFICA SE O CPF É INVALIDA, SE SIM, INVALIDA O EVENTO
    ELSIF NOT FC_VALIDA_CPF(P_2405.BENEFICIARIO_CPFBENEF) THEN
      P_2405.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2405.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_VALIDA_CPF';
      GB_REC_ERRO.TIPO_EVENTO       := '2405';
      GB_REC_ERRO.DESC_ERRO         := 'CPF INVÁLIDO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'NUM CPF:' ||
                                       P_2405.BENEFICIARIO_CPFBENEF;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    /*      --VALIDA NIS NULO      
    IF P_2405.BENEFICIARIO_NISBENEF IS NULL THEN   
        --P_2405.CTR_FLG_STATUS := 'EV';         
        GB_REC_ERRO.COD_INS      := GB_COD_INS;
        GB_REC_ERRO.ID_CAD       := P_2405.ID_PK;
        GB_REC_ERRO.NOM_PROCESSO := 'FC_VALIDA_NIT/FC_VALIDA_PIS';
        GB_REC_ERRO.TIPO_EVENTO  := '2405';
        GB_REC_ERRO.DESC_ERRO    := 'NIS/NIT/PIS/PASEP NÃO INFORMADO';
        GB_REC_ERRO.DESC_ERRO_BD := NULL;         
        GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO:' ||P_2405.ID_CAD_BENEFICIARIO;
        GB_REC_ERRO.FLG_TIPO_ERRO := 'W'; 
        SP_GERA_ERRO_PROCESSO;  */
    --VALIDA NIS INVÁLIDO
  
    --VALIDA NIS
    IF NOT FC_VALIDA_NIT(PC_2405.NUM_NIS) AND
       NOT FC_VALIDA_PISPASEP(PC_2405.NUM_NIS) THEN
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2405.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_VALIDA_NIT/FC_VALIDA_PIS';
      GB_REC_ERRO.TIPO_EVENTO       := '2405';
      GB_REC_ERRO.DESC_ERRO         := 'NIS/NIT/PIS/PASEP É INVÁLIDO E FOI CONSIDERADO COMO NULO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO:' ||
                                       P_2405.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --VALIDA NOME
    IF P_2405.BENEFICIARIO_NMBENEFIC IS NULL THEN
      P_2405.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2405.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_2405';
      GB_REC_ERRO.TIPO_EVENTO       := '2405';
      GB_REC_ERRO.DESC_ERRO         := 'NOME DO BENEFICIARIO NÃO PODE SER NULO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: ' ||
                                       P_2405.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    ELSIF LENGTH(PC_2405.NOM_BENEFICIARIO) > 70 THEN
      P_2405.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2405.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_2405';
      GB_REC_ERRO.TIPO_EVENTO       := '2405';
      GB_REC_ERRO.DESC_ERRO         := 'NOME DO BENEFICIARIO FOI ABREVIADO POR CONTER MAIS DE 70 CARACTERES';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'NOME: ' || PC_2405.NOM_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --RAÇA/COR NULA 
    IF P_2405.BENEFICIARIO_RACACOR IS NULL THEN
      P_2405.CTR_FLG_STATUS         := 'EV'; --ERRO NO EVENTO           
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2405.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_DEPARA_RACA_COR';
      GB_REC_ERRO.TIPO_EVENTO       := '2405';
      GB_REC_ERRO.DESC_ERRO         := 'RAÇA/COR NÃO IDENTIFICADA';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: ' ||
                                       P_2405.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --ESTADO CIVIL
    IF P_2405.BENEFICIARIO_ESTCIV IS NULL THEN
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2405.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_DEPARA_EST_CIV';
      GB_REC_ERRO.TIPO_EVENTO       := '2405';
      GB_REC_ERRO.DESC_ERRO         := 'ESTADO CIVIL NÃO IDENTIFICADO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: ' ||
                                       P_2405.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --VALIDA MUNICÍPIO DE NASCIMENTO
    --SE O PAÍS FOR BRASIL E O MUNICÍPIO DE NASCIMENTO FOR NULO, GERA ERRO NO EVENTO
    /*IF P_2405.DADOSNASC_PAISNASCTO = '105' AND
       P_2405.DADOSNASC_CODMUNIC IS NULL THEN
      P_2405.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2405.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_DEPARA_MUNICIP_IBGE';
      GB_REC_ERRO.TIPO_EVENTO       := '2405';
      GB_REC_ERRO.DESC_ERRO         := 'MUNICÍPIO DE NASCIMENTO NÃO PODE SER NULO PARA RESIDENTES NO BRASIL';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: ' ||
                                       P_2405.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --VALIDA PAÍS DE NASCIMENTO 
    IF P_2405.DADOSNASC_PAISNASCTO IS NULL THEN
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2405.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_DEPARA_PAIS_IBGE';
      GB_REC_ERRO.TIPO_EVENTO       := '2405';
      GB_REC_ERRO.DESC_ERRO         := 'CÓDIGO DO PAIS DE NASCIMENTO NÃO IDENTIFICADO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: ' ||
                                       P_2405.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --VALIDA NACIONALIDADE
    IF P_2405.DADOSNASC_PAISNAC IS NULL THEN
      P_2405.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2405.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_DEPARA_PAIS_NACION';
      GB_REC_ERRO.TIPO_EVENTO       := '2405';
      GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER NACIONALIDADE ESOCIAL';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: ' ||
                                       P_2405.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;*/
  
    /*       --VALIDA TIPO DE LOGRADOURO
     IF P_2405.ENDERECO_TPLOGRAD IS NULL THEN 
        P_2405.CTR_FLG_STATUS := 'EV'; 
        GB_REC_ERRO.COD_INS      := GB_COD_INS;
        GB_REC_ERRO.ID_CAD       := P_2405.ID_PK;
        GB_REC_ERRO.NOM_PROCESSO := 'FC_DEPARA_TIP_LOGRADOURO';
        GB_REC_ERRO.TIPO_EVENTO  := '2405';
        GB_REC_ERRO.DESC_ERRO    := 'TIPO DE LOGRADOURO NÃO IDENTIFICADO';
        GB_REC_ERRO.DESC_ERRO_BD := NULL;         
        GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: '||P_2405.ID_CAD_BENEFICIARIO;          
        GB_REC_ERRO.FLG_TIPO_ERRO := 'E';    
        SP_GERA_ERRO_PROCESSO; 
      END IF;
     
     --CÓDIGO DE MUNICÍPIO (DE PARA)
     IF P_2405.ENDERECO_CODMUNIC IS NULL THEN 
        P_2405.CTR_FLG_STATUS := 'EV';
        GB_REC_ERRO.COD_INS      :=  GB_COD_INS;
        GB_REC_ERRO.ID_CAD       :=  P_2405.ID_PK;
        GB_REC_ERRO.NOM_PROCESSO := 'FC_DEPARA_MUNICIP_IBGE';
        GB_REC_ERRO.TIPO_EVENTO  := '2405';
        GB_REC_ERRO.DESC_ERRO    := 'MUNICÍPIO DE ENDEREÇO NÃO IDENTIFICADO';
        GB_REC_ERRO.DESC_ERRO_BD := NULL;         
        GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: '||P_2405.ID_CAD_BENEFICIARIO;          
        SP_GERA_ERRO_PROCESSO;
      END IF;
      
     --PAÍS DE RESIDÊNCIA
     IF P_2405.ENDERECO_PAISRESID IS NULL THEN
        P_2405.CTR_FLG_STATUS := 'EV';
        GB_REC_ERRO.COD_INS      := GB_COD_INS;
        GB_REC_ERRO.ID_CAD       := P_2405.ID_PK;
        GB_REC_ERRO.NOM_PROCESSO := 'FC_DEPARA_PAIS_IBGE';
        GB_REC_ERRO.TIPO_EVENTO  := '2405';
        GB_REC_ERRO.DESC_ERRO    := 'ERRO AO OBTER O PAÍS IBGE PARA ENDERECO DE RESIDENCIA';
        GB_REC_ERRO.DESC_ERRO_BD := NULL;         
        GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: '||P_2405.ID_CAD_BENEFICIARIO;              
        SP_GERA_ERRO_PROCESSO;
    END IF;          */
  
    --VALIDA CAMPOS OBRIGATÓRIOS DE ENDEREÇO 
    IF P_2405.ENDERECO_PAISRESID = 105 THEN
      IF P_2405.ENDERECO_TPLOGRAD IS NULL OR
         P_2405.ENDERECO_DSCLOGRAD IS NULL OR
         P_2405.ENDERECO_NRLOGRAD IS NULL OR P_2405.ENDERECO_CEP IS NULL OR
         P_2405.ENDERECO_CODMUNIC IS NULL OR P_2405.ENDERECO_UF IS NULL THEN
        P_2405.CTR_FLG_STATUS := 'EV';
      
        GB_REC_ERRO.COD_INS           := GB_COD_INS;
        GB_REC_ERRO.ID_CAD            := P_2405.ID_PK;
        GB_REC_ERRO.NOM_PROCESSO      := 'SP_VALIDA_ENDERECO';
        GB_REC_ERRO.TIPO_EVENTO       := '2405';
        GB_REC_ERRO.DESC_ERRO         := 'ENDEREÇO INCOMPLETO PARA RESIDENTES NO BRASIL';
        GB_REC_ERRO.DESC_ERRO_BD      := NULL;
        GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO :' ||
                                         P_2405.ID_CAD_BENEFICIARIO;
        GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
        SP_GERA_ERRO_PROCESSO;
      END IF;
    
    ELSE
      IF P_2405.ENDERECO_PAISRESID IS NULL OR
         P_2405.ENDERECO_DSCLOGRAD IS NULL OR
         P_2405.ENDERECO_NRLOGRAD IS NULL OR P_2405.ENDERECO_NMCID IS NULL THEN
        P_2405.CTR_FLG_STATUS := 'EV';
      
        GB_REC_ERRO.COD_INS           := GB_COD_INS;
        GB_REC_ERRO.ID_CAD            := P_2405.ID_PK;
        GB_REC_ERRO.NOM_PROCESSO      := 'SP_VALIDA_ENDERECO';
        GB_REC_ERRO.TIPO_EVENTO       := '2405';
        GB_REC_ERRO.DESC_ERRO         := 'ENDEREÇO INCOMPLETO PARA RESIDENTE NO EXTERIOR';
        GB_REC_ERRO.DESC_ERRO_BD      := NULL;
        GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO :' ||
                                         P_2405.ID_CAD_BENEFICIARIO;
        GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
        SP_GERA_ERRO_PROCESSO;
      END IF;
    END IF;
  
    --VALIDA DATA DE INGRESSO
    IF P_2405.BENEFICIARIO_DTINICIO IS NULL THEN
      P_2405.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2405.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_2405';
      GB_REC_ERRO.TIPO_EVENTO       := '2405';
      GB_REC_ERRO.DESC_ERRO         := 'DATA DE INGRESSO DO BENEFICIÁRIO NÃO PODE SER NULA';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: ' ||
                                       P_2405.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --VALIDA SEXO BENEFICIÁRIO
    IF P_2405.BENEFICIARIO_SEXO IS NULL OR
       P_2405.BENEFICIARIO_SEXO NOT IN ('M', 'F') THEN
      P_2405.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2405.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_2405';
      GB_REC_ERRO.TIPO_EVENTO       := '2405';
      GB_REC_ERRO.DESC_ERRO         := 'COD SEXO DO BENEFICIÁRIO INVÁLIDO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: ' ||
                                       P_2405.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --VALIDA INCAPACIDADE FÍSICA 
    IF P_2405.BENEFICIARIO_INCFISMEN IS NULL OR
       P_2405.BENEFICIARIO_INCFISMEN NOT IN ('S', 'N') THEN
      P_2405.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2405.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_2405';
      GB_REC_ERRO.TIPO_EVENTO       := '2405';
      GB_REC_ERRO.DESC_ERRO         := 'INDICADOR DE INCAPACIDADE FÍSICA INVÁLIDO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: ' ||
                                       P_2405.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --SE A INCAPCIDADE FÍSICA = 'S', A DATA DEVE SER PREENCHIDA
    IF P_2405.BENEFICIARIO_INCFISMEN = 'S' AND
       P_2405.BENEFICIARIO_DTINCFISMEN IS NULL THEN
      P_2405.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2405.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_2405';
      GB_REC_ERRO.TIPO_EVENTO       := '2405';
      GB_REC_ERRO.DESC_ERRO         := 'DATA DA INCAPACIDADE FÍSICA OBRIGATÓRIA';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: ' ||
                                       P_2405.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --VALIDA DATA DE NASCIMENTO 
    /*IF P_2405.DADOSNASC_DTNASCTO IS NULL THEN
      P_2405.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2405.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_2405';
      GB_REC_ERRO.TIPO_EVENTO       := '2405';
      GB_REC_ERRO.DESC_ERRO         := 'DATA DE NASCIMENTO NÃO PODE SER NULA';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID_CAD_BENEFICIARIO: ' ||
                                       P_2405.ID_CAD_BENEFICIARIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;*/
  
    --VALIDA NOME DA MÃE
    IF LENGTH(PC_2405.NOM_MAE) > 70 THEN
      P_2405.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2405.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_2405';
      GB_REC_ERRO.TIPO_EVENTO       := '2405';
      GB_REC_ERRO.DESC_ERRO         := 'NOME DA MÃE DO BENEFICIARIO FOI ABREVIADO POR CONTER MAIS DE 70 CARACTERES';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'NOME: ' || PC_2405.NOM_MAE;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --VALIDA NOME DO PAI
    IF LENGTH(PC_2405.NOM_PAI) > 70 THEN
      P_2405.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2405.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_2405';
      GB_REC_ERRO.TIPO_EVENTO       := '2405';
      GB_REC_ERRO.DESC_ERRO         := 'NOME DO PAI DO BENEFICIARIO FOI ABREVIADO POR CONTER MAIS DE 70 CARACTERES';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'NOME: ' || PC_2405.NOM_PAI;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
  END SP_VALIDA_2405;
  
  PROCEDURE SP_INC_2405(P_2405 IN ESOCIAL.TSOC_2405_BENEFICIARIO_ALT%ROWTYPE) IS
  BEGIN
    
    INSERT INTO TSOC_2405_BENEFICIARIO_ALT
      (ID_PK,
       COD_INS,
       SEQ_EVENTO,
       ID,
       BENEFICIARIO_CPFBENEF,
       ID_CAD_BENEFICIARIO,
       ID_PERIODO_DET,
       INDRETIF,
       NRRECIBO,
       TPAMB,
       PROCEMI,
       VERPROC,
       TPINSC,
       NRINSC,
       BENEFICIARIO_NISBENEF,
       BENEFICIARIO_NMBENEFIC,
       BENEFICIARIO_DTINICIO,
       BENEFICIARIO_SEXO,
       BENEFICIARIO_RACACOR,
       BENEFICIARIO_ESTCIV,
       BENEFICIARIO_INCFISMEN,
       BENEFICIARIO_DTINCFISMEN,
       DADOSNASC_PAISNAC,
       DADOSNASC_NMMAE,
       DADOSNASC_NMPAI,
       ENDERECO_TPLOGRAD,
       ENDERECO_DSCLOGRAD,
       ENDERECO_NRLOGRAD,
       ENDERECO_COMPLEMENTO,
       ENDERECO_BAIRRO,
       ENDERECO_CEP,
       ENDERECO_CODMUNIC,
       ENDERECO_UF,
       ENDERECO_PAISRESID,
       ENDERECO_NMCID,
       ENDERECO_CODPOSTAL,
       ID_ORIGEM,
       CTR_NUM_CPF,
       ID_LOTE,
       CTR_DSC_EVENTO,
       CTR_FLG_STATUS,
       XML_ENVIO,
       FLG_VIGENCIA,
       DAT_ING,
       DAT_ULT_ATU,
       NOM_USU_ULT_ATU,
       NOM_PRO_ULT_ATU)
    VALUES
      (P_2405.ID_PK,
       P_2405.COD_INS,
       P_2405.SEQ_EVENTO,
       P_2405.ID,
       P_2405.BENEFICIARIO_CPFBENEF,
       P_2405.ID_CAD_BENEFICIARIO,
       P_2405.ID_PERIODO_DET,
       P_2405.INDRETIF,
       P_2405.NRRECIBO,
       P_2405.TPAMB,
       P_2405.PROCEMI,
       P_2405.VERPROC,
       P_2405.TPINSC,
       P_2405.NRINSC,
       P_2405.BENEFICIARIO_NISBENEF,
       P_2405.BENEFICIARIO_NMBENEFIC,
       P_2405.BENEFICIARIO_DTINICIO,
       P_2405.BENEFICIARIO_SEXO,
       P_2405.BENEFICIARIO_RACACOR,
       P_2405.BENEFICIARIO_ESTCIV,
       P_2405.BENEFICIARIO_INCFISMEN,
       P_2405.BENEFICIARIO_DTINCFISMEN,
       P_2405.DADOSNASC_PAISNAC,
       P_2405.DADOSNASC_NMMAE,
       P_2405.DADOSNASC_NMPAI,
       P_2405.ENDERECO_TPLOGRAD,
       P_2405.ENDERECO_DSCLOGRAD,
       P_2405.ENDERECO_NRLOGRAD,
       P_2405.ENDERECO_COMPLEMENTO,
       P_2405.ENDERECO_BAIRRO,
       P_2405.ENDERECO_CEP,
       P_2405.ENDERECO_CODMUNIC,
       P_2405.ENDERECO_UF,
       P_2405.ENDERECO_PAISRESID,
       P_2405.ENDERECO_NMCID,
       P_2405.ENDERECO_CODPOSTAL,
       P_2405.ID_ORIGEM,
       P_2405.CTR_NUM_CPF,
       P_2405.ID_LOTE,
       P_2405.CTR_DSC_EVENTO,
       P_2405.CTR_FLG_STATUS,
       P_2405.XML_ENVIO,
       P_2405.FLG_VIGENCIA,
       SYSDATE,
       SYSDATE,
       'ESOCIAL',
       'SP_INC_2405');
       
    COMMIT;
  
  END SP_INC_2405;

  --TASK41563  LNUNES 27/08/2018 FUNÇÃO PARA RETORNAR O ID JÁ EXISTENTE (RETIFICAÇÕES)
  --PARÂMETROS P_TIP_EVENTO  - 2400, 2405, 2410
  --           P_ID_CADASTRO - ID DAS TABELAS DE CADASTRO
  FUNCTION FC_RET_ID_EVENTO_EXISTENTE(P_TIP_EVENTO VARCHAR2, P_ID_CADASTRO NUMBER) 
    RETURN VARCHAR2 IS
    
    V_ID_EVENTO VARCHAR2(36);
    
  BEGIN
    
    IF P_TIP_EVENTO = '2400' THEN
      --BENEFICIÁRIO
      BEGIN
        SELECT B.ID
          INTO V_ID_EVENTO
          FROM ESOCIAL.TSOC_2400_BENEFICIARIO_INI B
         WHERE B.ID_CAD_BENEFICIARIO = P_ID_CADASTRO
           AND NOT EXISTS
         (SELECT 1
                  FROM ESOCIAL.TSOC_2400_BENEFICIARIO_INI B1
                 WHERE B1.ID_CAD_BENEFICIARIO = B.ID_CAD_BENEFICIARIO
                   AND B1.CTR_FLG_STATUS IN ('EN', 'RT', 'FN'));
         --CANCELAR OS EVENTOS EXISTENTES
         UPDATE TSOC_2400_BENEFICIARIO_INI
            SET FLG_VIGENCIA = 'C',
                DAT_ULT_ATU = SYSDATE,
                NOM_USU_ULT_ATU = 'ESOCIAL',
                NOM_PRO_ULT_ATU = 'FC_RET_ID_EVENTO_EXISTENTE'
          WHERE ID_CAD_BENEFICIARIO = P_ID_CADASTRO
            AND FLG_VIGENCIA <> 'C';          
          
          COMMIT;
                   
       EXCEPTION
         WHEN NO_DATA_FOUND THEN
           V_ID_EVENTO := NULL;
       END;
       
    ELSIF P_TIP_EVENTO = '2405' THEN
      --ALTERAÇÃO DE BENEFICIÁRIO
      BEGIN
        SELECT B.ID
          INTO V_ID_EVENTO
          FROM ESOCIAL.TSOC_2405_BENEFICIARIO_ALT B
         WHERE B.ID_CAD_BENEFICIARIO = P_ID_CADASTRO
           AND NOT EXISTS
         (SELECT 1
                  FROM ESOCIAL.TSOC_2405_BENEFICIARIO_ALT B1
                 WHERE B1.ID_CAD_BENEFICIARIO = B.ID_CAD_BENEFICIARIO
                   AND B1.CTR_FLG_STATUS IN ('EN', 'RT', 'FN'));
         --CANCELAR OS EVENTOS EXISTENTES          
         UPDATE TSOC_2405_BENEFICIARIO_ALT
            SET FLG_VIGENCIA = 'C',
                DAT_ULT_ATU = SYSDATE,
                NOM_USU_ULT_ATU = 'ESOCIAL',
                NOM_PRO_ULT_ATU = 'FC_RET_ID_EVENTO_EXISTENTE'
          WHERE ID_CAD_BENEFICIARIO = P_ID_CADASTRO
            AND FLG_VIGENCIA <> 'C';
          
          COMMIT;
            
       EXCEPTION
         WHEN NO_DATA_FOUND THEN
           V_ID_EVENTO := NULL;
       END;
       
    ELSIF P_TIP_EVENTO = '2410' THEN
      --BENEFÍCIO
      BEGIN
        SELECT ID
          INTO V_ID_EVENTO
          FROM ESOCIAL.TSOC_2410_BENEFICIO_INI B
         WHERE B.ID_CAD_BENEFICIO = P_ID_CADASTRO
           AND NOT EXISTS
         (SELECT 1
                  FROM ESOCIAL.TSOC_2410_BENEFICIO_INI B1
                 WHERE B1.ID_CAD_BENEFICIO = B.ID_CAD_BENEFICIO
                   AND B1.CTR_FLG_STATUS IN ('EN', 'RT', 'FN'));
         --CANCELAR OS EVENTOS EXISTENTES
         UPDATE TSOC_2410_BENEFICIO_INI
            SET FLG_VIGENCIA = 'C',
                DAT_ULT_ATU = SYSDATE,
                NOM_USU_ULT_ATU = 'ESOCIAL',
                NOM_PRO_ULT_ATU = 'FC_RET_ID_EVENTO_EXISTENTE'
          WHERE ID_CAD_BENEFICIO = P_ID_CADASTRO
            AND FLG_VIGENCIA <> 'C';
          
          COMMIT;
                                      
       EXCEPTION
         WHEN NO_DATA_FOUND THEN
           V_ID_EVENTO := NULL;
       END;
    END IF;
    
    RETURN V_ID_EVENTO;
    
  END FC_RET_ID_EVENTO_EXISTENTE;
  
  /***** FIM 2405 - ALTERAÇÃO DE BENEFICIÁRIO *****/
  
  /***** INÍCIO 2416/2420 - ALTERAÇÃO DE BENEFÍCIO *****/  
  
  --VERIFICA OS BENEFÍCIOS QUE TIVERAM ALGUMA ALTERAÇÃO
  PROCEDURE SP_ALT_BENEFICIO(P_COD_INS IN ESOCIAL.TSOC_CAD_BENEFICIARIO.COD_INS%TYPE,
                             P_ID_CTR_PROCESSO IN ESOCIAL.TSOC_CTR_PROCESSO.ID_CTR_PROCESSO%TYPE) IS
    V_CAD_BENEFICIO ESOCIAL.TSOC_CAD_BENEFICIO%ROWTYPE;
  
    V_BENEFICIO_DADOS_ORIGINAIS GB_C_ALT_BENEFICIO%ROWTYPE;
    V_DADOS_BENEF_DIFERENTES    BOOLEAN;
    V_BENEFICIO_EXTINTO         BOOLEAN;
     
  BEGIN
  
    --PADRONIZA PARAMETROS DE SESSÃO
    SP_DEFAULT_SESSION;
  
    --GERA O NÚMERO DO PROCESSO (CONTROLE)
    GB_REC_ERRO.NUM_PROCESSO := ESOCIAL.ESOC_SEQ_NUM_PROCESSO.NEXTVAL;
  
    GB_COD_INS := P_COD_INS;           
    
    SP_CARREGA_IDS(P_ID_CTR_PROCESSO);
    
    SP_SETA_PROCESSO(P_ID_CTR_PROCESSO, 'INICIO_PROCESSAMENTO');             
  
    FOR C_CAD_BENEFICIO IN GB_C_ALT_BENEFICIO
    
     LOOP
    
      --GUARDANDO O RESULTADO DO CURSOR NA VARIÁVEL
      V_BENEFICIO_DADOS_ORIGINAIS := C_CAD_BENEFICIO;
    
      --PARAMETRIZA CAMPOS DE FOLHA DE PAGAMENTO-----------------
      GB_FOLHA.COD_INS       := GB_COD_INS;
      GB_FOLHA.SEQ_PAGAMENTO := 1;
      GB_FOLHA.TIP_PROCESSO  := 'N';     
      GB_FOLHA.COD_IDE_CLI   := C_CAD_BENEFICIO.COD_IDE_CLI_BEN;
      GB_FOLHA.COD_BENEFICIO := C_CAD_BENEFICIO.COD_BENEFICIO;
      --GB_FOLHA.PER_PROCESSO  := FC_RET_PRIMEIRA_FOLHA;'
      -------------------------------------------------------------
    
      --ZERA VARÍAVEIS      
      SP_RESET_CAD_BENEFICIO(V_CAD_BENEFICIO);
      --OBTÉM ID DE CADASTRO DO BENEFÍCIO  
      --V_CAD_BENEFICIO.ID_CAD_BENEFICIO := ESOCIAL.ESOC_SEQ_ID_CAD_BENEFICIO.NEXTVAL;
      --OBTÉM COD_INS 
      V_CAD_BENEFICIO.COD_INS := GB_COD_INS;
      --OBTÉM COD_IDE_CLI DO BENEFICIÁRIO
      V_CAD_BENEFICIO.COD_IDE_CLI_BEN := C_CAD_BENEFICIO.COD_IDE_CLI_BEN;
      --OBTÉM CÓDIGO DO BENEFÍCIO
      V_CAD_BENEFICIO.COD_BENEFICIO := C_CAD_BENEFICIO.COD_BENEFICIO;
      --OBTÉM ID DE CADASTRO DO BENEFICIÁRIO
      V_CAD_BENEFICIO.ID_CAD_BENEFICIARIO := C_CAD_BENEFICIO.ID_CAD_BENEFICIARIO;
      --OBTÉM SEQUENCIA CADASTRAL DO BENEFÍCIO
      BEGIN
        V_CAD_BENEFICIO.SEQ_CAD := FC_RET_SEQ_CAD_BENEFICIO(V_CAD_BENEFICIO);
      EXCEPTION
        WHEN OTHERS THEN
          GB_REC_ERRO.COD_INS           := GB_COD_INS;
          GB_REC_ERRO.ID_CAD            := V_CAD_BENEFICIO.ID_CAD_BENEFICIARIO;
          GB_REC_ERRO.NOM_PROCESSO      := 'FC_RET_SEQ_CAD_BENEFICIO';
          GB_REC_ERRO.TIPO_EVENTO       := '2410';
          GB_REC_ERRO.DESC_ERRO         := 'ERRO NA GERACAO DE SEQUENCIAL CADASTRAL DE BENEFICIÁRIO';
          GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
          GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BENEFICIO.COD_IDE_CLI_BEN;
          GB_REC_ERRO.FLG_TIPO_ERRO     := 'X';
          SP_GERA_ERRO_PROCESSO;
      END;
    
      /*
      --OBTÉM O NÚMERO DE MATRÍCULA
      V_CAD_BENEFICIO.NUM_MATRICULA := C_CAD_BENEFICIO.NUM_MATRICULA;
      --OBTÉM CÓDIGO DA ENTIDADE
      V_CAD_BENEFICIO.COD_ENTIDADE := C_CAD_BENEFICIO.COD_ENTIDADE;
      --OBTÉM O NÚMERO DE CPF DO BENEFICIÁRIO
      V_CAD_BENEFICIO.NUM_CPF_BENEF := C_CAD_BENEFICIO.NUM_CPF_BENEF;
      --SE {CADINI} = [S], DEVE SER ANTERIOR À DATA DE INÍCIO DA OBRIGATORIEDADE DOS EVENTOS NÃO PERIÓDICOS PARA ENTES PÚBLICOS NO ESOCIAL;SE {CADINI} = [N], DEVE SER IGUAL OU POSTERIOR À DATA DE INÍCIO DA OBRIGATORIEDADE DOS EVENTOS NÃO PERIÓDICOS PARA ENTES PÚBLICOS NO ESOCIAL E IGUAL OU ANTERIOR À DATA ATUAL.
      V_CAD_BENEFICIO.DAT_INIBEN := C_CAD_BENEFICIO.DAT_INIBEN;
      --TIPO DE BENEFÍCIO SIGEPREV
      V_CAD_BENEFICIO.COD_TIPO_BENEFICIO := C_CAD_BENEFICIO.COD_TIPO_BENEFICIO;
      --CARGO DO BENEFÍCIO (CONCESSAO) 
      V_CAD_BENEFICIO.COD_CARGO := C_CAD_BENEFICIO.COD_CARGO;      
      */
    
      --ONTEM INFORMAÇÕES DO BENEFICIO
      BEGIN
        SP_RET_INFO_BENEFICIO(V_CAD_BENEFICIO);
      EXCEPTION
        WHEN OTHERS THEN
          GB_REC_ERRO.COD_INS           := GB_COD_INS;
          GB_REC_ERRO.ID_CAD            := V_CAD_BENEFICIO.ID_CAD_BENEFICIARIO;
          GB_REC_ERRO.NOM_PROCESSO      := 'SP_RET_INFO_BENEFICIO';
          GB_REC_ERRO.TIPO_EVENTO       := '2416';
          GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER INFORMAÇÕES DO BENEFÍCIO';
          GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
          GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BENEFICIO.COD_IDE_CLI_BEN;
          GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
          SP_GERA_ERRO_PROCESSO;
      END;
    
      --OBTÉM O CNPJ DA ENTIDADE
      BEGIN
        V_CAD_BENEFICIO.NUM_CNPJ_ENTIDADE := FC_RET_CNPJ_ENT(C_CAD_BENEFICIO.COD_ENTIDADE);
      EXCEPTION
        WHEN OTHERS THEN
          GB_REC_ERRO.COD_INS           := GB_COD_INS;
          GB_REC_ERRO.ID_CAD            := V_CAD_BENEFICIO.ID_CAD_BENEFICIARIO;
          GB_REC_ERRO.NOM_PROCESSO      := 'FC_RET_CNPJ_ENT';
          GB_REC_ERRO.TIPO_EVENTO       := '2416';
          GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER CNPJ DA ENTIDADE';
          GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
          GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BENEFICIO.COD_IDE_CLI_BEN;
          GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
          SP_GERA_ERRO_PROCESSO;
      END;
    
      --INDICAR SE A DATA DE INÍCIO DO BENEFÍCIO É ANTERIOR À OBRIGATORIEDADE DOS EVENTOS NÃO PERIÓDICOS PARA ENTES PÚBLICOS NO ESOCIAL:    
      BEGIN
        V_CAD_BENEFICIO.FLG_DAT_BEN_ANTERIOR := FC_RET_FLG_DAT_BEN_ANT(V_CAD_BENEFICIO);
      EXCEPTION
        WHEN OTHERS THEN
          GB_REC_ERRO.COD_INS           := GB_COD_INS;
          GB_REC_ERRO.ID_CAD            := V_CAD_BENEFICIO.ID_CAD_BENEFICIARIO;
          GB_REC_ERRO.NOM_PROCESSO      := 'FC_RET_FLG_DAT_BEN_ANT';
          GB_REC_ERRO.TIPO_EVENTO       := '2416';
          GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER INDICADOR DE DATA DE INÍCIO DE BENEFÍCIO';
          GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
          GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BENEFICIO.COD_IDE_CLI_BEN;
          GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
          SP_GERA_ERRO_PROCESSO;
      END;
    
      --VALOR INICIAL DO BENEFÍCIO (PRIMEIRA FOLHA)    
      BEGIN
        V_CAD_BENEFICIO.VAL_INI_BEN := FC_OBTEM_HBRUTO(C_CAD_BENEFICIO.COD_TIPO_BENEFICIO,
                                                       C_CAD_BENEFICIO.DAT_INIBEN,
                                                       C_CAD_BENEFICIO.COD_ENTIDADE);
      
      EXCEPTION
        WHEN OTHERS THEN
          GB_REC_ERRO.COD_INS           := GB_COD_INS;
          GB_REC_ERRO.ID_CAD            := V_CAD_BENEFICIO.ID_CAD_BENEFICIARIO;
          GB_REC_ERRO.NOM_PROCESSO      := 'FC_RET_VALBRUTO';
          GB_REC_ERRO.TIPO_EVENTO       := '2416';
          GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER VALOR DO BENEFÍCIO';
          GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
          GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BENEFICIO.COD_IDE_CLI_BEN;
          GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
          SP_GERA_ERRO_PROCESSO;
      END;
    
      V_CAD_BENEFICIO.TIP_PLAN_SEG := 0;
      --NO DE-PARA, NÃO EXISTE OPÇÃO INCLUSÃO NO GRUPO 11 DE TIPOS DE BENEFÍCIOS,A COLUNA SÓ É OBRIGATÓRIA SE O TIVE DE BENEFÍCIO ESTIVER NO GRUPO 11.
      V_CAD_BENEFICIO.DESC_ORIG_PAG_BEN := NULL;
      --AGUARDANDO DEFINIÇÃO EM CASO DE INATIVIDADE OU APOSENTADORIA LEGADO
      BEGIN
        V_CAD_BENEFICIO.FLG_BEN_JUD := FC_FLG_BEN_JUD(C_CAD_BENEFICIO.COD_BENEFICIO,
                                                      C_CAD_BENEFICIO.COD_TIPO_BENEFICIO,
                                                      C_CAD_BENEFICIO.COD_ENTIDADE,
                                                      C_CAD_BENEFICIO.COD_IDE_REL_FUNC,
                                                      C_CAD_BENEFICIO.COD_IDE_CLI_BEN,
                                                      C_CAD_BENEFICIO.COD_PROC_GRP_PAG);
      EXCEPTION
        WHEN OTHERS THEN
          GB_REC_ERRO.COD_INS           := GB_COD_INS;
          GB_REC_ERRO.ID_CAD            := V_CAD_BENEFICIO.ID_CAD_BENEFICIARIO;
          GB_REC_ERRO.NOM_PROCESSO      := 'FC_FLG_BEN_JUD';
          GB_REC_ERRO.TIPO_EVENTO       := '2416';
          GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER INDICADOR DE BENEFÍCIO JUDICIAL';
          GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
          GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BENEFICIO.COD_IDE_CLI_BEN;
          GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
          SP_GERA_ERRO_PROCESSO;
      END;
    
      --SE O BENEFÍCIO FOR DE PENSÃO, RETORNA INFORMAÇÕES DE PENSÃO---------------------------------------
      IF V_CAD_BENEFICIO.COD_TIPO_BENEFICIO = 'M' THEN
        --OBTÉM PERFIL/PARENTESCO 
        BEGIN
          V_CAD_BENEFICIO.COD_TIPO_PENSAO := FC_OBTEM_PERFIL_PARENTESCO(C_CAD_BENEFICIO.COD_BENEFICIO,
                                                                        C_CAD_BENEFICIO.COD_PERFIL,
                                                                        C_CAD_BENEFICIO.COD_IDE_CLI_BEN,
                                                                        C_CAD_BENEFICIO.COD_IDE_CLI_SERV);
        EXCEPTION
          WHEN OTHERS THEN
            GB_REC_ERRO.COD_INS           := GB_COD_INS;
            GB_REC_ERRO.ID_CAD            := V_CAD_BENEFICIO.ID_CAD_BENEFICIARIO;
            GB_REC_ERRO.NOM_PROCESSO      := 'FC_OBTEM_PERFIL_PARENTESCO';
            GB_REC_ERRO.TIPO_EVENTO       := '2416';
            GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER PERFIL/PARENTESCO DO BENEFICIÁRIO';
            GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
            GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BENEFICIO.COD_IDE_CLI_BEN;
            GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
            SP_GERA_ERRO_PROCESSO;
        END;
        --OBTÉM INFORMAÇÕES DO INSTITUIDOR DE PENSÃO 
        BEGIN
          SP_RET_INFO_INST(V_CAD_BENEFICIO,
                           C_CAD_BENEFICIO.COD_IDE_CLI_SERV);
        EXCEPTION
          WHEN OTHERS THEN
            GB_REC_ERRO.COD_INS           := GB_COD_INS;
            GB_REC_ERRO.ID_CAD            := V_CAD_BENEFICIO.ID_CAD_BENEFICIARIO;
            GB_REC_ERRO.NOM_PROCESSO      := 'SP_RET_INFO_INST';
            GB_REC_ERRO.TIPO_EVENTO       := '2416';
            GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER DADOS DO INSTITUIDOR DE PENSÃO';
            GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
            GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BENEFICIO.COD_IDE_CLI_BEN;
            GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
            SP_GERA_ERRO_PROCESSO;
        END;
      ELSE
        V_CAD_BENEFICIO.COD_TIPO_PENSAO     := NULL;
        V_CAD_BENEFICIO.NUM_CPF_INST        := NULL;
        V_CAD_BENEFICIO.DAT_OBITO_INST      := NULL;
        V_CAD_BENEFICIO.FLG_INST_APOSENTADO := NULL;
      END IF;
      ----------------------------------------------------------------------------------------------------
    
      --AGUARDANDO DEFINIÇÃO----------------------
      V_CAD_BENEFICIO.FLG_BEN_TC       := 'N';
      V_CAD_BENEFICIO.DAT_HOMOLOG_TC   := NULL;
      V_CAD_BENEFICIO.NUM_ATO_LEGAL_TC := NULL;
      ---------------------------------------------
    
      --ATUALIZA CADASTRO DE BENEFÍCIO E INSERE NA TABELA DE HISTÓRICO
      IF GB_REC_ERRO.FLG_TIPO_ERRO <> 'X' OR
         GB_REC_ERRO.FLG_TIPO_ERRO IS NULL THEN
         
        BEGIN
          --VERIFICANDO SE O BENEFÍCIO ESTÁ EXTINTO
          V_BENEFICIO_EXTINTO := FC_BENEFICIO_EXTINTO(V_BENEFICIO_DADOS_ORIGINAIS,
                                                      V_CAD_BENEFICIO);
        EXCEPTION
          WHEN OTHERS THEN
            GB_REC_ERRO.COD_INS           := GB_COD_INS;
            GB_REC_ERRO.ID_CAD            := V_CAD_BENEFICIO.ID_CAD_BENEFICIO;
            GB_REC_ERRO.NOM_PROCESSO      := 'FC_BENEFICIO_EXTINTO';
            GB_REC_ERRO.TIPO_EVENTO       := '2416';
            GB_REC_ERRO.DESC_ERRO         := 'ERRO AO COMPARAR SE O BENEFÍCIO ESTÁ EXTINTO';
            GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
            GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BENEFICIO.COD_IDE_CLI_BEN;
            GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
            SP_GERA_ERRO_PROCESSO;
        END;
         
        IF V_BENEFICIO_EXTINTO THEN
          
          --BEGIN
            --INCLUI O REGISTRO ORIGINAL NA TABELA DE HISTÓRICO
            SP_INC_TSOC_HCAD_BENEFICIO(V_BENEFICIO_DADOS_ORIGINAIS);
          /*EXCEPTION
            WHEN OTHERS THEN
              GB_REC_ERRO.COD_INS           := GB_COD_INS;
              GB_REC_ERRO.ID_CAD            := V_CAD_BENEFICIO.ID_CAD_BENEFICIARIO;
              GB_REC_ERRO.NOM_PROCESSO      := 'SP_INC_TSOC_HCAD_BENEFICIO';
              GB_REC_ERRO.TIPO_EVENTO       := NULL;
              GB_REC_ERRO.DESC_ERRO         := 'ERRO AO INCLUIR HISTÓRICO DE CADASTRO DO BENEFÍCIO';
              GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
              GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BENEFICIO.COD_IDE_CLI_BEN;
              GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
              SP_GERA_ERRO_PROCESSO;
          END;*/
          
          BEGIN
            --ATUALIZA CADASTRO DE BENEFÍCIO
            SP_ATU_TSOC_CAD_BENEFICIO(V_CAD_BENEFICIO,'FLG_STATUS');
          EXCEPTION
            WHEN OTHERS THEN
              GB_REC_ERRO.COD_INS           := GB_COD_INS;
              GB_REC_ERRO.ID_CAD            := V_CAD_BENEFICIO.ID_CAD_BENEFICIARIO;
              GB_REC_ERRO.NOM_PROCESSO      := 'SP_ATU_TSOC_CAD_BENEFICIO';
              GB_REC_ERRO.TIPO_EVENTO       := '2416';
              GB_REC_ERRO.DESC_ERRO         := 'ERRO AO ATUALIZAR O CADASTRO DO BENEFÍCIO';
              GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
              GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BENEFICIO.COD_IDE_CLI_BEN;
              GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
              SP_GERA_ERRO_PROCESSO;
          END;         
          
          --REGRA: GERA NOVO REGISTRO NA 2420
        
          --RECEBE A DATA DE INÍCIO E FIM DA GERAÇÃO DO EVENTO
          --PARA CONTROLE DE ID DE EVENTO.
        
          GB_DAT_EVT_ANT := GB_DAT_EVT_ATU;
          GB_DAT_EVT_ATU := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MMSS');
          SP_2420(V_BENEFICIO_DADOS_ORIGINAIS.ID_CAD_BENEFICIO);           
        
        ELSE
          
          BEGIN
            --VERIFICANDO SE OS DADOS DO BENEFÍCIO SÃO DIFERENTES
            V_DADOS_BENEF_DIFERENTES := FC_DADOS_BENEF_DIFERENTES(V_BENEFICIO_DADOS_ORIGINAIS,
                                                                  V_CAD_BENEFICIO);
          EXCEPTION
            WHEN OTHERS THEN
              GB_REC_ERRO.COD_INS           := GB_COD_INS;
              GB_REC_ERRO.ID_CAD            := V_CAD_BENEFICIO.ID_CAD_BENEFICIO;
              GB_REC_ERRO.NOM_PROCESSO      := 'FC_DADOS_BENEF_DIFERENTES';
              GB_REC_ERRO.TIPO_EVENTO       := '2416';
              GB_REC_ERRO.DESC_ERRO         := 'ERRO AO COMPARAR SE OS DADOS DO BENEFÍCIO SÃO DIFERENTES';
              GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
              GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BENEFICIO.COD_IDE_CLI_BEN;
              GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
              SP_GERA_ERRO_PROCESSO;
          END;
          
          IF V_DADOS_BENEF_DIFERENTES THEN
            
            BEGIN
              --INCLUI O REGISTRO ORIGINAL NA TABELA DE HISTÓRICO
              SP_INC_TSOC_HCAD_BENEFICIO(V_BENEFICIO_DADOS_ORIGINAIS);
            EXCEPTION
              WHEN OTHERS THEN
                GB_REC_ERRO.COD_INS           := GB_COD_INS;
                GB_REC_ERRO.ID_CAD            := V_CAD_BENEFICIO.ID_CAD_BENEFICIARIO;
                GB_REC_ERRO.NOM_PROCESSO      := 'SP_INC_TSOC_HCAD_BENEFICIO';
                GB_REC_ERRO.TIPO_EVENTO       := '2416';
                GB_REC_ERRO.DESC_ERRO         := 'ERRO AO INCLUIR HISTÓRICO DE CADASTRO DO BENEFÍCIO';
                GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
                GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BENEFICIO.COD_IDE_CLI_BEN;
                GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
                SP_GERA_ERRO_PROCESSO;
            END;
            
            BEGIN
              --ATUALIZA CADASTRO DE BENEFÍCIO
              SP_ATU_TSOC_CAD_BENEFICIO(V_CAD_BENEFICIO,'OUTROS_DADOS');
            EXCEPTION
              WHEN OTHERS THEN
                GB_REC_ERRO.COD_INS           := GB_COD_INS;
                GB_REC_ERRO.ID_CAD            := V_CAD_BENEFICIO.ID_CAD_BENEFICIARIO;
                GB_REC_ERRO.NOM_PROCESSO      := 'SP_ATU_TSOC_CAD_BENEFICIO';
                GB_REC_ERRO.TIPO_EVENTO       := '2416';
                GB_REC_ERRO.DESC_ERRO         := 'ERRO AO ATUALIZAR O CADASTRO DO BENEFÍCIO';
                GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
                GB_REC_ERRO.DES_IDENTIFICADOR := V_CAD_BENEFICIO.COD_IDE_CLI_BEN;
                GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
                SP_GERA_ERRO_PROCESSO;
            END;         
            
            --REGRA: GERA NOVO REGISTRO NA 2416
          
            --RECEBE A DATA DE INÍCIO E FIM DA GERAÇÃO DO EVENTO
            --PARA CONTROLE DE ID DE EVENTO.
          
            GB_DAT_EVT_ANT := GB_DAT_EVT_ATU;
            GB_DAT_EVT_ATU := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MMSS');
            SP_2416(V_BENEFICIO_DADOS_ORIGINAIS.ID_CAD_BENEFICIO); 
          
          END IF;
        
        END IF;
        
      END IF;
   
      SP_SETA_PROCESSO(P_ID_CTR_PROCESSO, 'ATUALIZA_QUANTIDADE');          
    
    END LOOP;
    
    SP_SETA_PROCESSO(P_ID_CTR_PROCESSO, 'FIM_PROCESSAMENTO');    
    
  EXCEPTION
 
    WHEN OTHERS THEN
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := NULL;
      GB_REC_ERRO.NOM_PROCESSO      := 'SP_CAD_BENEFICIARIO';
      GB_REC_ERRO.TIPO_EVENTO       := '2416';
      GB_REC_ERRO.DESC_ERRO         := 'ERRO NO PROCESSO DE CADASTRO DE BENEFICIÁRIO';
      GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
      GB_REC_ERRO.DES_IDENTIFICADOR := NULL;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'X';
      SP_GERA_ERRO_PROCESSO;
      SP_SETA_PROCESSO(P_ID_CTR_PROCESSO, 'ERRO_PROCESSAMENTO');
    
  END SP_ALT_BENEFICIO;
  
  --RETORNA INFORMAÇÕES DO BENEFÍCIO     

  PROCEDURE SP_RET_INFO_BENEFICIO(P_INFO_BENEF IN OUT ESOCIAL.TSOC_CAD_BENEFICIO%ROWTYPE) IS
  BEGIN
  
  
    SELECT BEN.DAT_INI_BEN,
           CB.COD_ENTIDADE,
           CB.NUM_MATRICULA,
           CB.COD_TIPO_BENEFICIO,
           CB.COD_CARGO,
           TCB.ID_CAD_BENEFICIARIO,
           TCB.NUM_CPF,
           BEN.FLG_STATUS,
           BEN.MOT_CESSACAO,
           BEN.DAT_FIM_BEN
      INTO P_INFO_BENEF.DAT_INIBEN,
           P_INFO_BENEF.COD_ENTIDADE,
           P_INFO_BENEF.NUM_MATRICULA,
           P_INFO_BENEF.COD_TIPO_BENEFICIO,
           P_INFO_BENEF.COD_CARGO,
           P_INFO_BENEF.ID_CAD_BENEFICIARIO,
           P_INFO_BENEF.NUM_CPF_BENEF,
           P_INFO_BENEF.FLG_STATUS,
           P_INFO_BENEF.MOT_CESSACAO,
           P_INFO_BENEF.DAT_FIM_BEN
      FROM USER_IPESP.TB_BENEFICIARIO        BEN,
           USER_IPESP.TB_CONCESSAO_BENEFICIO CB,
           ESOCIAL.TSOC_CAD_BENEFICIARIO     TCB
     WHERE BEN.COD_INS = GB_COD_INS
       AND CB.COD_INS = BEN.COD_INS
       AND CB.COD_BENEFICIO = BEN.COD_BENEFICIO
       AND CB.COD_INS = P_INFO_BENEF.COD_INS
       AND CB.COD_BENEFICIO = P_INFO_BENEF.COD_BENEFICIO
       AND BEN.COD_INS = P_INFO_BENEF.COD_INS
       AND BEN.COD_IDE_CLI_BEN = P_INFO_BENEF.COD_IDE_CLI_BEN
       AND TCB.COD_INS = BEN.COD_INS
       AND TCB.COD_IDE_CLI_BEN = BEN.COD_IDE_CLI_BEN
       ;
  
  END SP_RET_INFO_BENEFICIO;

  --VERIFICA SE HOUVE ALGUMA ALTERAÇÃO NOS DADOS DO BENEFÍCIO
  FUNCTION FC_BENEFICIO_EXTINTO(P_BENEFICIO_DADOS_ORIGINAIS IN GB_C_ALT_BENEFICIO%ROWTYPE,
                                    P_BENEFICIO_DADOS_NOVOS      IN ESOCIAL.TSOC_CAD_BENEFICIO%ROWTYPE)
    RETURN BOOLEAN IS
  
  BEGIN
  
    --CAMPOS A SEREM VERIFICADOS:
    --FLG_STATUS
  
    IF (P_BENEFICIO_DADOS_ORIGINAIS.FLG_STATUS <>
        P_BENEFICIO_DADOS_NOVOS.FLG_STATUS AND
        P_BENEFICIO_DADOS_NOVOS.FLG_STATUS IN ('E','X')) THEN
    
      RETURN TRUE;
    
    ELSE
    
      RETURN FALSE;
    
    END IF;
  
  END FC_BENEFICIO_EXTINTO;


  --VERIFICA SE HOUVE ALGUMA ALTERAÇÃO NOS DADOS DO BENEFÍCIO
  FUNCTION FC_DADOS_BENEF_DIFERENTES(P_BENEFICIO_DADOS_ORIGINAIS IN GB_C_ALT_BENEFICIO%ROWTYPE,
                                    P_BENEFICIO_DADOS_NOVOS      IN ESOCIAL.TSOC_CAD_BENEFICIO%ROWTYPE)
    RETURN BOOLEAN IS
  
  BEGIN
  
    IF (P_BENEFICIO_DADOS_ORIGINAIS.NUM_MATRICULA <>
        P_BENEFICIO_DADOS_NOVOS.NUM_MATRICULA OR
        P_BENEFICIO_DADOS_ORIGINAIS.NUM_CPF_BENEF <>
        P_BENEFICIO_DADOS_NOVOS.NUM_CPF_BENEF OR
        P_BENEFICIO_DADOS_ORIGINAIS.NUM_CNPJ_ENTIDADE <>
        P_BENEFICIO_DADOS_NOVOS.NUM_CNPJ_ENTIDADE OR
        P_BENEFICIO_DADOS_ORIGINAIS.FLG_DAT_BEN_ANTERIOR <>
        P_BENEFICIO_DADOS_NOVOS.FLG_DAT_BEN_ANTERIOR OR
        P_BENEFICIO_DADOS_ORIGINAIS.DAT_INIBEN <>
        P_BENEFICIO_DADOS_NOVOS.DAT_INIBEN OR
        P_BENEFICIO_DADOS_ORIGINAIS.COD_TIPO_BENEFICIO <>
        P_BENEFICIO_DADOS_NOVOS.COD_TIPO_BENEFICIO OR
        P_BENEFICIO_DADOS_ORIGINAIS.VAL_INI_BEN <>
        P_BENEFICIO_DADOS_NOVOS.VAL_INI_BEN OR
        P_BENEFICIO_DADOS_ORIGINAIS.TIP_PLAN_SEG <>
        P_BENEFICIO_DADOS_NOVOS.TIP_PLAN_SEG OR
        P_BENEFICIO_DADOS_ORIGINAIS.DESC_ORIG_PAG_BEN <>
        P_BENEFICIO_DADOS_NOVOS.DESC_ORIG_PAG_BEN OR
        P_BENEFICIO_DADOS_ORIGINAIS.FLG_BEN_JUD <>
        P_BENEFICIO_DADOS_NOVOS.FLG_BEN_JUD OR
        P_BENEFICIO_DADOS_ORIGINAIS.FLG_BEN_TC <>
        P_BENEFICIO_DADOS_NOVOS.FLG_BEN_TC OR
        P_BENEFICIO_DADOS_ORIGINAIS.COD_TIPO_PENSAO <>
        P_BENEFICIO_DADOS_NOVOS.COD_TIPO_PENSAO OR
        P_BENEFICIO_DADOS_ORIGINAIS.NUM_CPF_INST <>
        P_BENEFICIO_DADOS_NOVOS.NUM_CPF_INST OR
        P_BENEFICIO_DADOS_ORIGINAIS.DAT_OBITO_INST <>
        P_BENEFICIO_DADOS_NOVOS.DAT_OBITO_INST OR
        P_BENEFICIO_DADOS_ORIGINAIS.FLG_INST_APOSENTADO <>
        P_BENEFICIO_DADOS_NOVOS.FLG_INST_APOSENTADO OR
        P_BENEFICIO_DADOS_ORIGINAIS.DAT_HOMOLOG_TC <>
        P_BENEFICIO_DADOS_NOVOS.DAT_HOMOLOG_TC OR
        P_BENEFICIO_DADOS_ORIGINAIS.NUM_ATO_LEGAL_TC <>
        P_BENEFICIO_DADOS_NOVOS.NUM_ATO_LEGAL_TC OR
        P_BENEFICIO_DADOS_ORIGINAIS.COD_ENTIDADE <>
        P_BENEFICIO_DADOS_NOVOS.COD_ENTIDADE OR
        P_BENEFICIO_DADOS_ORIGINAIS.COD_CARGO <>
        P_BENEFICIO_DADOS_NOVOS.COD_CARGO) THEN
    
      RETURN TRUE;
    
    ELSE
    
      RETURN FALSE;
    
    END IF;
  
  END FC_DADOS_BENEF_DIFERENTES;

  --CARREGA HISTÓRICO DE CADASTRO DE BENEFICIÁRIO 
  PROCEDURE SP_INC_TSOC_HCAD_BENEFICIO(P_CAD_BENEFICIO IN /*ESOCIAL.TSOC_CAD_BENEFICIO*/GB_C_ALT_BENEFICIO%ROWTYPE) IS
  
    V_ID_HCAD_BENEFICIO ESOCIAL.TSOC_HCAD_BENEFICIO.ID_HIST_CAD_BENEFICIO%TYPE;
    
    V_SEQ_HIST ESOCIAL.TSOC_HCAD_BENEFICIO.SEQ_HIST%TYPE;  
  
  BEGIN
  
    --OBTEM ID CHAVE DE CADASTRO
    V_ID_HCAD_BENEFICIO := ESOCIAL.ESOC_SEQ_ID_HCAD_BENEFICIO.NEXTVAL;
    
    --OBTEM SEQ_HIST
    V_SEQ_HIST := FC_RET_SEQ_HCAD_BENEFICIO(P_CAD_BENEFICIO.COD_IDE_CLI_BEN, P_CAD_BENEFICIO.COD_BENEFICIO, P_CAD_BENEFICIO.COD_INS);  
  
    INSERT INTO TSOC_HCAD_BENEFICIO
      (ID_HIST_CAD_BENEFICIO,
       COD_INS,
       SEQ_HIST,
       COD_IDE_CLI_BEN,
       COD_BENEFICIO,
       ID_CAD_BENEFICIO,
       NUM_MATRICULA,
       NUM_CPF_BENEF,
       NUM_CNPJ_ENTIDADE,
       FLG_DAT_BEN_ANTERIOR,
       DAT_INIBEN,
       COD_TIPO_BENEFICIO,
       VAL_INI_BEN,
       TIP_PLAN_SEG,
       DESC_ORIG_PAG_BEN,
       FLAG_BEN_JUD,
       FLG_BEN_TC,
       NUM_CPF_INST,
       DAT_OBITO_INST,
       FLG_INST_APOSENTADO,
       DAT_HOMOLOG_TC,
       NUM_ATO_LEGAL_TC,
       DAT_ING,
       DAT_ULT_ATU,
       NOM_USU_ULT_ATU,
       NOM_PRO_ULT_ATU,
       FLG_STATUS)
    VALUES
      (V_ID_HCAD_BENEFICIO,
       P_CAD_BENEFICIO.COD_INS,
       V_SEQ_HIST,
       P_CAD_BENEFICIO.COD_IDE_CLI_BEN,
       P_CAD_BENEFICIO.COD_BENEFICIO,
       P_CAD_BENEFICIO.ID_CAD_BENEFICIO,
       P_CAD_BENEFICIO.NUM_MATRICULA,
       P_CAD_BENEFICIO.NUM_CPF_BENEF,
       P_CAD_BENEFICIO.NUM_CNPJ_ENTIDADE,
       P_CAD_BENEFICIO.FLG_DAT_BEN_ANTERIOR,
       P_CAD_BENEFICIO.DAT_INIBEN,
       P_CAD_BENEFICIO.COD_TIPO_BENEFICIO,
       P_CAD_BENEFICIO.VAL_INI_BEN,
       P_CAD_BENEFICIO.TIP_PLAN_SEG,
       P_CAD_BENEFICIO.DESC_ORIG_PAG_BEN,
       P_CAD_BENEFICIO.FLG_BEN_JUD,
       P_CAD_BENEFICIO.FLG_BEN_TC,
       P_CAD_BENEFICIO.NUM_CPF_INST,
       P_CAD_BENEFICIO.DAT_OBITO_INST,
       P_CAD_BENEFICIO.FLG_INST_APOSENTADO,
       P_CAD_BENEFICIO.DAT_HOMOLOG_TC,
       P_CAD_BENEFICIO.NUM_ATO_LEGAL_TC,
       SYSDATE,
       SYSDATE,
       'ESOCIAL',
       'SP_INC_TSOC_HCAD_BENEFICIO',
       P_CAD_BENEFICIO.FLG_STATUS
       );
    
    COMMIT;
  
  END SP_INC_TSOC_HCAD_BENEFICIO;

  --RETORNA A SEQUENCIA DE HISTÓRICO CADASTRAL DO BENEFICIÁRIO 
  FUNCTION FC_RET_SEQ_HCAD_BENEFICIO(P_COD_IDE_CLI_BEN IN ESOCIAL.TSOC_CAD_BENEFICIO.COD_IDE_CLI_BEN%TYPE,
                                     P_COD_BENEFICIO   IN ESOCIAL.TSOC_CAD_BENEFICIO.COD_BENEFICIO%TYPE,
                                     P_COD_INS         IN ESOCIAL.TSOC_CAD_BENEFICIO.COD_INS%TYPE)
    RETURN ESOCIAL.TSOC_HCAD_BENEFICIO.SEQ_HIST%TYPE IS
    V_SEQ_CAD_HIST ESOCIAL.TSOC_HCAD_BENEFICIO.SEQ_HIST%TYPE;
  
  BEGIN
  
    SELECT NVL(MAX(C.SEQ_HIST), 0) + 1
      INTO V_SEQ_CAD_HIST
      FROM ESOCIAL.TSOC_HCAD_BENEFICIO C
     WHERE C.COD_IDE_CLI_BEN = P_COD_IDE_CLI_BEN
       AND C.COD_BENEFICIO = P_COD_BENEFICIO
       AND C.COD_INS = P_COD_INS;
  
    RETURN V_SEQ_CAD_HIST;
  
  END FC_RET_SEQ_HCAD_BENEFICIO;
 
  --ATUALIZA CADASTRO DE BENEFICIÁRIO 
  --P_TIPO: FLG_STATUS, OUTROS_DADOS
  
  PROCEDURE SP_ATU_TSOC_CAD_BENEFICIO(P_CAD_BENEFICIO IN ESOCIAL.TSOC_CAD_BENEFICIO%ROWTYPE, P_TIPO VARCHAR2) IS
  
  BEGIN
    
    IF P_TIPO = 'FLG_STATUS' THEN
  
      UPDATE TSOC_CAD_BENEFICIO
         SET DAT_ULT_ATU = SYSDATE,
             NOM_USU_ULT_ATU = 'ESOCIAL',
             NOM_PRO_ULT_ATU = 'SP_ATU_TSOC_CAD_BENEFICIO',
             FLG_STATUS = P_CAD_BENEFICIO.FLG_STATUS,
             MOT_CESSACAO = P_CAD_BENEFICIO.MOT_CESSACAO,
             DAT_FIM_BEN = P_CAD_BENEFICIO.DAT_FIM_BEN
       WHERE COD_INS = P_CAD_BENEFICIO.COD_INS
         AND COD_IDE_CLI_BEN = P_CAD_BENEFICIO.COD_IDE_CLI_BEN
         AND COD_BENEFICIO = P_CAD_BENEFICIO.COD_BENEFICIO
         ;
    
    ELSIF P_TIPO = 'OUTROS_DADOS' THEN

      UPDATE TSOC_CAD_BENEFICIO
         SET NUM_MATRICULA = P_CAD_BENEFICIO.NUM_MATRICULA,
             NUM_CPF_BENEF = P_CAD_BENEFICIO.NUM_CPF_BENEF,
             NUM_CNPJ_ENTIDADE = P_CAD_BENEFICIO.NUM_CNPJ_ENTIDADE,
             FLG_DAT_BEN_ANTERIOR = P_CAD_BENEFICIO.FLG_DAT_BEN_ANTERIOR,
             DAT_INIBEN = P_CAD_BENEFICIO.DAT_INIBEN,
             COD_TIPO_BENEFICIO = P_CAD_BENEFICIO.COD_TIPO_BENEFICIO,
             VAL_INI_BEN = P_CAD_BENEFICIO.VAL_INI_BEN,
             TIP_PLAN_SEG = P_CAD_BENEFICIO.TIP_PLAN_SEG,
             DESC_ORIG_PAG_BEN = P_CAD_BENEFICIO.DESC_ORIG_PAG_BEN,
             FLG_BEN_JUD = P_CAD_BENEFICIO.FLG_BEN_JUD,
             FLG_BEN_TC = P_CAD_BENEFICIO.FLG_BEN_TC,
             COD_TIPO_PENSAO = P_CAD_BENEFICIO.COD_TIPO_PENSAO,
             NUM_CPF_INST = P_CAD_BENEFICIO.NUM_CPF_INST,
             DAT_OBITO_INST = P_CAD_BENEFICIO.DAT_OBITO_INST,
             FLG_INST_APOSENTADO = P_CAD_BENEFICIO.FLG_INST_APOSENTADO,
             DAT_HOMOLOG_TC = P_CAD_BENEFICIO.DAT_HOMOLOG_TC,
             NUM_ATO_LEGAL_TC = P_CAD_BENEFICIO.NUM_ATO_LEGAL_TC,
             DAT_ULT_ATU = SYSDATE,
             NOM_USU_ULT_ATU = 'ESOCIAL',
             NOM_PRO_ULT_ATU = 'SP_ATU_TSOC_CAD_BENEFICIO'
       WHERE COD_INS = P_CAD_BENEFICIO.COD_INS
         AND COD_IDE_CLI_BEN = P_CAD_BENEFICIO.COD_IDE_CLI_BEN
         AND COD_BENEFICIO = P_CAD_BENEFICIO.COD_BENEFICIO
         ;
     
    END IF;
      
    COMMIT;
  
  END SP_ATU_TSOC_CAD_BENEFICIO;

  --PROCESSA EVENTO 2416 BENEFÍCIO INICIAL, GERADO A PARTIR DO CADASTRO DE BENEFÍCIO
  PROCEDURE SP_2416(P_ID_CAD_BENEFICIO IN ESOCIAL.TSOC_CAD_BENEFICIO.ID_CAD_BENEFICIO%TYPE) IS
    V_2416 ESOCIAL.TSOC_2416_BENEFICIO_ALT%ROWTYPE;
  BEGIN
  
    --COMPARA A DATA INÍCIO DE GERAÇÃO DO EVENTO COM A ANTERIOR PARA CONTROLAR SEQUENCIAL DE ID        
    IF GB_DAT_EVT_ATU = GB_DAT_EVT_ANT THEN
      GB_SEQ_CHAVE_ID := GB_SEQ_CHAVE_ID + 1;
    ELSE
      GB_SEQ_CHAVE_ID := 1;
    END IF;
  
    V_2416.COD_INS        := GB_COD_INS;

    --OBTÉM NÚMERO DE INSCRIÇÃO E TIPO DE INSCRIÇÃO DO EMPREGADOR 
    SP_RET_INSC_EMP;
    V_2416.TPINSC := GB_EMPREGADOR.TP_INSC;
    V_2416.NRINSC := GB_EMPREGADOR.NUM_CNPJ;
  
    FOR C_2416 IN GB_C_2410(P_ID_CAD_BENEFICIO)
    
     LOOP
      --COMPARA A DATA INÍCIO DE GERAÇÃO DO EVENTO COM A ANTERIOR PARA CONTROLAR SEQUENCIAL DE ID        
      IF GB_DAT_EVT_ATU = GB_DAT_EVT_ANT THEN
        GB_SEQ_CHAVE_ID := GB_SEQ_CHAVE_ID + 1;
      ELSE
        GB_SEQ_CHAVE_ID := 1;
      END IF;
      --ZERA VARIÁVEIS
      SP_RESET_2416(V_2416);
      --ID DE CADASTRO DO BENEFICIÁRIO
      V_2416.ID_CAD_BENEFICIO := C_2416.ID_CAD_BENEFICIO;
      --OBTÉM ID CHAVE      
      V_2416.ID_PK := ESOCIAL.ESOC_SEQ_ID_2416.NEXTVAL;
      --COD INS
      V_2416.COD_INS := GB_COD_INS;
    
      --TASK41563 LNUNES 27/08/2018 VERIFICANDO SE JÁ EXISTE UM ID DE EVENTO
      V_2416.ID := FC_RET_ID_EVENTO_EXISTENTE('2416',P_ID_CAD_BENEFICIO);
      IF V_2416.ID IS NULL THEN
        --GERA ID DO EVENTO
        V_2416.ID := FC_GERA_ID_EVENTO;
      END IF;    

      --OBTÉM SEQUÊNCIA DE CADASTRO DO EVENTO    
      V_2416.SEQ_EVENTO := FC_RET_SEQ_EVENTO_2416(V_2416);
      --OBTEM DADOS DE VERSIONAMENTO E AMBIENTE
      SP_RET_INFO_AMBIENTE(V_2416.TPAMB,V_2416.VERPROC,V_2416.PROCEMI);    
      ---------------------  
       --SE O PERIODO FOR DO TIPO A - Abertura. Retificação =1 
      --SE FOR R - Reabertura. Retificação = 2 
      IF GB_FLG_STATUS_PERIODO = 'A' 
       THEN V_2416.INDRETIF := 1;
       ELSE V_2416.INDRETIF :=2; 
      END IF; 
    
      V_2416.INFOBENINICIO_NRBENEFICIO    := C_2416.COD_BENEFICIO;
      V_2416.DADOSBENEFICIO_TPPLANRP      := C_2416.TIP_PLAN_SEG;
      --AGUARDANDO DEFINIÇÃO
      V_2416.DADOSBENEFICIO_DSC          := C_2416.DESC_ORIG_PAG_BEN;
      V_2416.DADOSBENEFICIO_INDDECJUD    := C_2416.FLG_BEN_JUD;
      V_2416.DADOSBENEFICIO_INDHOMOLOGTC := C_2416.FLG_BEN_TC;
    
      --DE PARA TIPO DE PENSÃO------------------------------------------------
      IF C_2416.COD_TIPO_BENEFICIO = 'M' THEN
      
        V_2416.INFOPENMORTE_TPPENMORTE    := FC_DEPARA_TPPENMORTE(C_2416);
        V_2416.INSTPENMORTE_CPFINST       := C_2416.NUM_CPF_INST;
        V_2416.INSTPENMORTE_DTINST        := C_2416.DAT_OBITO_INST;
        V_2416.INSTPENMORTE_INTAPOSENTADO := C_2416.FLG_INST_APOSENTADO;
      
      ELSE
      
        V_2416.INFOPENMORTE_TPPENMORTE    := NULL;
        V_2416.INSTPENMORTE_CPFINST       := NULL;
        V_2416.INSTPENMORTE_DTINST        := NULL;
        V_2416.INSTPENMORTE_INTAPOSENTADO := NULL;
      END IF;
      -------------------------------------------------------------------------      
      --AGUARDANDO DEFINIÇÃO
      V_2416.HOMOLOGTC_DTHOMOL := C_2416.DAT_HOMOLOG_TC;
    
      --DE PARA TIPO DE BENEFÍCIO SIGEPREV X ESOCIAL 
      V_2416.DADOSBENEFICIO_TPBENEFICIO := FC_DEPARA_TIP_BENEFICIO(C_2416);
    
      V_2416.CTR_NUM_CPF       := C_2416.NUM_CPF_BENEF;
      V_2416.CTR_DSC_EVENTO    := '2416';
      V_2416.CTR_FLG_STATUS    := 'AX'; --AGUARDANDO VALIDAÇÃO DO XML      
      V_2416.FLG_VIGENCIA      := 'A';
    
      --VALIDA O EVENTO, CASO ENCONTRE ERRO ATUALIZA CTR_FLG_STATUS PARA 'EV' ERRO DE VALIDAÇÃO
      --ENVIA A LINHA DA TABELA DE EVENTO RECEBIDA, E A LINHA DE CADASTRO DE BENEFICIÁRIO
      SP_VALIDA_2416(V_2416, C_2416);
    
      BEGIN
        SP_INC_2416(V_2416);
      EXCEPTION
        WHEN OTHERS THEN
          GB_REC_ERRO.COD_INS           := GB_COD_INS;
          GB_REC_ERRO.ID_CAD            := V_2416.ID_PK;
          GB_REC_ERRO.NOM_PROCESSO      := 'SP_INC_2416';
          GB_REC_ERRO.TIPO_EVENTO       := '2416';
          GB_REC_ERRO.DESC_ERRO         := 'ERRO NA INSERÇÃO DO EVENTO 2416';
          GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
          GB_REC_ERRO.DES_IDENTIFICADOR := 'COD IDE CLI:' ||
                                           C_2416.COD_IDE_CLI_BEN;
          SP_GERA_ERRO_PROCESSO;
      END;
    
    END LOOP;
  
    /* EXCEPTION
    
    WHEN EX_EMPREGADOR THEN 
          GB_REC_ERRO.COD_INS      := GB_COD_INS;
          GB_REC_ERRO.ID_CAD       := NULL;
          GB_REC_ERRO.NOM_PROCESSO := 'SP_2400';
          GB_REC_ERRO.TIPO_EVENTO  := '2400';
          GB_REC_ERRO.DESC_ERRO    := 'NÃO HÁ EMPREGADOR ASSOCIADO PARA GERAÇÃO DO EVENTO';
          GB_REC_ERRO.DESC_ERRO_BD := SQLERRM;         
          GB_REC_ERRO.DES_IDENTIFICADOR := NULL;
        
          SP_GERA_ERRO_PROCESSO;*/
  
  END SP_2416;

  PROCEDURE SP_RESET_2416(P_2416 IN OUT ESOCIAL.TSOC_2416_BENEFICIO_ALT%ROWTYPE) IS
  BEGIN
  
    P_2416.ID_PK                        := NULL;
    P_2416.SEQ_EVENTO                   := NULL;
    P_2416.ID                           := NULL;
    P_2416.INFOBENINICIO_NRBENEFICIO    := NULL;
    P_2416.ID_CAD_BENEFICIO             := NULL;
    P_2416.INDRETIF                     := NULL;
    P_2416.NRRECIBO                     := NULL;
    P_2416.TPAMB                        := NULL;
    P_2416.PROCEMI                      := NULL;
    P_2416.VERPROC                      := NULL;
    P_2416.DADOSBENEFICIO_TPBENEFICIO   := NULL;
    P_2416.DADOSBENEFICIO_TPPLANRP      := NULL;
    P_2416.DADOSBENEFICIO_DSC           := NULL;
    P_2416.DADOSBENEFICIO_INDDECJUD     := NULL;
    P_2416.DADOSBENEFICIO_INDHOMOLOGTC  := NULL;
    P_2416.INFOPENMORTE_TPPENMORTE      := NULL;
    P_2416.INSTPENMORTE_CPFINST         := NULL;
    P_2416.INSTPENMORTE_DTINST          := NULL;
    P_2416.INSTPENMORTE_INTAPOSENTADO   := NULL;
    P_2416.HOMOLOGTC_DTHOMOL            := NULL;
    P_2416.CTR_NUM_CPF                  := NULL;
    P_2416.ID_LOTE                 := NULL;  
    P_2416.CTR_DSC_EVENTO               := NULL;
    P_2416.CTR_FLG_STATUS               := NULL;
    P_2416.XML_ENVIO                    := NULL;
    P_2416.FLG_VIGENCIA                 := NULL;
    P_2416.DAT_ING                      := NULL;
    P_2416.DAT_ULT_ATU                  := NULL;
    P_2416.NOM_USU_ULT_ATU              := NULL;
    P_2416.NOM_PRO_ULT_ATU              := NULL;
  
  END SP_RESET_2416;
  
  --RETORNA O SEQUENCIAL DO EVENTO 2416. 
  FUNCTION FC_RET_SEQ_EVENTO_2416(P_SEQ_EVT IN ESOCIAL.TSOC_2416_BENEFICIO_ALT%ROWTYPE)
    RETURN ESOCIAL.TSOC_2416_BENEFICIO_ALT.SEQ_EVENTO%TYPE IS
    V_SEQ_EVENTO ESOCIAL.TSOC_2416_BENEFICIO_ALT.SEQ_EVENTO%TYPE;
  BEGIN
  
    SELECT NVL(MAX(BI.SEQ_EVENTO), 0) + 1
      INTO V_SEQ_EVENTO
      FROM ESOCIAL.TSOC_2416_BENEFICIO_ALT BI
     WHERE BI.COD_INS = P_SEQ_EVT.COD_INS
       AND BI.ID = P_SEQ_EVT.ID;
  
    RETURN V_SEQ_EVENTO;
  
  END FC_RET_SEQ_EVENTO_2416;  

  PROCEDURE SP_VALIDA_2416(P_2416     IN OUT ESOCIAL.TSOC_2416_BENEFICIO_ALT%ROWTYPE,
                           P_CUR_2416 IN GB_C_2410%ROWTYPE) IS
  BEGIN
  
    --VERIFICA SE O CNPJ DA ENTIDADE É NULA
    /*IF P_2416.BENEFICIARIO_CNPJORIGEM IS NULL THEN
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2416.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_VALIDA_CNPJ';
      GB_REC_ERRO.TIPO_EVENTO       := '2416';
      GB_REC_ERRO.DESC_ERRO         := 'CNPJ DA ENTIDADE NÃO INFORMADO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'NUM CNPJ' ||
                                       P_2416.BENEFICIARIO_CNPJORIGEM;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
      SP_GERA_ERRO_PROCESSO;
      --VERIFICA SE O CNPJ É INVALIDO
    ELSIF NOT FC_VALIDA_CNPJ(P_2416.BENEFICIARIO_CNPJORIGEM) THEN
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2416.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_VALIDA_CNPJ';
      GB_REC_ERRO.TIPO_EVENTO       := '2416';
      GB_REC_ERRO.DESC_ERRO         := 'CNPJ INVÁLIDO, FOI CONSIDERADO NULO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'NUM CNPJ:' ||
                                       P_CUR_2416.NUM_CNPJ_ENTIDADE;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
      SP_GERA_ERRO_PROCESSO;
    END IF;*/
  
    --VALIDA TIPO DE BENEFÍCIO ESOCIAL
    IF P_2416.DADOSBENEFICIO_TPBENEFICIO IS NULL THEN
      P_2416.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2416.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_DEPARA_TIP_BENEFICIO';
      GB_REC_ERRO.TIPO_EVENTO       := '2416';
      GB_REC_ERRO.DESC_ERRO         := 'TIPO DE BENEFÍCIO ESOCIAL INVÁLIDO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID CAD BENEFICIO' ||
                                       P_CUR_2416.ID_CAD_BENEFICIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --VALIDA VALOR INICIAL DO BENEFÍCIO 
    /*IF P_2416.DADOSBENEFICIO_VRBENEFICIO IS NULL OR
       P_2416.DADOSBENEFICIO_VRBENEFICIO = 0 THEN
      P_2416.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2416.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_OBTEM_HBRUTO';
      GB_REC_ERRO.TIPO_EVENTO       := '2416';
      GB_REC_ERRO.DESC_ERRO         := 'VALOR DO BENEFÍCIO NÃO PODE SER NULO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID CAD BENEFICIO' ||
                                       P_CUR_2416.ID_CAD_BENEFICIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;*/
  
    --VALIDA INDICADOR DE BENEFÍCIO POR ORDEM JUDICIAL
    IF P_2416.DADOSBENEFICIO_INDDECJUD IS NULL THEN
      P_2416.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2416.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_FLG_BEN_JUD';
      GB_REC_ERRO.TIPO_EVENTO       := '2416';
      GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER INDICADOR DE BENEFICIO ORDEM JUD.';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID CAD BENEFICIO' ||
                                       P_CUR_2416.ID_CAD_BENEFICIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;
  
    --VALIDAÇÕES FEITAS PARA BENEFÍCIOS DE PENSÃO
    IF P_CUR_2416.COD_TIPO_BENEFICIO = 'M' THEN
      --VALIDA TIPO DE PENSÃO POR MORTE 
      IF P_2416.INFOPENMORTE_TPPENMORTE IS NULL THEN
        P_2416.CTR_FLG_STATUS         := 'EV';
        GB_REC_ERRO.COD_INS           := GB_COD_INS;
        GB_REC_ERRO.ID_CAD            := P_2416.ID_PK;
        GB_REC_ERRO.NOM_PROCESSO      := 'FC_DEPARA_TPPENMORTE';
        GB_REC_ERRO.TIPO_EVENTO       := '2416';
        GB_REC_ERRO.DESC_ERRO         := 'TIPO DE PENSÃO NÃO PODE SER NULO PARA BENEFÍCIO DE PENSÃO';
        GB_REC_ERRO.DESC_ERRO_BD      := NULL;
        GB_REC_ERRO.DES_IDENTIFICADOR := 'ID CAD BENEFICIO' ||
                                         P_CUR_2416.ID_CAD_BENEFICIO;
        GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
        SP_GERA_ERRO_PROCESSO;
      END IF;
      --VALIDA O CPF DO INSTITUIDOR DE PENSÃO. NÃO PODE SER NULO NEM INVÁLIDO (A FUNÇÃO RETORNA INVÁLIDO CASO SEJA NULO)
      IF NOT FC_VALIDA_CPF(P_2416.INSTPENMORTE_CPFINST) THEN
        P_2416.CTR_FLG_STATUS         := 'EV';
        GB_REC_ERRO.COD_INS           := GB_COD_INS;
        GB_REC_ERRO.ID_CAD            := P_2416.ID_PK;
        GB_REC_ERRO.NOM_PROCESSO      := 'SP_RET_INFO_INST/FC_VALIDA_CPF';
        GB_REC_ERRO.TIPO_EVENTO       := '2416';
        GB_REC_ERRO.DESC_ERRO         := 'CPF DO INSTITUIDOR DE PENSÃO É INVÁLIDO';
        GB_REC_ERRO.DESC_ERRO_BD      := NULL;
        GB_REC_ERRO.DES_IDENTIFICADOR := 'CPF DO INSTITUIDOR' ||
                                         P_CUR_2416.NUM_CPF_INST;
        GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
        SP_GERA_ERRO_PROCESSO;
      END IF;
    
      --VALIDA SE INDICATIVO DE INSTITUIDOR APOSENTADO É NULO 
      IF P_2416.INSTPENMORTE_INTAPOSENTADO IS NULL THEN
        P_2416.CTR_FLG_STATUS         := 'EV';
        GB_REC_ERRO.COD_INS           := GB_COD_INS;
        GB_REC_ERRO.ID_CAD            := P_2416.ID_PK;
        GB_REC_ERRO.NOM_PROCESSO      := 'SP_RET_INFO_INST';
        GB_REC_ERRO.TIPO_EVENTO       := '2416';
        GB_REC_ERRO.DESC_ERRO         := 'INDICATIVO DE INSTITUIDOR APOSENTADO NÃO PODE SER NULO';
        GB_REC_ERRO.DESC_ERRO_BD      := NULL;
        GB_REC_ERRO.DES_IDENTIFICADOR := 'CPF DO INSTITUIDOR' ||
                                         P_CUR_2416.NUM_CPF_INST;
        GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
        SP_GERA_ERRO_PROCESSO;
      END IF;
    
    END IF;
  
  END SP_VALIDA_2416;

  --FAZ INCLUSÃO NA TABELA DE EVENTO 2416
  PROCEDURE SP_INC_2416(P_2416 IN ESOCIAL.TSOC_2416_BENEFICIO_ALT%ROWTYPE) IS
  BEGIN
  
    INSERT INTO ESOCIAL.TSOC_2416_BENEFICIO_ALT
      (ID_PK,
       COD_INS,
       SEQ_EVENTO,
       ID,
       INFOBENINICIO_NRBENEFICIO,
       ID_CAD_BENEFICIO,
       INDRETIF,
       NRRECIBO,
       TPAMB,
       PROCEMI,
       VERPROC,
       TPINSC,
       NRINSC,
       DADOSBENEFICIO_TPBENEFICIO,
       DADOSBENEFICIO_TPPLANRP,
       DADOSBENEFICIO_DSC,
       DADOSBENEFICIO_INDDECJUD,
       DADOSBENEFICIO_INDHOMOLOGTC,
       INFOPENMORTE_TPPENMORTE,
       INSTPENMORTE_CPFINST,
       INSTPENMORTE_DTINST,
       INSTPENMORTE_INTAPOSENTADO,
       HOMOLOGTC_DTHOMOL,
       CTR_NUM_CPF,
       ID_LOTE,      
       CTR_DSC_EVENTO,
       CTR_FLG_STATUS,
       XML_ENVIO,
       FLG_VIGENCIA,
       DAT_ING,
       DAT_ULT_ATU,
       NOM_USU_ULT_ATU,
       NOM_PRO_ULT_ATU)
    VALUES
      (P_2416.ID_PK,
       P_2416.COD_INS,
       P_2416.SEQ_EVENTO,
       P_2416.ID,
       P_2416.INFOBENINICIO_NRBENEFICIO,
       P_2416.ID_CAD_BENEFICIO,
       P_2416.INDRETIF,
       P_2416.NRRECIBO,
       P_2416.TPAMB,
       P_2416.PROCEMI,
       P_2416.VERPROC,
       P_2416.TPINSC,
       P_2416.NRINSC,
       P_2416.DADOSBENEFICIO_TPBENEFICIO,
       P_2416.DADOSBENEFICIO_TPPLANRP,
       P_2416.DADOSBENEFICIO_DSC,
       P_2416.DADOSBENEFICIO_INDDECJUD,
       P_2416.DADOSBENEFICIO_INDHOMOLOGTC,
       P_2416.INFOPENMORTE_TPPENMORTE,
       P_2416.INSTPENMORTE_CPFINST,
       P_2416.INSTPENMORTE_DTINST,
       P_2416.INSTPENMORTE_INTAPOSENTADO,
       P_2416.HOMOLOGTC_DTHOMOL,
       P_2416.CTR_NUM_CPF,
       P_2416.ID_LOTE,     
       P_2416.CTR_DSC_EVENTO,
       P_2416.CTR_FLG_STATUS,
       P_2416.XML_ENVIO,
       P_2416.FLG_VIGENCIA,
       SYSDATE,
       SYSDATE,
       'ESOCIAL',
       'SP_INC_2416');
  
    COMMIT;
  
  END SP_INC_2416;

  --PROCESSA EVENTO 2420 BENEFÍCIO INICIAL, GERADO A PARTIR DO CADASTRO DE BENEFÍCIO
  PROCEDURE SP_2420(P_ID_CAD_BENEFICIO IN ESOCIAL.TSOC_CAD_BENEFICIO.ID_CAD_BENEFICIO%TYPE) IS
    V_2420 ESOCIAL.TSOC_2420_BENEFICIO_TERMINO%ROWTYPE;
  BEGIN
  
    --COMPARA A DATA INÍCIO DE GERAÇÃO DO EVENTO COM A ANTERIOR PARA CONTROLAR SEQUENCIAL DE ID        
    IF GB_DAT_EVT_ATU = GB_DAT_EVT_ANT THEN
      GB_SEQ_CHAVE_ID := GB_SEQ_CHAVE_ID + 1;
    ELSE
      GB_SEQ_CHAVE_ID := 1;
    END IF;
  
    V_2420.COD_INS        := GB_COD_INS;
    --OBTÉM NÚMERO DE INSCRIÇÃO E TIPO DE INSCRIÇÃO DO EMPREGADOR 
    SP_RET_INSC_EMP;
    V_2420.TPINSC := GB_EMPREGADOR.TP_INSC;
    V_2420.NRINSC := GB_EMPREGADOR.NUM_CNPJ;
  
    FOR C_2420 IN GB_C_2410(P_ID_CAD_BENEFICIO)
    
     LOOP
      --COMPARA A DATA INÍCIO DE GERAÇÃO DO EVENTO COM A ANTERIOR PARA CONTROLAR SEQUENCIAL DE ID        
      IF GB_DAT_EVT_ATU = GB_DAT_EVT_ANT THEN
        GB_SEQ_CHAVE_ID := GB_SEQ_CHAVE_ID + 1;
      ELSE
        GB_SEQ_CHAVE_ID := 1;
      END IF;
      --ZERA VARIÁVEIS
      SP_RESET_2420(V_2420);
      --OBTÉM ID CHAVE      
      V_2420.ID_PK := ESOCIAL.ESOC_SEQ_ID_2420.NEXTVAL;
      --COD INS
      V_2420.COD_INS := GB_COD_INS;
      
      --BUSCANDO ID PERIODO
      V_2420.ID_PERIODO_DET := GB_ID_PERIODO_DET;
      
      --BUSCANDO CÓDIGO DO BENEFÍCIO
      V_2420.IDEBENEFICIO_NRBENEFICIO := C_2420.COD_BENEFICIO;
      
      --DE PARA RAÇA COR
      V_2420.INFOBENTERMINO_MTVTERMINO := FC_DEPARA_MOT_CESSACAO(C_2420.MOT_CESSACAO);
      
      --ID CAD BEENFICIO
      V_2420.ID_CAD_BENEFICIO := P_ID_CAD_BENEFICIO;
    
      --TASK41563 LNUNES 27/08/2018 VERIFICANDO SE JÁ EXISTE UM ID DE EVENTO
      V_2420.ID := FC_RET_ID_EVENTO_EXISTENTE('2420',P_ID_CAD_BENEFICIO);
      IF V_2420.ID IS NULL THEN
        --GERA ID DO EVENTO
        V_2420.ID := FC_GERA_ID_EVENTO;
      END IF;    
      
      --DE PARA MOTIVO DE CESSAÇÃO SIGEPREV X ESOCIAL 
      
      IF V_2420.INFOBENTERMINO_MTVTERMINO IS NOT NULL THEN
        V_2420.INFOBENTERMINO_MTVTERMINO := FC_DEPARA_MOT_CESSACAO(C_2420.MOT_CESSACAO);
      END IF;

      --OBTÉM SEQUÊNCIA DE CADASTRO DO EVENTO    
      V_2420.SEQ_EVENTO := FC_RET_SEQ_EVENTO_2420(V_2420);
      --OBTEM DADOS DE VERSIONAMENTO E AMBIENTE
      --VERIFICAR---------
      SP_RET_INFO_AMBIENTE(V_2420.TPAMB,V_2420.VERPROC,V_2420.PROCEMI);    
      ---------------------  
       --SE O PERIODO FOR DO TIPO A - Abertura. Retificação =1 
      --SE FOR R - Reabertura. Retificação = 2 
      IF GB_FLG_STATUS_PERIODO = 'A' 
       THEN V_2420.INDRETIF := 1;
       ELSE V_2420.INDRETIF :=2; 
      END IF; 
      --DADOS DO BENEFÍCIO 
      V_2420.BENEFICIARIO_CPFBENEF   := C_2420.NUM_CPF_BENEF;
    
      -------------------------------------------------------------------------      
    
      --DE PARA TIPO DE BENEFÍCIO SIGEPREV X ESOCIAL 
    
      V_2420.ID_ORIGEM := GB_ID_ORIGEM;
      V_2420.CTR_NUM_CPF       := C_2420.NUM_CPF_BENEF;
      V_2420.CTR_DSC_EVENTO    := '2420';
      V_2420.CTR_FLG_STATUS    := 'AX'; --AGUARDANDO VALIDAÇÃO DO XML      
      V_2420.FLG_VIGENCIA      := 'A';
    
      --VALIDA O EVENTO, CASO ENCONTRE ERRO ATUALIZA CTR_FLG_STATUS PARA 'EV' ERRO DE VALIDAÇÃO
      --ENVIA A LINHA DA TABELA DE EVENTO RECEBIDA, E A LINHA DE CADASTRO DE BENEFICIÁRIO
      SP_VALIDA_2420(V_2420, C_2420);
    
      --BEGIN
      SP_INC_2420(V_2420);
      /*EXCEPTION
        WHEN OTHERS THEN
          GB_REC_ERRO.COD_INS           := GB_COD_INS;
          GB_REC_ERRO.ID_CAD            := V_2420.ID_PK;
          GB_REC_ERRO.NOM_PROCESSO      := 'SP_INC_2420';
          GB_REC_ERRO.TIPO_EVENTO       := '2420';
          GB_REC_ERRO.DESC_ERRO         := 'ERRO NA INSERÇÃO DO EVENTO 2420';
          GB_REC_ERRO.DESC_ERRO_BD      := SQLERRM;
          GB_REC_ERRO.DES_IDENTIFICADOR := 'COD IDE CLI:' ||
                                           C_2420.COD_IDE_CLI_BEN;
          SP_GERA_ERRO_PROCESSO;
      END;*/
    
    END LOOP;
  
    /* EXCEPTION
    
    WHEN EX_EMPREGADOR THEN 
          GB_REC_ERRO.COD_INS      := GB_COD_INS;
          GB_REC_ERRO.ID_CAD       := NULL;
          GB_REC_ERRO.NOM_PROCESSO := 'SP_2400';
          GB_REC_ERRO.TIPO_EVENTO  := '2400';
          GB_REC_ERRO.DESC_ERRO    := 'NÃO HÁ EMPREGADOR ASSOCIADO PARA GERAÇÃO DO EVENTO';
          GB_REC_ERRO.DESC_ERRO_BD := SQLERRM;         
          GB_REC_ERRO.DES_IDENTIFICADOR := NULL;
        
          SP_GERA_ERRO_PROCESSO;*/
  
  END SP_2420;

  PROCEDURE SP_RESET_2420(P_2420 IN OUT ESOCIAL.TSOC_2420_BENEFICIO_TERMINO%ROWTYPE) IS
  BEGIN
  
    P_2420.ID_PK := NULL;
    P_2420.SEQ_EVENTO                := NULL;
    P_2420.ID                        := NULL;
    P_2420.BENEFICIARIO_CPFBENEF     := NULL;
    P_2420.ID_CAD_BENEFICIO          := NULL;
    P_2420.INDRETIF := NULL;
    P_2420.NRRECIBO := NULL;
    P_2420.TPAMB    := NULL;
    P_2420.PROCEMI  := NULL;
    P_2420.VERPROC  := NULL;
    P_2420.ID_ORIGEM              := NULL;
    P_2420.CTR_NUM_CPF                    := NULL;
    P_2420.ID_LOTE                   := NULL;
    P_2420.CTR_DSC_EVENTO                 := NULL;
    P_2420.CTR_FLG_STATUS                 := NULL;
    P_2420.XML_ENVIO                      := NULL;
    P_2420.FLG_VIGENCIA                   := NULL;
    P_2420.DAT_ING                        := NULL;
    P_2420.DAT_ULT_ATU                    := NULL;
    P_2420.NOM_USU_ULT_ATU                := NULL;
    P_2420.NOM_PRO_ULT_ATU                := NULL;
    P_2420.INFOBENTERMINO_MTVTERMINO      := NULL;
    P_2420.INFOBENTERMINO_DTTERMBENEFICIO := NULL;
  
  END SP_RESET_2420;

  FUNCTION FC_RET_SEQ_EVENTO_2420(P_SEQ_EVT IN ESOCIAL.TSOC_2420_BENEFICIO_TERMINO%ROWTYPE)
    RETURN ESOCIAL.TSOC_2420_BENEFICIO_TERMINO.SEQ_EVENTO%TYPE IS
    V_SEQ_EVENTO ESOCIAL.TSOC_2420_BENEFICIO_TERMINO.SEQ_EVENTO%TYPE;
  BEGIN
  
    SELECT NVL(MAX(BI.SEQ_EVENTO), 0) + 1
      INTO V_SEQ_EVENTO
      FROM ESOCIAL.TSOC_2420_BENEFICIO_TERMINO BI
     WHERE BI.COD_INS = P_SEQ_EVT.COD_INS
       AND BI.ID = P_SEQ_EVT.ID;
  
    RETURN V_SEQ_EVENTO;
  
  END FC_RET_SEQ_EVENTO_2420;

  PROCEDURE SP_VALIDA_2420(P_2420     IN OUT ESOCIAL.TSOC_2420_BENEFICIO_TERMINO%ROWTYPE,
                           P_CUR_2420 IN GB_C_2410%ROWTYPE) IS
  BEGIN
  
    --VERIFICA SE O CNPJ DA ENTIDADE É NULA
    /*IF P_2420.BENEFICIARIO_CNPJORIGEM IS NULL THEN
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2420.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_VALIDA_CNPJ';
      GB_REC_ERRO.TIPO_EVENTO       := '2420';
      GB_REC_ERRO.DESC_ERRO         := 'CNPJ DA ENTIDADE NÃO INFORMADO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'NUM CNPJ' ||
                                       P_2420.BENEFICIARIO_CNPJORIGEM;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
      SP_GERA_ERRO_PROCESSO;
      --VERIFICA SE O CNPJ É INVALIDO
    ELSIF NOT FC_VALIDA_CNPJ(P_2420.BENEFICIARIO_CNPJORIGEM) THEN
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2420.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_VALIDA_CNPJ';
      GB_REC_ERRO.TIPO_EVENTO       := '2420';
      GB_REC_ERRO.DESC_ERRO         := 'CNPJ INVÁLIDO, FOI CONSIDERADO NULO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'NUM CNPJ:' ||
                                       P_CUR_2420.NUM_CNPJ_ENTIDADE;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'W';
      SP_GERA_ERRO_PROCESSO;
    END IF;*/
  
    --VALIDA TIPO DE BENEFÍCIO ESOCIAL
    /*IF P_2420.DADOSBENEFICIO_TPBENEFICIO IS NULL THEN
      P_2420.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2420.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_DEPARA_TIP_BENEFICIO';
      GB_REC_ERRO.TIPO_EVENTO       := '2420';
      GB_REC_ERRO.DESC_ERRO         := 'TIPO DE BENEFÍCIO ESOCIAL INVÁLIDO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID CAD BENEFICIO' ||
                                       P_CUR_2420.ID_CAD_BENEFICIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;*/
  
    --VALIDA VALOR INICIAL DO BENEFÍCIO 
    /*IF P_2420.DADOSBENEFICIO_VRBENEFICIO IS NULL OR
       P_2420.DADOSBENEFICIO_VRBENEFICIO = 0 THEN
      P_2420.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2420.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_OBTEM_HBRUTO';
      GB_REC_ERRO.TIPO_EVENTO       := '2420';
      GB_REC_ERRO.DESC_ERRO         := 'VALOR DO BENEFÍCIO NÃO PODE SER NULO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID CAD BENEFICIO' ||
                                       P_CUR_2420.ID_CAD_BENEFICIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;*/
  
    --VALIDA INDICADOR DE BENEFÍCIO POR ORDEM JUDICIAL
    /*IF P_2420.DADOSBENEFICIO_INDDECJUD IS NULL THEN
      P_2420.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2420.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_FLG_BEN_JUD';
      GB_REC_ERRO.TIPO_EVENTO       := '2420';
      GB_REC_ERRO.DESC_ERRO         := 'ERRO AO OBTER INDICADOR DE BENEFICIO ORDEM JUD.';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'ID CAD BENEFICIO' ||
                                       P_CUR_2420.ID_CAD_BENEFICIO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;*/
  
    --VALIDAÇÕES FEITAS PARA BENEFÍCIOS DE PENSÃO
    IF P_CUR_2420.COD_TIPO_BENEFICIO = 'M' THEN
      --VALIDA TIPO DE PENSÃO POR MORTE 
      /*IF P_2420.INFOPENMORTE_TPPENMORTE IS NULL THEN
        P_2420.CTR_FLG_STATUS         := 'EV';
        GB_REC_ERRO.COD_INS           := GB_COD_INS;
        GB_REC_ERRO.ID_CAD            := P_2420.ID_PK;
        GB_REC_ERRO.NOM_PROCESSO      := 'FC_DEPARA_TPPENMORTE';
        GB_REC_ERRO.TIPO_EVENTO       := '2420';
        GB_REC_ERRO.DESC_ERRO         := 'TIPO DE PENSÃO NÃO PODE SER NULO PARA BENEFÍCIO DE PENSÃO';
        GB_REC_ERRO.DESC_ERRO_BD      := NULL;
        GB_REC_ERRO.DES_IDENTIFICADOR := 'ID CAD BENEFICIO' ||
                                         P_CUR_2420.ID_CAD_BENEFICIO;
        GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
        SP_GERA_ERRO_PROCESSO;
      END IF;*/
      --VALIDA O CPF DO INSTITUIDOR DE PENSÃO. NÃO PODE SER NULO NEM INVÁLIDO (A FUNÇÃO RETORNA INVÁLIDO CASO SEJA NULO)
      /*IF NOT FC_VALIDA_CPF(P_2420.INSTPENMORTE_CPFINST) THEN
        P_2420.CTR_FLG_STATUS         := 'EV';
        GB_REC_ERRO.COD_INS           := GB_COD_INS;
        GB_REC_ERRO.ID_CAD            := P_2420.ID_PK;
        GB_REC_ERRO.NOM_PROCESSO      := 'SP_RET_INFO_INST/FC_VALIDA_CPF';
        GB_REC_ERRO.TIPO_EVENTO       := '2420';
        GB_REC_ERRO.DESC_ERRO         := 'CPF DO INSTITUIDOR DE PENSÃO É INVÁLIDO';
        GB_REC_ERRO.DESC_ERRO_BD      := NULL;
        GB_REC_ERRO.DES_IDENTIFICADOR := 'CPF DO INSTITUIDOR' ||
                                         P_CUR_2420.NUM_CPF_INST;
        GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
        SP_GERA_ERRO_PROCESSO;
      END IF;*/
    
      --VALIDA SE INDICATIVO DE INSTITUIDOR APOSENTADO É NULO 
      /*IF P_2420.INSTPENMORTE_INTAPOSENTADO IS NULL THEN
        P_2420.CTR_FLG_STATUS         := 'EV';
        GB_REC_ERRO.COD_INS           := GB_COD_INS;
        GB_REC_ERRO.ID_CAD            := P_2420.ID_PK;
        GB_REC_ERRO.NOM_PROCESSO      := 'SP_RET_INFO_INST';
        GB_REC_ERRO.TIPO_EVENTO       := '2420';
        GB_REC_ERRO.DESC_ERRO         := 'INDICATIVO DE INSTITUIDOR APOSENTADO NÃO PODE SER NULO';
        GB_REC_ERRO.DESC_ERRO_BD      := NULL;
        GB_REC_ERRO.DES_IDENTIFICADOR := 'CPF DO INSTITUIDOR' ||
                                         P_CUR_2420.NUM_CPF_INST;
        GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
        SP_GERA_ERRO_PROCESSO;
      END IF;*/
    
      NULL;
      
    END IF;      
      
    --VALIDA MOTICVO DE TERMINO DO BENEFÍCIO
    IF P_2420.INFOBENTERMINO_MTVTERMINO IS NULL THEN
      P_2420.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2420.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_FLG_BEN_JUD';
      GB_REC_ERRO.TIPO_EVENTO       := '2420';
      GB_REC_ERRO.DESC_ERRO         := 'MOTIVO DE TERMINO DO BENEFICIO NÃO PODE SER NULO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'INFOBENTERMINO_MTVTERMINO' ||
                                       P_CUR_2420.MOT_CESSACAO;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;
    
    --VALIDA DATA DE TERMINO DO BENEFÍCIO
    IF P_2420.INFOBENTERMINO_DTTERMBENEFICIO IS NULL THEN
      P_2420.CTR_FLG_STATUS         := 'EV';
      GB_REC_ERRO.COD_INS           := GB_COD_INS;
      GB_REC_ERRO.ID_CAD            := P_2420.ID_PK;
      GB_REC_ERRO.NOM_PROCESSO      := 'FC_FLG_BEN_JUD';
      GB_REC_ERRO.TIPO_EVENTO       := '2420';
      GB_REC_ERRO.DESC_ERRO         := 'DATA DE TERMINO DO BENEFICIO NÃO PODE SER NULO';
      GB_REC_ERRO.DESC_ERRO_BD      := NULL;
      GB_REC_ERRO.DES_IDENTIFICADOR := 'INFOBENTERMINO_DTTERMBENEFICIO' ||
                                       P_CUR_2420.DAT_FIM_BEN;
      GB_REC_ERRO.FLG_TIPO_ERRO     := 'E';
      SP_GERA_ERRO_PROCESSO;
    END IF;    
  
  END SP_VALIDA_2420;

  --FAZ INCLUSÃO NA TABELA DE EVENTO 2420
  PROCEDURE SP_INC_2420(P_2420 IN ESOCIAL.TSOC_2420_BENEFICIO_TERMINO%ROWTYPE) IS
  BEGIN
  
    INSERT INTO ESOCIAL.TSOC_2420_BENEFICIO_TERMINO
      (ID_PK,
       COD_INS,
       SEQ_EVENTO,
       ID,
       BENEFICIARIO_CPFBENEF,
       ID_CAD_BENEFICIO,
       ID_PERIODO_DET,
       INDRETIF,
       NRRECIBO,
       TPAMB,
       PROCEMI,
       VERPROC,
       TPINSC,
       NRINSC,
       ID_ORIGEM,
       CTR_NUM_CPF,
       ID_LOTE,
       CTR_DSC_EVENTO,
       CTR_FLG_STATUS,
       XML_ENVIO,
       FLG_VIGENCIA,
       DAT_ING,
       DAT_ULT_ATU,
       NOM_USU_ULT_ATU,
       NOM_PRO_ULT_ATU,
       IDEBENEFICIO_CPFBENEF,
       IDEBENEFICIO_NRBENEFICIO,
       INFOBENTERMINO_MTVTERMINO,
       INFOBENTERMINO_DTTERMBENEFICIO
       )
    VALUES
      (P_2420.ID_PK,
       P_2420.COD_INS,
       P_2420.SEQ_EVENTO,
       P_2420.ID,
       P_2420.BENEFICIARIO_CPFBENEF,
       P_2420.ID_CAD_BENEFICIO,
       P_2420.ID_PERIODO_DET,
       P_2420.INDRETIF,
       P_2420.NRRECIBO,
       P_2420.TPAMB,
       P_2420.PROCEMI,
       P_2420.VERPROC,
       P_2420.TPINSC,
       P_2420.NRINSC,
       P_2420.ID_ORIGEM,
       P_2420.CTR_NUM_CPF,
       P_2420.ID_LOTE,
       P_2420.CTR_DSC_EVENTO,
       P_2420.CTR_FLG_STATUS,
       P_2420.XML_ENVIO,
       P_2420.FLG_VIGENCIA,
       SYSDATE,
       SYSDATE,
       'ESOCIAL',
       'SP_INC_2420',
       P_2420.BENEFICIARIO_CPFBENEF,
       P_2420.IDEBENEFICIO_NRBENEFICIO,
       P_2420.INFOBENTERMINO_MTVTERMINO,
       P_2420.INFOBENTERMINO_DTTERMBENEFICIO
       );
  
    COMMIT;
  
  END SP_INC_2420;
  
  --RETORNA O CÓDIGO DO MOTIVO DE CESSAÇÃO EQUIVALENTE NO ESOCIAL 
  FUNCTION FC_DEPARA_MOT_CESSACAO(P_MOT_CESSACAO IN ESOCIAL.TSOC_CAD_BENEFICIO.MOT_CESSACAO%TYPE)
    RETURN ESOCIAL.TSOC_2400_BENEFICIARIO_INI.BENEFICIARIO_RACACOR%TYPE IS
    V_COD_MOT_CESSACAO ESOCIAL.TSOC_2420_BENEFICIO_TERMINO.INFOBENTERMINO_MTVTERMINO%TYPE;
  
  BEGIN
  
    SELECT CS.COD_ESOCIAL
      INTO V_COD_MOT_CESSACAO
      FROM ESOCIAL.TSOC_PAR_SIGEPREV_ESOCIAL CS
     WHERE CS.COD_TIPO = 10 --MOTIVO DE CESSAÇÃO
       AND CS.COD_INS = GB_COD_INS
       AND CS.COD_SIGEPREV = TO_CHAR(P_MOT_CESSACAO);
  
    RETURN V_COD_MOT_CESSACAO;
  
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
    
  END FC_DEPARA_MOT_CESSACAO;    

  /***** FIM 2416/2420 - ALTERAÇÃO DE BENEFÍCIO *****/ 
 
  --CARREGA OS IDS DE ORIGEM, EVENTO E PERIODO_DET DE ACORDO COM O ID_CTR_PROCESSO
  PROCEDURE SP_CARREGA_IDS(P_ID_CTR_PROCESSO IN ESOCIAL.TSOC_CTR_PROCESSO.ID_CTR_PROCESSO%TYPE) IS
  BEGIN
  
     SELECT B.ID_ORIGEM, B.ID_EVENTO, C.ID_PERIODO_DET , C.COD_INS , C.FLG_STATUS , TO_DATE(D.PERIODO,'MM/YYYY')
       INTO GB_ID_ORIGEM, GB_ID_EVENTO, GB_ID_PERIODO_DET, GB_COD_INS, GB_FLG_STATUS_PERIODO , GB_FOLHA.PER_PROCESSO
            
       FROM ESOCIAL.TSOC_CTR_PROCESSO A, 
            ESOCIAL.TSOC_PAR_PROCESSO B, 
            ESOCIAL.TSOC_CTR_PERIODO_DET C,
            ESOCIAL.TSOC_CTR_PERIODO D 
      WHERE A.COD_INS = B.COD_INS
        AND A.ID_PROCESSO = B.ID_PROCESSO
        AND A.COD_INS = C.COD_INS
        AND A.ID_PERIODO = C.ID_PERIODO
        AND B.COD_INS = C.COD_INS
        AND B.ID_EVENTO = C.ID_EVENTO
        AND A.ID_CTR_PROCESSO = P_ID_CTR_PROCESSO
        AND D.ID_PERIODO = C.ID_PERIODO 
        AND D.COD_INS = C.COD_INS 
        AND B.FLG_STATUS = 'A' --PROCESSO COM STATUS ATIVO
        AND A.FLG_STATUS = 'A' --COM STATUS AGENDADO 
        AND C.FLG_STATUS IN ('A','R') --PERÍODO ABERTO OU REABERTO PARA O EVENTO
        AND D.FLG_STATUS IN ('A','R'); --PERIODO ABERTO OU REABERTO
        
  
  END SP_CARREGA_IDS;
  
  --SETA O STATUS DE PROCESSAMENTO E QUANTIDADE DE REGISTROS DA TSOC_CTR_PROCESSO
  PROCEDURE SP_SETA_PROCESSO(P_ID_CTR_PROCESSO IN ESOCIAL.TSOC_CTR_PROCESSO.ID_CTR_PROCESSO%TYPE,
                             P_NOM_EVENTO    IN VARCHAR2) IS
  BEGIN
    
    IF P_NOM_EVENTO = 'INICIO_PROCESSAMENTO' THEN
  
      UPDATE ESOCIAL.TSOC_CTR_PROCESSO
         SET DAT_INICIO = SYSDATE,
             DAT_FIM = NULL,
             FLG_STATUS = 'P',
             --QTD_REGISTROS = 0,
             DAT_ULT_ATU = SYSDATE,
             NOM_USU_ULT_ATU = 'ESOCIAL',
             NOM_PRO_ULT_ATU = 'SP_SETA_PROCESSO'
       WHERE ID_CTR_PROCESSO = P_ID_CTR_PROCESSO;
       
      COMMIT;
     
    ELSIF P_NOM_EVENTO = 'FIM_PROCESSAMENTO' THEN
      
      UPDATE ESOCIAL.TSOC_CTR_PROCESSO
         SET DAT_FIM = SYSDATE,
             FLG_STATUS = 'F',
             DAT_ULT_ATU = SYSDATE,
             NOM_USU_ULT_ATU = 'ESOCIAL',
             NOM_PRO_ULT_ATU = 'SP_SETA_PROCESSO'
       WHERE ID_CTR_PROCESSO = P_ID_CTR_PROCESSO;
       
      COMMIT;  
       
    ELSIF P_NOM_EVENTO = 'ATUALIZA_QUANTIDADE' THEN
      
       --ATUALIZACAO DE QUANTIDADE DE REGISTROS
       UPDATE ESOCIAL.TSOC_CTR_PROCESSO
          SET QTD_REGISTROS = NVL(QTD_REGISTROS,0)+1,
              DAT_ULT_ATU = SYSDATE,
              NOM_USU_ULT_ATU = 'ESOCIAL',
              NOM_PRO_ULT_ATU = 'SP_SETA_PROCESSO'
        WHERE ID_CTR_PROCESSO = P_ID_CTR_PROCESSO;
       
       COMMIT;  
       
    ELSE
            
       --ERRO NO PROCESSAMENTO
       UPDATE ESOCIAL.TSOC_CTR_PROCESSO
          SET FLG_STATUS = 'E',
              DAT_ULT_ATU = SYSDATE,
              NOM_USU_ULT_ATU = 'ESOCIAL',
              NOM_PRO_ULT_ATU = 'SP_SETA_PROCESSO'
        WHERE ID_CTR_PROCESSO = P_ID_CTR_PROCESSO;
       
       COMMIT;               
       
    END IF;       
  
  END SP_SETA_PROCESSO;
 
END PAC_ESOCIAL_EVENTOS_NP;
/
